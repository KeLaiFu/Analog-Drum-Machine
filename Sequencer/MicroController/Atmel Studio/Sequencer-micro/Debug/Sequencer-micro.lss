
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001046  000010da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001046  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015b  00800126  00800126  00001100  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000518  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a772  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c5e  00000000  00000000  0000bdfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027e4  00000000  00000000  0000ea58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af8  00000000  00000000  0001123c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a72  00000000  00000000  00011d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b3e  00000000  00000000  000137a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  000152e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_11>
      30:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_12>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_14>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	d1 01       	movw	r26, r2

0000006a <__ctors_end>:
      6a:	04 02       	muls	r16, r20

0000006c <__dtors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf ef       	ldi	r28, 0xFF	; 255
      72:	d8 e0       	ldi	r29, 0x08	; 8
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	11 e0       	ldi	r17, 0x01	; 1
      7a:	a0 e0       	ldi	r26, 0x00	; 0
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	e6 e4       	ldi	r30, 0x46	; 70
      80:	f0 e1       	ldi	r31, 0x10	; 16
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	a6 32       	cpi	r26, 0x26	; 38
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	22 e0       	ldi	r18, 0x02	; 2
      90:	a6 e2       	ldi	r26, 0x26	; 38
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	a1 38       	cpi	r26, 0x81	; 129
      9a:	b2 07       	cpc	r27, r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	c5 e3       	ldi	r28, 0x35	; 53
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
      a6:	21 97       	sbiw	r28, 0x01	; 1
      a8:	fe 01       	movw	r30, r28
      aa:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__tablejump2__>
      ae:	c4 33       	cpi	r28, 0x34	; 52
      b0:	d1 07       	cpc	r29, r17
      b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
      b4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
      b8:	0c 94 16 08 	jmp	0x102c	; 0x102c <__do_global_dtors>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_ZN7ButtonsC1Ev>:


#include "Buttons.h"

// default constructor
Buttons::Buttons()
      c0:	fc 01       	movw	r30, r24
{
	//Initialize states to zero
	currentState = 0;
      c2:	11 82       	std	Z+1, r1	; 0x01
      c4:	10 82       	st	Z, r1
	previousState = 0;
      c6:	13 82       	std	Z+3, r1	; 0x03
      c8:	12 82       	std	Z+2, r1	; 0x02
	
	//There's nothing to toggle at creation
	toggledValues = 0;
      ca:	15 82       	std	Z+5, r1	; 0x05
      cc:	14 82       	std	Z+4, r1	; 0x04
      ce:	08 95       	ret

000000d0 <_ZN4LEDs11loadMeasureEPPjhh>:
	highByte = input >> 8;
	lowByte = input;
}

void LEDs::loadMeasure( uint16_t ** measureInput, uint8_t measureSelectInput, uint8_t size )
{
      d0:	fc 01       	movw	r30, r24
	valuesArr = measureInput;
      d2:	73 83       	std	Z+3, r23	; 0x03
      d4:	62 83       	std	Z+2, r22	; 0x02
	sizeOfMeasure = size;
      d6:	24 83       	std	Z+4, r18	; 0x04
	measureSelect = measureSelectInput;
      d8:	45 83       	std	Z+5, r20	; 0x05
      da:	08 95       	ret

000000dc <_ZN4LEDs13setInstrumentEj>:
}

void LEDs::setInstrument( uint16_t instrumentInput )
{
	instrument = instrumentInput;
      dc:	fc 01       	movw	r30, r24
      de:	66 83       	std	Z+6, r22	; 0x06
      e0:	08 95       	ret

000000e2 <_ZN4LEDs14generateBitMapEv>:
}

void LEDs::generateBitMap( void )
{
      e2:	0f 93       	push	r16
      e4:	1f 93       	push	r17
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	ec 01       	movw	r28, r24
	uint16_t isProgrammed = 0;
	uint16_t temp = 0;
	for(uint8_t i=0; i < sizeOfMeasure ; i++)
      ec:	9c 81       	ldd	r25, Y+4	; 0x04
      ee:	99 23       	and	r25, r25
      f0:	69 f1       	breq	.+90     	; 0x14c <_ZN4LEDs14generateBitMapEv+0x6a>
	{	
		isProgrammed = valuesArr[measureSelect][i] & (1 << instrument);
      f2:	a1 e0       	ldi	r26, 0x01	; 1
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	0e 80       	ldd	r0, Y+6	; 0x06
      f8:	02 c0       	rjmp	.+4      	; 0xfe <_ZN4LEDs14generateBitMapEv+0x1c>
      fa:	aa 0f       	add	r26, r26
      fc:	bb 1f       	adc	r27, r27
      fe:	0a 94       	dec	r0
     100:	e2 f7       	brpl	.-8      	; 0xfa <_ZN4LEDs14generateBitMapEv+0x18>
     102:	ed 81       	ldd	r30, Y+5	; 0x05
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ee 0f       	add	r30, r30
     108:	ff 1f       	adc	r31, r31
     10a:	2a 81       	ldd	r18, Y+2	; 0x02
     10c:	3b 81       	ldd	r19, Y+3	; 0x03
     10e:	e2 0f       	add	r30, r18
     110:	f3 1f       	adc	r31, r19
     112:	01 90       	ld	r0, Z+
     114:	f0 81       	ld	r31, Z
     116:	e0 2d       	mov	r30, r0
     118:	40 e0       	ldi	r20, 0x00	; 0
     11a:	50 e0       	ldi	r21, 0x00	; 0
     11c:	60 e0       	ldi	r22, 0x00	; 0
     11e:	70 e0       	ldi	r23, 0x00	; 0

		if(isProgrammed > 0){
			temp |= (1 << i); 
     120:	01 e0       	ldi	r16, 0x01	; 1
     122:	10 e0       	ldi	r17, 0x00	; 0
{
	uint16_t isProgrammed = 0;
	uint16_t temp = 0;
	for(uint8_t i=0; i < sizeOfMeasure ; i++)
	{	
		isProgrammed = valuesArr[measureSelect][i] & (1 << instrument);
     124:	21 91       	ld	r18, Z+
     126:	31 91       	ld	r19, Z+
     128:	2a 23       	and	r18, r26
     12a:	3b 23       	and	r19, r27

		if(isProgrammed > 0){
     12c:	23 2b       	or	r18, r19
     12e:	49 f0       	breq	.+18     	; 0x142 <_ZN4LEDs14generateBitMapEv+0x60>
			temp |= (1 << i); 
     130:	98 01       	movw	r18, r16
     132:	04 2e       	mov	r0, r20
     134:	02 c0       	rjmp	.+4      	; 0x13a <_ZN4LEDs14generateBitMapEv+0x58>
     136:	22 0f       	add	r18, r18
     138:	33 1f       	adc	r19, r19
     13a:	0a 94       	dec	r0
     13c:	e2 f7       	brpl	.-8      	; 0x136 <_ZN4LEDs14generateBitMapEv+0x54>
     13e:	62 2b       	or	r22, r18
     140:	73 2b       	or	r23, r19
     142:	4f 5f       	subi	r20, 0xFF	; 255
     144:	5f 4f       	sbci	r21, 0xFF	; 255

void LEDs::generateBitMap( void )
{
	uint16_t isProgrammed = 0;
	uint16_t temp = 0;
	for(uint8_t i=0; i < sizeOfMeasure ; i++)
     146:	49 17       	cp	r20, r25
     148:	68 f3       	brcs	.-38     	; 0x124 <_ZN4LEDs14generateBitMapEv+0x42>
     14a:	02 c0       	rjmp	.+4      	; 0x150 <_ZN4LEDs14generateBitMapEv+0x6e>
}

void LEDs::generateBitMap( void )
{
	uint16_t isProgrammed = 0;
	uint16_t temp = 0;
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	70 e0       	ldi	r23, 0x00	; 0
	sizeOfMeasure = 0;
} //LEDs

void LEDs::load16BitData(uint16_t input)
{
	highByte = input >> 8;
     150:	78 83       	st	Y, r23
	lowByte = input;
     152:	69 83       	std	Y+1, r22	; 0x01
		if(isProgrammed > 0){
			temp |= (1 << i); 
		}
	}
	this->load16BitData(temp);
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <_ZN12RotarySwitchC1Ev>:


#include "RotarySwitch.h"

// default constructor
RotarySwitch::RotarySwitch()
     15e:	08 95       	ret

00000160 <_ZN8SevenSegC1Eh>:
		}
		
		//Get bitmaps
		bitMaps[i] = sevenSegBitMap[ numbersToPrint[i] ];
	}
}
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	ec 01       	movw	r28, r24
     166:	6c 83       	std	Y+4, r22	; 0x04
     168:	86 2f       	mov	r24, r22
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 27 02 	call	0x44e	; 0x44e <_Znaj>
     170:	99 83       	std	Y+1, r25	; 0x01
     172:	88 83       	st	Y, r24
     174:	8c 81       	ldd	r24, Y+4	; 0x04
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 27 02 	call	0x44e	; 0x44e <_Znaj>
     17c:	9b 83       	std	Y+3, r25	; 0x03
     17e:	8a 83       	std	Y+2, r24	; 0x02
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <_ZN8SevenSegD1Ev>:

// default destructor
SevenSeg::~SevenSeg()
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	ec 01       	movw	r28, r24
{
	delete numbersToPrint;
     18c:	88 81       	ld	r24, Y
     18e:	99 81       	ldd	r25, Y+1	; 0x01
     190:	0e 94 24 02 	call	0x448	; 0x448 <_ZdlPv>
	delete bitMaps;
     194:	8a 81       	ldd	r24, Y+2	; 0x02
     196:	9b 81       	ldd	r25, Y+3	; 0x03
     198:	0e 94 24 02 	call	0x448	; 0x448 <_ZdlPv>
} //~SevenSeg
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <__vector_14>:

void disableShifting( void )
{
	//TIMSK2 is the TC2 Interrupt Mask Register
	//We will disable interrupt on compare match with OCR2A
	TIMSK2 &= ~(1 << OCIE2A);
     1a2:	1f 92       	push	r1
     1a4:	0f 92       	push	r0
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	0f 92       	push	r0
     1aa:	11 24       	eor	r1, r1
     1ac:	2f 93       	push	r18
     1ae:	3f 93       	push	r19
     1b0:	4f 93       	push	r20
     1b2:	5f 93       	push	r21
     1b4:	6f 93       	push	r22
     1b6:	7f 93       	push	r23
     1b8:	8f 93       	push	r24
     1ba:	9f 93       	push	r25
     1bc:	af 93       	push	r26
     1be:	bf 93       	push	r27
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
     1c4:	85 e7       	ldi	r24, 0x75	; 117
     1c6:	92 e0       	ldi	r25, 0x02	; 2
     1c8:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5Timer14incrementTimerEv>
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	bf 91       	pop	r27
     1d2:	af 91       	pop	r26
     1d4:	9f 91       	pop	r25
     1d6:	8f 91       	pop	r24
     1d8:	7f 91       	pop	r23
     1da:	6f 91       	pop	r22
     1dc:	5f 91       	pop	r21
     1de:	4f 91       	pop	r20
     1e0:	3f 91       	pop	r19
     1e2:	2f 91       	pop	r18
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <__vector_12>:
     1ee:	78 94       	sei
     1f0:	1f 92       	push	r1
     1f2:	0f 92       	push	r0
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
     1fa:	0f 90       	pop	r0
     1fc:	0f be       	out	0x3f, r0	; 63
     1fe:	0f 90       	pop	r0
     200:	1f 90       	pop	r1
     202:	18 95       	reti

00000204 <_Z20setUpTimerInterruptsv>:
     204:	ee e6       	ldi	r30, 0x6E	; 110
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	82 60       	ori	r24, 0x02	; 2
     20c:	80 83       	st	Z, r24
     20e:	89 e1       	ldi	r24, 0x19	; 25
     210:	87 bd       	out	0x27, r24	; 39
     212:	92 e0       	ldi	r25, 0x02	; 2
     214:	94 bd       	out	0x24, r25	; 36
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	85 bd       	out	0x25, r24	; 37
     21a:	ef e6       	ldi	r30, 0x6F	; 111
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	86 60       	ori	r24, 0x06	; 6
     222:	80 83       	st	Z, r24
     224:	20 e4       	ldi	r18, 0x40	; 64
     226:	36 e0       	ldi	r19, 0x06	; 6
     228:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     22c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     230:	21 e0       	ldi	r18, 0x01	; 1
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     238:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     23c:	89 e0       	ldi	r24, 0x09	; 9
     23e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     242:	8f ef       	ldi	r24, 0xFF	; 255
     244:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     248:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     252:	78 94       	sei
     254:	08 95       	ret

00000256 <_Z25disableTimerOneInterruptsv>:
}

void disableTimerOneInterrupts( void )
{
	TIMSK1 &= ~((1 << OCIE1A) | (1 << OCIE2B));
     256:	ef e6       	ldi	r30, 0x6F	; 111
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	89 7f       	andi	r24, 0xF9	; 249
     25e:	80 83       	st	Z, r24
     260:	08 95       	ret

00000262 <__vector_11>:
ISR( TIMER1_COMPB_vect, ISR_NOBLOCK)
{
}

ISR( TIMER1_COMPA_vect, ISR_NOBLOCK )
{
     262:	78 94       	sei
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	11 24       	eor	r1, r1
     26e:	2f 93       	push	r18
     270:	3f 93       	push	r19
     272:	4f 93       	push	r20
     274:	5f 93       	push	r21
     276:	6f 93       	push	r22
     278:	7f 93       	push	r23
     27a:	8f 93       	push	r24
     27c:	9f 93       	push	r25
     27e:	af 93       	push	r26
     280:	bf 93       	push	r27
     282:	ef 93       	push	r30
     284:	ff 93       	push	r31
	disableTimerOneInterrupts();
     286:	0e 94 2b 01 	call	0x256	; 0x256 <_Z25disableTimerOneInterruptsv>
}
     28a:	ff 91       	pop	r31
     28c:	ef 91       	pop	r30
     28e:	bf 91       	pop	r27
     290:	af 91       	pop	r26
     292:	9f 91       	pop	r25
     294:	8f 91       	pop	r24
     296:	7f 91       	pop	r23
     298:	6f 91       	pop	r22
     29a:	5f 91       	pop	r21
     29c:	4f 91       	pop	r20
     29e:	3f 91       	pop	r19
     2a0:	2f 91       	pop	r18
     2a2:	0f 90       	pop	r0
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	0f 90       	pop	r0
     2a8:	1f 90       	pop	r1
     2aa:	18 95       	reti

000002ac <_Z11triggerTaskv>:
//TASKS
///////////////////////////////////////////

//Task for triggering
void triggerTask( void ){
	instumentTrigger.run();
     2ac:	86 e2       	ldi	r24, 0x26	; 38
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_ZN17InstrumentTrigger3runEv>
     2b4:	08 95       	ret

000002b6 <_Z14triggerSetHighv>:
}
void triggerSetHigh( void ){
	instumentTrigger.setHigh();
     2b6:	86 e2       	ldi	r24, 0x26	; 38
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN17InstrumentTrigger7setHighEv>
     2be:	08 95       	ret

000002c0 <_Z13triggerSetLowv>:
}
void triggerSetLow( void ){
	instumentTrigger.setLow();
     2c0:	86 e2       	ldi	r24, 0x26	; 38
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 37 04 	call	0x86e	; 0x86e <_ZN17InstrumentTrigger6setLowEv>
     2c8:	08 95       	ret

000002ca <_Z18sequencerTimerTaskv>:
}
void sequencerTimerTask( void ){
	sequencer.runTimer();
     2ca:	86 e6       	ldi	r24, 0x66	; 102
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN9Sequencer8runTimerEv>
     2d2:	08 95       	ret

000002d4 <_Z10updateLEDsv>:
}
void updateLEDs(void){
	sequencer.updateLEDs();
     2d4:	86 e6       	ldi	r24, 0x66	; 102
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN9Sequencer10updateLEDsEv>
     2dc:	08 95       	ret

000002de <_Z15printOutputTaskv>:
}
void printOutputTask(void){
	printOutput.run();
     2de:	85 e4       	ldi	r24, 0x45	; 69
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN11PrintOutput3runEv>
     2e6:	08 95       	ret

000002e8 <main>:
}

int main(void)
{	
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	c2 54       	subi	r28, 0x42	; 66
     2f2:	d1 09       	sbc	r29, r1
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61

	//Setup interrupts to get the timer to work
	setUpTimerInterrupts();
     2fe:	0e 94 02 01 	call	0x204	; 0x204 <_Z20setUpTimerInterruptsv>
	timer.reset();
     302:	85 e7       	ldi	r24, 0x75	; 117
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN5Timer5resetEv>
	
	//Initialize task manager
	TaskManager taskManager( timer );
     30a:	65 e7       	ldi	r22, 0x75	; 117
     30c:	72 e0       	ldi	r23, 0x02	; 2
     30e:	ce 01       	movw	r24, r28
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_ZN11TaskManagerC1ER5Timer>

	sequencer.loadInstrumentTriggerReference( instumentTrigger );
     316:	66 e2       	ldi	r22, 0x26	; 38
     318:	71 e0       	ldi	r23, 0x01	; 1
     31a:	86 e6       	ldi	r24, 0x66	; 102
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN9Sequencer30loadInstrumentTriggerReferenceER17InstrumentTrigger>

	uint16_t testSequence [16] = {
		0xFFFF,0x0000,0xFFFF,0x0000,0xFFFF,0x0000,0xFFFF,0x0000,
		0xFFFF,0x0000,0xFFFF,0x0000,0xFFFF,0x0000,0xFFFF,0x0000
	};
     322:	80 e2       	ldi	r24, 0x20	; 32
     324:	e6 e0       	ldi	r30, 0x06	; 6
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	de 01       	movw	r26, r28
     32a:	93 96       	adiw	r26, 0x23	; 35
     32c:	01 90       	ld	r0, Z+
     32e:	0d 92       	st	X+, r0
     330:	8a 95       	dec	r24
     332:	e1 f7       	brne	.-8      	; 0x32c <main+0x44>
	sequencer.loadSequence(testSequence, 16);
     334:	40 e1       	ldi	r20, 0x10	; 16
     336:	be 01       	movw	r22, r28
     338:	6d 5d       	subi	r22, 0xDD	; 221
     33a:	7f 4f       	sbci	r23, 0xFF	; 255
     33c:	86 e6       	ldi	r24, 0x66	; 102
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN9Sequencer12loadSequenceEPjh>

	//Add tasks with priority 0-250. 0 is real time. 251 never runs.
	taskManager.addTask( triggerTask, 128);
     344:	40 e8       	ldi	r20, 0x80	; 128
     346:	66 e5       	ldi	r22, 0x56	; 86
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	ce 01       	movw	r24, r28
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( triggerSetLow, 0 );
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	60 e6       	ldi	r22, 0x60	; 96
     356:	71 e0       	ldi	r23, 0x01	; 1
     358:	ce 01       	movw	r24, r28
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( triggerSetHigh, 4);
     360:	44 e0       	ldi	r20, 0x04	; 4
     362:	6b e5       	ldi	r22, 0x5B	; 91
     364:	71 e0       	ldi	r23, 0x01	; 1
     366:	ce 01       	movw	r24, r28
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( sequencerTimerTask, 32);
     36e:	40 e2       	ldi	r20, 0x20	; 32
     370:	65 e6       	ldi	r22, 0x65	; 101
     372:	71 e0       	ldi	r23, 0x01	; 1
     374:	ce 01       	movw	r24, r28
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( updateLEDs, 250);
     37c:	4a ef       	ldi	r20, 0xFA	; 250
     37e:	6a e6       	ldi	r22, 0x6A	; 106
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	ce 01       	movw	r24, r28
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( printOutputTask, 250);
     38a:	4a ef       	ldi	r20, 0xFA	; 250
     38c:	6f e6       	ldi	r22, 0x6F	; 111
     38e:	71 e0       	ldi	r23, 0x01	; 1
     390:	ce 01       	movw	r24, r28
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZN11TaskManager7addTaskEPFvvEh>
	
    while (1) 
    {
		taskManager.runTasks();
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	0e 94 46 06 	call	0xc8c	; 0xc8c <_ZN11TaskManager8runTasksEv>
     3a0:	fb cf       	rjmp	.-10     	; 0x398 <main+0xb0>

000003a2 <_GLOBAL__sub_I_timer>:
#include "Tasks/PrintOutput.h"
#include "Tasks/RotaryEncoder.h"
#include "Tasks/InstrumentTrigger.h"

//Define a pointer to a timer object.
Timer timer;
     3a2:	85 e7       	ldi	r24, 0x75	; 117
     3a4:	92 e0       	ldi	r25, 0x02	; 2
     3a6:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN5TimerC1Ev>

//Digital input task object. Shifts in input and sorts it.
DigitalInput digitalInput;
     3aa:	8c e5       	ldi	r24, 0x5C	; 92
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN12DigitalInputC1Ev>

//Input poll task object latches in the input at regular intervals.
InputPoll inputPoll( timer, digitalInput );
     3b2:	4c e5       	ldi	r20, 0x5C	; 92
     3b4:	52 e0       	ldi	r21, 0x02	; 2
     3b6:	65 e7       	ldi	r22, 0x75	; 117
     3b8:	72 e0       	ldi	r23, 0x02	; 2
     3ba:	84 e5       	ldi	r24, 0x54	; 84
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN9InputPollC1ER5TimerR12DigitalInput>

//Acts the same as above, but operates at higher frequency for the encoders
RotaryEncoder rotaryEncoders( timer, digitalInput );
     3c2:	4c e5       	ldi	r20, 0x5C	; 92
     3c4:	52 e0       	ldi	r21, 0x02	; 2
     3c6:	65 e7       	ldi	r22, 0x75	; 117
     3c8:	72 e0       	ldi	r23, 0x02	; 2
     3ca:	83 e4       	ldi	r24, 0x43	; 67
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN13RotaryEncoderC1ER5TimerR12DigitalInput>

//Task object that deals with the sequencer. 
Sequencer sequencer(timer, digitalInput, rotaryEncoders );
     3d2:	23 e4       	ldi	r18, 0x43	; 67
     3d4:	32 e0       	ldi	r19, 0x02	; 2
     3d6:	4c e5       	ldi	r20, 0x5C	; 92
     3d8:	52 e0       	ldi	r21, 0x02	; 2
     3da:	65 e7       	ldi	r22, 0x75	; 117
     3dc:	72 e0       	ldi	r23, 0x02	; 2
     3de:	86 e6       	ldi	r24, 0x66	; 102
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder>

//Task object for printing to output
PrintOutput printOutput( timer, sequencer );
     3e6:	46 e6       	ldi	r20, 0x66	; 102
     3e8:	51 e0       	ldi	r21, 0x01	; 1
     3ea:	65 e7       	ldi	r22, 0x75	; 117
     3ec:	72 e0       	ldi	r23, 0x02	; 2
     3ee:	85 e4       	ldi	r24, 0x45	; 69
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN11PrintOutputC1ER5TimerR9Sequencer>

//Task object for instrument trigger
InstrumentTrigger instumentTrigger( timer, sequencer );
     3f6:	46 e6       	ldi	r20, 0x66	; 102
     3f8:	51 e0       	ldi	r21, 0x01	; 1
     3fa:	65 e7       	ldi	r22, 0x75	; 117
     3fc:	72 e0       	ldi	r23, 0x02	; 2
     3fe:	86 e2       	ldi	r24, 0x26	; 38
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 84 03 	call	0x708	; 0x708 <_ZN17InstrumentTriggerC1ER5TimerR9Sequencer>
     406:	08 95       	ret

00000408 <_GLOBAL__sub_D_timer>:
     408:	86 e2       	ldi	r24, 0x26	; 38
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_ZN17InstrumentTriggerD1Ev>

//Task object that deals with the sequencer. 
Sequencer sequencer(timer, digitalInput, rotaryEncoders );

//Task object for printing to output
PrintOutput printOutput( timer, sequencer );
     410:	85 e4       	ldi	r24, 0x45	; 69
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN11PrintOutputD1Ev>

//Acts the same as above, but operates at higher frequency for the encoders
RotaryEncoder rotaryEncoders( timer, digitalInput );

//Task object that deals with the sequencer. 
Sequencer sequencer(timer, digitalInput, rotaryEncoders );
     418:	86 e6       	ldi	r24, 0x66	; 102
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 1c 06 	call	0xc38	; 0xc38 <_ZN9SequencerD1Ev>

//Input poll task object latches in the input at regular intervals.
InputPoll inputPoll( timer, digitalInput );

//Acts the same as above, but operates at higher frequency for the encoders
RotaryEncoder rotaryEncoders( timer, digitalInput );
     420:	83 e4       	ldi	r24, 0x43	; 67
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN13RotaryEncoderD1Ev>

//Digital input task object. Shifts in input and sorts it.
DigitalInput digitalInput;

//Input poll task object latches in the input at regular intervals.
InputPoll inputPoll( timer, digitalInput );
     428:	84 e5       	ldi	r24, 0x54	; 84
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	0e 94 83 03 	call	0x706	; 0x706 <_ZN9InputPollD1Ev>

//Define a pointer to a timer object.
Timer timer;

//Digital input task object. Shifts in input and sorts it.
DigitalInput digitalInput;
     430:	8c e5       	ldi	r24, 0x5C	; 92
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN12DigitalInputD1Ev>
#include "Tasks/PrintOutput.h"
#include "Tasks/RotaryEncoder.h"
#include "Tasks/InstrumentTrigger.h"

//Define a pointer to a timer object.
Timer timer;
     438:	85 e7       	ldi	r24, 0x75	; 117
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	0e 94 ba 06 	call	0xd74	; 0xd74 <_ZN5TimerD1Ev>
     440:	08 95       	ret

00000442 <_Znwj>:

 #include "helperFunctions.h"

 void * operator new(size_t size)
 {
	 return malloc(size);
     442:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <malloc>
 }
     446:	08 95       	ret

00000448 <_ZdlPv>:

 void operator delete(void * ptr)
 {
	 free(ptr);
     448:	0e 94 7e 07 	call	0xefc	; 0xefc <free>
     44c:	08 95       	ret

0000044e <_Znaj>:
 }

 void * operator new[](size_t size)
 {
	 return malloc(size);
     44e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <malloc>
 }
     452:	08 95       	ret

00000454 <_ZN3Pin17setDirectionInputEv>:
void Pin::write( uint8_t set )
{
	if ( set != LOW ){
		this->setHigh();
		} else {
		this->setLow();
     454:	dc 01       	movw	r26, r24
     456:	ed 91       	ld	r30, X+
     458:	fc 91       	ld	r31, X
     45a:	11 97       	sbiw	r26, 0x01	; 1
     45c:	90 81       	ld	r25, Z
     45e:	16 96       	adiw	r26, 0x06	; 6
     460:	8c 91       	ld	r24, X
     462:	80 95       	com	r24
     464:	89 23       	and	r24, r25
     466:	80 83       	st	Z, r24
     468:	08 95       	ret

0000046a <_ZN3Pin7setHighEv>:
     46a:	dc 01       	movw	r26, r24
     46c:	12 96       	adiw	r26, 0x02	; 2
     46e:	ed 91       	ld	r30, X+
     470:	fc 91       	ld	r31, X
     472:	13 97       	sbiw	r26, 0x03	; 3
     474:	90 81       	ld	r25, Z
     476:	16 96       	adiw	r26, 0x06	; 6
     478:	8c 91       	ld	r24, X
     47a:	89 2b       	or	r24, r25
     47c:	80 83       	st	Z, r24
     47e:	08 95       	ret

00000480 <_ZN3Pin6setLowEv>:
     480:	dc 01       	movw	r26, r24
     482:	12 96       	adiw	r26, 0x02	; 2
     484:	ed 91       	ld	r30, X+
     486:	fc 91       	ld	r31, X
     488:	13 97       	sbiw	r26, 0x03	; 3
     48a:	90 81       	ld	r25, Z
     48c:	16 96       	adiw	r26, 0x06	; 6
     48e:	8c 91       	ld	r24, X
     490:	80 95       	com	r24
     492:	89 23       	and	r24, r25
     494:	80 83       	st	Z, r24
     496:	08 95       	ret

00000498 <_ZN3Pin18setDirectionOutputEv>:
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
     49e:	0e 94 40 02 	call	0x480	; 0x480 <_ZN3Pin6setLowEv>
     4a2:	e8 81       	ld	r30, Y
     4a4:	f9 81       	ldd	r31, Y+1	; 0x01
     4a6:	90 81       	ld	r25, Z
     4a8:	8e 81       	ldd	r24, Y+6	; 0x06
     4aa:	89 2b       	or	r24, r25
     4ac:	80 83       	st	Z, r24
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <_ZN3PinC1EhPVhh>:
     4b4:	fc 01       	movw	r30, r24
     4b6:	ca 01       	movw	r24, r20
     4b8:	02 97       	sbiw	r24, 0x02	; 2
     4ba:	95 83       	std	Z+5, r25	; 0x05
     4bc:	84 83       	std	Z+4, r24	; 0x04
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	80 83       	st	Z, r24
     4c4:	53 83       	std	Z+3, r21	; 0x03
     4c6:	42 83       	std	Z+2, r20	; 0x02
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <_ZN3PinC1EhPVhh+0x1a>
     4cc:	88 0f       	add	r24, r24
     4ce:	6a 95       	dec	r22
     4d0:	ea f7       	brpl	.-6      	; 0x4cc <_ZN3PinC1EhPVhh+0x18>
     4d2:	86 83       	std	Z+6, r24	; 0x06
     4d4:	21 30       	cpi	r18, 0x01	; 1
     4d6:	21 f4       	brne	.+8      	; 0x4e0 <_ZN3PinC1EhPVhh+0x2c>
     4d8:	cf 01       	movw	r24, r30
     4da:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN3Pin18setDirectionOutputEv>
     4de:	08 95       	ret
     4e0:	cf 01       	movw	r24, r30
     4e2:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN3Pin17setDirectionInputEv>
     4e6:	08 95       	ret

000004e8 <_ZN3PinD1Ev>:
{
	*port_register &= ~pinNumber;
}

// default destructor
Pin::~Pin()
     4e8:	08 95       	ret

000004ea <_ZN13ShiftRegisterC1Ev>:

}

void ShiftRegister::getTimerReference( Timer & ptr )
{
	timer = &ptr;
     4ea:	08 95       	ret

000004ec <_ZN13ShiftRegister11singleShiftEv>:
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	ec 01       	movw	r28, r24
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	9b 81       	ldd	r25, Y+3	; 0x03
     4f6:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN3Pin7setHighEv>
     4fa:	88 81       	ld	r24, Y
     4fc:	99 81       	ldd	r25, Y+1	; 0x01
     4fe:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN5Timer8wait_1usEv>
     502:	8a 81       	ldd	r24, Y+2	; 0x02
     504:	9b 81       	ldd	r25, Y+3	; 0x03
     506:	0e 94 40 02 	call	0x480	; 0x480 <_ZN3Pin6setLowEv>
     50a:	88 81       	ld	r24, Y
     50c:	99 81       	ldd	r25, Y+1	; 0x01
     50e:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN5Timer8wait_1usEv>
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <_ZN13ShiftRegister5latchEv>:
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
     51e:	8c 81       	ldd	r24, Y+4	; 0x04
     520:	9d 81       	ldd	r25, Y+5	; 0x05
     522:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN3Pin7setHighEv>
     526:	88 81       	ld	r24, Y
     528:	99 81       	ldd	r25, Y+1	; 0x01
     52a:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN5Timer8wait_1usEv>
     52e:	8c 81       	ldd	r24, Y+4	; 0x04
     530:	9d 81       	ldd	r25, Y+5	; 0x05
     532:	0e 94 40 02 	call	0x480	; 0x480 <_ZN3Pin6setLowEv>
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <_ZN13ShiftRegisterD1Ev>:
} //getTimerReference

// default destructor
ShiftRegister::~ShiftRegister()
     53c:	08 95       	ret

0000053e <_ZN18ShiftRegister_PISOC1Ev>:
}

uint8_t ShiftRegister_PISO::readByte( void )
{
	return input_byte;
}
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24
     544:	0e 94 75 02 	call	0x4ea	; 0x4ea <_ZN13ShiftRegisterC1Ev>
     548:	19 86       	std	Y+9, r1	; 0x09
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <_ZN18ShiftRegister_PISOD1Ev>:
// default destructor
ShiftRegister_PISO::~ShiftRegister_PISO()
     550:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN13ShiftRegisterD1Ev>
     554:	08 95       	ret

00000556 <_ZN18ShiftRegister_SIPOC1Eh>:

}

void ShiftRegister_SIPO::loadByte( uint8_t byteToLoad )
{
	output_byte = byteToLoad;
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	ec 01       	movw	r28, r24
     55e:	16 2f       	mov	r17, r22
     560:	0e 94 75 02 	call	0x4ea	; 0x4ea <_ZN13ShiftRegisterC1Ev>
     564:	18 8a       	std	Y+16, r1	; 0x10
     566:	81 2f       	mov	r24, r17
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 27 02 	call	0x44e	; 0x44e <_Znaj>
     56e:	9d 87       	std	Y+13, r25	; 0x0d
     570:	8c 87       	std	Y+12, r24	; 0x0c
     572:	1e 87       	std	Y+14, r17	; 0x0e
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	89 87       	std	Y+9, r24	; 0x09
     578:	1a 86       	std	Y+10, r1	; 0x0a
     57a:	8b 87       	std	Y+11, r24	; 0x0b
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	08 95       	ret

00000584 <_ZN18ShiftRegister_SIPO9shiftBitsEv>:
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	ec 01       	movw	r28, r24
     58e:	8c 81       	ldd	r24, Y+4	; 0x04
     590:	9d 81       	ldd	r25, Y+5	; 0x05
     592:	0e 94 40 02 	call	0x480	; 0x480 <_ZN3Pin6setLowEv>
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	9b 81       	ldd	r25, Y+3	; 0x03
     59a:	0e 94 40 02 	call	0x480	; 0x480 <_ZN3Pin6setLowEv>
     59e:	8e 81       	ldd	r24, Y+6	; 0x06
     5a0:	9f 81       	ldd	r25, Y+7	; 0x07
     5a2:	0e 94 40 02 	call	0x480	; 0x480 <_ZN3Pin6setLowEv>
     5a6:	88 81       	ld	r24, Y
     5a8:	99 81       	ldd	r25, Y+1	; 0x01
     5aa:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN5Timer8wait_1usEv>
     5ae:	00 e0       	ldi	r16, 0x00	; 0
     5b0:	10 e0       	ldi	r17, 0x00	; 0
     5b2:	28 89       	ldd	r18, Y+16	; 0x10
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	00 2e       	mov	r0, r16
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x3a>
     5ba:	35 95       	asr	r19
     5bc:	27 95       	ror	r18
     5be:	0a 94       	dec	r0
     5c0:	e2 f7       	brpl	.-8      	; 0x5ba <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x36>
     5c2:	20 ff       	sbrs	r18, 0
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x4c>
     5c6:	8e 81       	ldd	r24, Y+6	; 0x06
     5c8:	9f 81       	ldd	r25, Y+7	; 0x07
     5ca:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN3Pin7setHighEv>
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x54>
     5d0:	8e 81       	ldd	r24, Y+6	; 0x06
     5d2:	9f 81       	ldd	r25, Y+7	; 0x07
     5d4:	0e 94 40 02 	call	0x480	; 0x480 <_ZN3Pin6setLowEv>
     5d8:	88 81       	ld	r24, Y
     5da:	99 81       	ldd	r25, Y+1	; 0x01
     5dc:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN5Timer8wait_1usEv>
     5e0:	ce 01       	movw	r24, r28
     5e2:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN13ShiftRegister11singleShiftEv>
     5e6:	0f 5f       	subi	r16, 0xFF	; 255
     5e8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ea:	08 30       	cpi	r16, 0x08	; 8
     5ec:	11 05       	cpc	r17, r1
     5ee:	09 f7       	brne	.-62     	; 0x5b2 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x2e>
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <_ZN18ShiftRegister_SIPO9shiftByteEv>:
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	ec 01       	movw	r28, r24
     600:	19 86       	std	Y+9, r1	; 0x09
     602:	8f 85       	ldd	r24, Y+15	; 0x0f
     604:	ec 85       	ldd	r30, Y+12	; 0x0c
     606:	fd 85       	ldd	r31, Y+13	; 0x0d
     608:	e8 0f       	add	r30, r24
     60a:	f1 1d       	adc	r31, r1
     60c:	80 81       	ld	r24, Z
     60e:	88 8b       	std	Y+16, r24	; 0x10
     610:	ce 01       	movw	r24, r28
     612:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN18ShiftRegister_SIPO9shiftBitsEv>
     616:	8f 85       	ldd	r24, Y+15	; 0x0f
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	8f 87       	std	Y+15, r24	; 0x0f
     61c:	9e 85       	ldd	r25, Y+14	; 0x0e
     61e:	89 17       	cp	r24, r25
     620:	28 f0       	brcs	.+10     	; 0x62c <_ZN18ShiftRegister_SIPO9shiftByteEv+0x32>
     622:	1f 86       	std	Y+15, r1	; 0x0f
     624:	1a 86       	std	Y+10, r1	; 0x0a
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	89 87       	std	Y+9, r24	; 0x09
     62a:	8b 87       	std	Y+11, r24	; 0x0b
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <_ZN18ShiftRegister_SIPOD1Ev>:
}

// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
     632:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN13ShiftRegisterD1Ev>
     636:	08 95       	ret

00000638 <_ZN12DigitalInputC1Ev>:
							   (inputBytes[BUTTONS_INPUT_LOW_BYTE]) );
	
		//Finished sorting the input data
		sortData = false;
	} 
}
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ec 01       	movw	r28, r24
     642:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN18ShiftRegister_PISOC1Ev>
     646:	1a 86       	std	Y+10, r1	; 0x0a
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	8b 87       	std	Y+11, r24	; 0x0b
     64c:	18 8e       	std	Y+24, r1	; 0x18
     64e:	1f 8a       	std	Y+23, r1	; 0x17
     650:	87 e0       	ldi	r24, 0x07	; 7
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     658:	8c 01       	movw	r16, r24
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	45 e2       	ldi	r20, 0x25	; 37
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN3PinC1EhPVhh>
     666:	1f 83       	std	Y+7, r17	; 0x07
     668:	0e 83       	std	Y+6, r16	; 0x06
     66a:	87 e0       	ldi	r24, 0x07	; 7
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     672:	8c 01       	movw	r16, r24
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	45 e2       	ldi	r20, 0x25	; 37
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN3PinC1EhPVhh>
     680:	1d 83       	std	Y+5, r17	; 0x05
     682:	0c 83       	std	Y+4, r16	; 0x04
     684:	87 e0       	ldi	r24, 0x07	; 7
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     68c:	8c 01       	movw	r16, r24
     68e:	21 e0       	ldi	r18, 0x01	; 1
     690:	45 e2       	ldi	r20, 0x25	; 37
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	62 e0       	ldi	r22, 0x02	; 2
     696:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN3PinC1EhPVhh>
     69a:	1b 83       	std	Y+3, r17	; 0x03
     69c:	0a 83       	std	Y+2, r16	; 0x02
     69e:	86 e0       	ldi	r24, 0x06	; 6
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     6a6:	8c 01       	movw	r16, r24
     6a8:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN7ButtonsC1Ev>
     6ac:	1a 8b       	std	Y+18, r17	; 0x12
     6ae:	09 8b       	std	Y+17, r16	; 0x11
     6b0:	86 e0       	ldi	r24, 0x06	; 6
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     6b8:	8c 01       	movw	r16, r24
     6ba:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN12RotarySwitchC1Ev>
     6be:	1c 8b       	std	Y+20, r17	; 0x14
     6c0:	0b 8b       	std	Y+19, r16	; 0x13
     6c2:	86 e0       	ldi	r24, 0x06	; 6
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     6ca:	8c 01       	movw	r16, r24
     6cc:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN12RotarySwitchC1Ev>
     6d0:	1e 8b       	std	Y+22, r17	; 0x16
     6d2:	0d 8b       	std	Y+21, r16	; 0x15
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	08 95       	ret

000006de <_ZN12DigitalInputD1Ev>:

// default destructor
DigitalInput::~DigitalInput()
     6de:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN18ShiftRegister_PISOD1Ev>
     6e2:	08 95       	ret

000006e4 <_ZN9InputPollC1ER5TimerR12DigitalInput>:
			
		//Update time stamp
		timeStamp = timer->millis();
	}

}
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
     6ea:	cb 01       	movw	r24, r22
     6ec:	59 83       	std	Y+1, r21	; 0x01
     6ee:	48 83       	st	Y, r20
     6f0:	7b 83       	std	Y+3, r23	; 0x03
     6f2:	6a 83       	std	Y+2, r22	; 0x02
     6f4:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZN5Timer6millisEv>
     6f8:	6c 83       	std	Y+4, r22	; 0x04
     6fa:	7d 83       	std	Y+5, r23	; 0x05
     6fc:	8e 83       	std	Y+6, r24	; 0x06
     6fe:	9f 83       	std	Y+7, r25	; 0x07
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <_ZN9InputPollD1Ev>:


InputPoll::~InputPoll()
     706:	08 95       	ret

00000708 <_ZN17InstrumentTriggerC1ER5TimerR9Sequencer>:
		}
	}
}

void InstrumentTrigger::buildOutputBuffer( void )
{
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	ec 01       	movw	r28, r24
     716:	7b 01       	movw	r14, r22
     718:	8a 01       	movw	r16, r20
     71a:	62 e0       	ldi	r22, 0x02	; 2
     71c:	0e 94 ab 02 	call	0x556	; 0x556 <_ZN18ShiftRegister_SIPOC1Eh>
     720:	fe 8a       	std	Y+22, r15	; 0x16
     722:	ed 8a       	std	Y+21, r14	; 0x15
     724:	1c 8b       	std	Y+20, r17	; 0x14
     726:	0b 8b       	std	Y+19, r16	; 0x13
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 27 02 	call	0x44e	; 0x44e <_Znaj>
     730:	9a 8b       	std	Y+18, r25	; 0x12
     732:	89 8b       	std	Y+17, r24	; 0x11
     734:	1f 8a       	std	Y+23, r1	; 0x17
     736:	18 8e       	std	Y+24, r1	; 0x18
     738:	19 8e       	std	Y+25, r1	; 0x19
     73a:	1a 8e       	std	Y+26, r1	; 0x1a
     73c:	1b 8e       	std	Y+27, r1	; 0x1b
     73e:	87 e0       	ldi	r24, 0x07	; 7
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     746:	8c 01       	movw	r16, r24
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	4b e2       	ldi	r20, 0x2B	; 43
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	64 e0       	ldi	r22, 0x04	; 4
     750:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN3PinC1EhPVhh>
     754:	1b 83       	std	Y+3, r17	; 0x03
     756:	0a 83       	std	Y+2, r16	; 0x02
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     760:	8c 01       	movw	r16, r24
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	4b e2       	ldi	r20, 0x2B	; 43
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	63 e0       	ldi	r22, 0x03	; 3
     76a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN3PinC1EhPVhh>
     76e:	1d 83       	std	Y+5, r17	; 0x05
     770:	0c 83       	std	Y+4, r16	; 0x04
     772:	87 e0       	ldi	r24, 0x07	; 7
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     77a:	8c 01       	movw	r16, r24
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	4b e2       	ldi	r20, 0x2B	; 43
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	62 e0       	ldi	r22, 0x02	; 2
     784:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN3PinC1EhPVhh>
     788:	1f 83       	std	Y+7, r17	; 0x07
     78a:	0e 83       	std	Y+6, r16	; 0x06
     78c:	1b 8e       	std	Y+27, r1	; 0x1b
     78e:	1e 8e       	std	Y+30, r1	; 0x1e
     790:	1d 8e       	std	Y+29, r1	; 0x1d
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	08 95       	ret

000007a0 <_ZN17InstrumentTrigger3runEv>:
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	fc 01       	movw	r30, r24
     7a6:	22 85       	ldd	r18, Z+10	; 0x0a
     7a8:	21 30       	cpi	r18, 0x01	; 1
     7aa:	49 f4       	brne	.+18     	; 0x7be <_ZN17InstrumentTrigger3runEv+0x1e>
     7ac:	ec 01       	movw	r28, r24
     7ae:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN18ShiftRegister_SIPO9shiftByteEv>
     7b2:	89 85       	ldd	r24, Y+9	; 0x09
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	19 f4       	brne	.+6      	; 0x7be <_ZN17InstrumentTrigger3runEv+0x1e>
     7b8:	ce 01       	movw	r24, r28
     7ba:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN13ShiftRegister5latchEv>
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <_ZN17InstrumentTrigger7setHighEv>:
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	fc 01       	movw	r30, r24
     7ca:	23 89       	ldd	r18, Z+19	; 0x13
     7cc:	34 89       	ldd	r19, Z+20	; 0x14
     7ce:	f9 01       	movw	r30, r18
     7d0:	e5 53       	subi	r30, 0x35	; 53
     7d2:	ff 4f       	sbci	r31, 0xFF	; 255
     7d4:	40 81       	ld	r20, Z
     7d6:	41 30       	cpi	r20, 0x01	; 1
     7d8:	09 f0       	breq	.+2      	; 0x7dc <_ZN17InstrumentTrigger7setHighEv+0x18>
     7da:	46 c0       	rjmp	.+140    	; 0x868 <_ZN17InstrumentTrigger7setHighEv+0xa4>
     7dc:	ec 01       	movw	r28, r24
     7de:	c9 01       	movw	r24, r18
     7e0:	0e 94 17 06 	call	0xc2e	; 0xc2e <_ZN9Sequencer17getPositionInTimeEv>
     7e4:	28 2f       	mov	r18, r24
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	35 95       	asr	r19
     7ea:	27 95       	ror	r18
     7ec:	35 95       	asr	r19
     7ee:	27 95       	ror	r18
     7f0:	35 95       	asr	r19
     7f2:	27 95       	ror	r18
     7f4:	35 95       	asr	r19
     7f6:	27 95       	ror	r18
     7f8:	2e 8f       	std	Y+30, r18	; 0x1e
     7fa:	8f 70       	andi	r24, 0x0F	; 15
     7fc:	8d 8f       	std	Y+29, r24	; 0x1d
     7fe:	ac 85       	ldd	r26, Y+12	; 0x0c
     800:	bd 85       	ldd	r27, Y+13	; 0x0d
     802:	eb 89       	ldd	r30, Y+19	; 0x13
     804:	fc 89       	ldd	r31, Y+20	; 0x14
     806:	22 95       	swap	r18
     808:	32 95       	swap	r19
     80a:	30 7f       	andi	r19, 0xF0	; 240
     80c:	32 27       	eor	r19, r18
     80e:	20 7f       	andi	r18, 0xF0	; 240
     810:	32 27       	eor	r19, r18
     812:	28 0f       	add	r18, r24
     814:	31 1d       	adc	r19, r1
     816:	22 0f       	add	r18, r18
     818:	33 1f       	adc	r19, r19
     81a:	e2 0f       	add	r30, r18
     81c:	f3 1f       	adc	r31, r19
     81e:	81 81       	ldd	r24, Z+1	; 0x01
     820:	8c 93       	st	X, r24
     822:	ac 85       	ldd	r26, Y+12	; 0x0c
     824:	bd 85       	ldd	r27, Y+13	; 0x0d
     826:	2b 89       	ldd	r18, Y+19	; 0x13
     828:	3c 89       	ldd	r19, Y+20	; 0x14
     82a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     82c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     82e:	40 e1       	ldi	r20, 0x10	; 16
     830:	84 9f       	mul	r24, r20
     832:	f0 01       	movw	r30, r0
     834:	11 24       	eor	r1, r1
     836:	e9 0f       	add	r30, r25
     838:	f1 1d       	adc	r31, r1
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	e2 0f       	add	r30, r18
     840:	f3 1f       	adc	r31, r19
     842:	80 81       	ld	r24, Z
     844:	11 96       	adiw	r26, 0x01	; 1
     846:	8c 93       	st	X, r24
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	8a 87       	std	Y+10, r24	; 0x0a
     84c:	eb 89       	ldd	r30, Y+19	; 0x13
     84e:	fc 89       	ldd	r31, Y+20	; 0x14
     850:	e5 53       	subi	r30, 0x35	; 53
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	10 82       	st	Z, r1
     856:	8b 8f       	std	Y+27, r24	; 0x1b
     858:	8d 89       	ldd	r24, Y+21	; 0x15
     85a:	9e 89       	ldd	r25, Y+22	; 0x16
     85c:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZN5Timer6millisEv>
     860:	6f 8b       	std	Y+23, r22	; 0x17
     862:	78 8f       	std	Y+24, r23	; 0x18
     864:	89 8f       	std	Y+25, r24	; 0x19
     866:	9a 8f       	std	Y+26, r25	; 0x1a
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <_ZN17InstrumentTrigger6setLowEv>:
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	fc 01       	movw	r30, r24
     874:	23 8d       	ldd	r18, Z+27	; 0x1b
     876:	21 30       	cpi	r18, 0x01	; 1
     878:	01 f5       	brne	.+64     	; 0x8ba <_ZN17InstrumentTrigger6setLowEv+0x4c>
     87a:	21 85       	ldd	r18, Z+9	; 0x09
     87c:	21 30       	cpi	r18, 0x01	; 1
     87e:	e9 f4       	brne	.+58     	; 0x8ba <_ZN17InstrumentTrigger6setLowEv+0x4c>
     880:	ec 01       	movw	r28, r24
     882:	47 89       	ldd	r20, Z+23	; 0x17
     884:	50 8d       	ldd	r21, Z+24	; 0x18
     886:	61 8d       	ldd	r22, Z+25	; 0x19
     888:	72 8d       	ldd	r23, Z+26	; 0x1a
     88a:	85 89       	ldd	r24, Z+21	; 0x15
     88c:	96 89       	ldd	r25, Z+22	; 0x16
     88e:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Timer14elapsed_millisEm>
     892:	6a 30       	cpi	r22, 0x0A	; 10
     894:	71 05       	cpc	r23, r1
     896:	81 05       	cpc	r24, r1
     898:	91 05       	cpc	r25, r1
     89a:	78 f0       	brcs	.+30     	; 0x8ba <_ZN17InstrumentTrigger6setLowEv+0x4c>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	8a 87       	std	Y+10, r24	; 0x0a
     8a0:	eb 89       	ldd	r30, Y+19	; 0x13
     8a2:	fc 89       	ldd	r31, Y+20	; 0x14
     8a4:	e5 53       	subi	r30, 0x35	; 53
     8a6:	ff 4f       	sbci	r31, 0xFF	; 255
     8a8:	10 82       	st	Z, r1
     8aa:	ec 85       	ldd	r30, Y+12	; 0x0c
     8ac:	fd 85       	ldd	r31, Y+13	; 0x0d
     8ae:	10 82       	st	Z, r1
     8b0:	ec 85       	ldd	r30, Y+12	; 0x0c
     8b2:	fd 85       	ldd	r31, Y+13	; 0x0d
     8b4:	11 82       	std	Z+1, r1	; 0x01
     8b6:	1b 8e       	std	Y+27, r1	; 0x1b
     8b8:	19 86       	std	Y+9, r1	; 0x09
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <_ZN17InstrumentTriggerD1Ev>:
}

// default destructor
InstrumentTrigger::~InstrumentTrigger()
     8c0:	0e 94 19 03 	call	0x632	; 0x632 <_ZN18ShiftRegister_SIPOD1Ev>
     8c4:	08 95       	ret

000008c6 <_ZN11PrintOutputC1ER5TimerR9Sequencer>:
			return;
		}

		this->ShiftRegister_SIPO::shiftByte();
	}
}
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	ec 01       	movw	r28, r24
     8d4:	7b 01       	movw	r14, r22
     8d6:	8a 01       	movw	r16, r20
     8d8:	68 e0       	ldi	r22, 0x08	; 8
     8da:	0e 94 ab 02 	call	0x556	; 0x556 <_ZN18ShiftRegister_SIPOC1Eh>
     8de:	f9 82       	std	Y+1, r15	; 0x01
     8e0:	e8 82       	st	Y, r14
     8e2:	1e 8b       	std	Y+22, r17	; 0x16
     8e4:	0d 8b       	std	Y+21, r16	; 0x15
     8e6:	f8 01       	movw	r30, r16
     8e8:	e0 53       	subi	r30, 0x30	; 48
     8ea:	ff 4f       	sbci	r31, 0xFF	; 255
     8ec:	01 90       	ld	r0, Z+
     8ee:	f0 81       	ld	r31, Z
     8f0:	e0 2d       	mov	r30, r0
     8f2:	82 81       	ldd	r24, Z+2	; 0x02
     8f4:	93 81       	ldd	r25, Z+3	; 0x03
     8f6:	98 8f       	std	Y+24, r25	; 0x18
     8f8:	8f 8b       	std	Y+23, r24	; 0x17
     8fa:	85 e0       	ldi	r24, 0x05	; 5
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     902:	8c 01       	movw	r16, r24
     904:	63 e0       	ldi	r22, 0x03	; 3
     906:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN8SevenSegC1Eh>
     90a:	1a 8f       	std	Y+26, r17	; 0x1a
     90c:	09 8f       	std	Y+25, r16	; 0x19
     90e:	85 e0       	ldi	r24, 0x05	; 5
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     916:	8c 01       	movw	r16, r24
     918:	63 e0       	ldi	r22, 0x03	; 3
     91a:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN8SevenSegC1Eh>
     91e:	1c 8f       	std	Y+28, r17	; 0x1c
     920:	0b 8f       	std	Y+27, r16	; 0x1b
     922:	85 e0       	ldi	r24, 0x05	; 5
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     92a:	8c 01       	movw	r16, r24
     92c:	63 e0       	ldi	r22, 0x03	; 3
     92e:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN8SevenSegC1Eh>
     932:	1e 8f       	std	Y+30, r17	; 0x1e
     934:	0d 8f       	std	Y+29, r16	; 0x1d
     936:	87 e0       	ldi	r24, 0x07	; 7
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     93e:	8c 01       	movw	r16, r24
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	45 e2       	ldi	r20, 0x25	; 37
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	62 e0       	ldi	r22, 0x02	; 2
     948:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN3PinC1EhPVhh>
     94c:	1b 83       	std	Y+3, r17	; 0x03
     94e:	0a 83       	std	Y+2, r16	; 0x02
     950:	87 e0       	ldi	r24, 0x07	; 7
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     958:	8c 01       	movw	r16, r24
     95a:	21 e0       	ldi	r18, 0x01	; 1
     95c:	45 e2       	ldi	r20, 0x25	; 37
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN3PinC1EhPVhh>
     966:	1d 83       	std	Y+5, r17	; 0x05
     968:	0c 83       	std	Y+4, r16	; 0x04
     96a:	87 e0       	ldi	r24, 0x07	; 7
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 21 02 	call	0x442	; 0x442 <_Znwj>
     972:	8c 01       	movw	r16, r24
     974:	21 e0       	ldi	r18, 0x01	; 1
     976:	45 e2       	ldi	r20, 0x25	; 37
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN3PinC1EhPVhh>
     980:	1f 83       	std	Y+7, r17	; 0x07
     982:	0e 83       	std	Y+6, r16	; 0x06
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	89 87       	std	Y+9, r24	; 0x09
     988:	8a 87       	std	Y+10, r24	; 0x0a
     98a:	8b 87       	std	Y+11, r24	; 0x0b
     98c:	19 8a       	std	Y+17, r1	; 0x11
     98e:	1a 8a       	std	Y+18, r1	; 0x12
     990:	1b 8a       	std	Y+19, r1	; 0x13
     992:	1c 8a       	std	Y+20, r1	; 0x14
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	08 95       	ret

000009a2 <_ZN11PrintOutput3runEv>:
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
     9a8:	49 89       	ldd	r20, Y+17	; 0x11
     9aa:	5a 89       	ldd	r21, Y+18	; 0x12
     9ac:	6b 89       	ldd	r22, Y+19	; 0x13
     9ae:	7c 89       	ldd	r23, Y+20	; 0x14
     9b0:	88 81       	ld	r24, Y
     9b2:	99 81       	ldd	r25, Y+1	; 0x01
     9b4:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Timer14elapsed_millisEm>
     9b8:	68 3e       	cpi	r22, 0xE8	; 232
     9ba:	73 40       	sbci	r23, 0x03	; 3
     9bc:	81 05       	cpc	r24, r1
     9be:	91 05       	cpc	r25, r1
     9c0:	10 f0       	brcs	.+4      	; 0x9c6 <_ZN11PrintOutput3runEv+0x24>
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	8a 87       	std	Y+10, r24	; 0x0a
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <_ZN11PrintOutputD1Ev>:
	//Start shifting in bytes
	ShiftRegister_SIPO::newContentToPrint = true;
}

// default destructor
PrintOutput::~PrintOutput()
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
{
	delete bpmDisplay;
     9d6:	09 8d       	ldd	r16, Y+25	; 0x19
     9d8:	1a 8d       	ldd	r17, Y+26	; 0x1a
     9da:	01 15       	cp	r16, r1
     9dc:	11 05       	cpc	r17, r1
     9de:	31 f0       	breq	.+12     	; 0x9ec <_ZN11PrintOutputD1Ev+0x20>
     9e0:	c8 01       	movw	r24, r16
     9e2:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN8SevenSegD1Ev>
     9e6:	c8 01       	movw	r24, r16
     9e8:	0e 94 24 02 	call	0x448	; 0x448 <_ZdlPv>
	delete counterDisplay;
     9ec:	0b 8d       	ldd	r16, Y+27	; 0x1b
     9ee:	1c 8d       	ldd	r17, Y+28	; 0x1c
     9f0:	01 15       	cp	r16, r1
     9f2:	11 05       	cpc	r17, r1
     9f4:	31 f0       	breq	.+12     	; 0xa02 <_ZN11PrintOutputD1Ev+0x36>
     9f6:	c8 01       	movw	r24, r16
     9f8:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN8SevenSegD1Ev>
     9fc:	c8 01       	movw	r24, r16
     9fe:	0e 94 24 02 	call	0x448	; 0x448 <_ZdlPv>
	delete loopBackDisplay;
     a02:	0d 8d       	ldd	r16, Y+29	; 0x1d
     a04:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a06:	01 15       	cp	r16, r1
     a08:	11 05       	cpc	r17, r1
     a0a:	31 f0       	breq	.+12     	; 0xa18 <_ZN11PrintOutputD1Ev+0x4c>
     a0c:	c8 01       	movw	r24, r16
     a0e:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN8SevenSegD1Ev>
     a12:	c8 01       	movw	r24, r16
     a14:	0e 94 24 02 	call	0x448	; 0x448 <_ZdlPv>
	delete shiftPin;
     a18:	0a 81       	ldd	r16, Y+2	; 0x02
     a1a:	1b 81       	ldd	r17, Y+3	; 0x03
     a1c:	01 15       	cp	r16, r1
     a1e:	11 05       	cpc	r17, r1
     a20:	31 f0       	breq	.+12     	; 0xa2e <_ZN11PrintOutputD1Ev+0x62>
     a22:	c8 01       	movw	r24, r16
     a24:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN3PinD1Ev>
     a28:	c8 01       	movw	r24, r16
     a2a:	0e 94 24 02 	call	0x448	; 0x448 <_ZdlPv>
	delete latchPin;
     a2e:	0c 81       	ldd	r16, Y+4	; 0x04
     a30:	1d 81       	ldd	r17, Y+5	; 0x05
     a32:	01 15       	cp	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <_ZN11PrintOutputD1Ev+0x78>
     a38:	c8 01       	movw	r24, r16
     a3a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN3PinD1Ev>
     a3e:	c8 01       	movw	r24, r16
     a40:	0e 94 24 02 	call	0x448	; 0x448 <_ZdlPv>
	delete serialPin;
     a44:	0e 81       	ldd	r16, Y+6	; 0x06
     a46:	1f 81       	ldd	r17, Y+7	; 0x07
     a48:	01 15       	cp	r16, r1
     a4a:	11 05       	cpc	r17, r1
     a4c:	31 f0       	breq	.+12     	; 0xa5a <_ZN11PrintOutputD1Ev+0x8e>
     a4e:	c8 01       	movw	r24, r16
     a50:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN3PinD1Ev>
     a54:	c8 01       	movw	r24, r16
     a56:	0e 94 24 02 	call	0x448	; 0x448 <_ZdlPv>
	//Start shifting in bytes
	ShiftRegister_SIPO::newContentToPrint = true;
}

// default destructor
PrintOutput::~PrintOutput()
     a5a:	ce 01       	movw	r24, r28
     a5c:	0e 94 19 03 	call	0x632	; 0x632 <_ZN18ShiftRegister_SIPOD1Ev>
	delete counterDisplay;
	delete loopBackDisplay;
	delete shiftPin;
	delete latchPin;
	delete serialPin;
} //~PrintOutput
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	08 95       	ret

00000a6a <_ZN13RotaryEncoderC1ER5TimerR12DigitalInput>:
					}
				}
			}
		}
	}
}
     a6a:	fc 01       	movw	r30, r24
     a6c:	71 87       	std	Z+9, r23	; 0x09
     a6e:	60 87       	std	Z+8, r22	; 0x08
     a70:	53 87       	std	Z+11, r21	; 0x0b
     a72:	42 87       	std	Z+10, r20	; 0x0a
     a74:	14 82       	std	Z+4, r1	; 0x04
     a76:	16 82       	std	Z+6, r1	; 0x06
     a78:	15 82       	std	Z+5, r1	; 0x05
     a7a:	17 82       	std	Z+7, r1	; 0x07
     a7c:	10 82       	st	Z, r1
     a7e:	14 86       	std	Z+12, r1	; 0x0c
     a80:	15 86       	std	Z+13, r1	; 0x0d
     a82:	16 86       	std	Z+14, r1	; 0x0e
     a84:	17 86       	std	Z+15, r1	; 0x0f
     a86:	11 82       	std	Z+1, r1	; 0x01
     a88:	08 95       	ret

00000a8a <_ZN13RotaryEncoderD1Ev>:

// default destructor
RotaryEncoder::~RotaryEncoder()
     a8a:	08 95       	ret

00000a8c <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder>:
{
	
}

void Sequencer::checkMeasureSelect( void )
{
     a8c:	fc 01       	movw	r30, r24
     a8e:	e2 53       	subi	r30, 0x32	; 50
     a90:	ff 4f       	sbci	r31, 0xFF	; 255
     a92:	51 83       	std	Z+1, r21	; 0x01
     a94:	40 83       	st	Z, r20
     a96:	32 96       	adiw	r30, 0x02	; 2
     a98:	31 83       	std	Z+1, r19	; 0x01
     a9a:	20 83       	st	Z, r18
     a9c:	fa 01       	movw	r30, r20
     a9e:	21 89       	ldd	r18, Z+17	; 0x11
     aa0:	32 89       	ldd	r19, Z+18	; 0x12
     aa2:	fc 01       	movw	r30, r24
     aa4:	e8 52       	subi	r30, 0x28	; 40
     aa6:	ff 4f       	sbci	r31, 0xFF	; 255
     aa8:	31 83       	std	Z+1, r19	; 0x01
     aaa:	20 83       	st	Z, r18
     aac:	3c 97       	sbiw	r30, 0x0c	; 12
     aae:	71 83       	std	Z+1, r23	; 0x01
     ab0:	60 83       	st	Z, r22
     ab2:	fc 01       	movw	r30, r24
     ab4:	ac 01       	movw	r20, r24
     ab6:	40 54       	subi	r20, 0x40	; 64
     ab8:	5f 4f       	sbci	r21, 0xFF	; 255
     aba:	09 c0       	rjmp	.+18     	; 0xace <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder+0x42>
     abc:	11 92       	st	Z+, r1
     abe:	11 92       	st	Z+, r1
     ac0:	e2 17       	cp	r30, r18
     ac2:	f3 07       	cpc	r31, r19
     ac4:	d9 f7       	brne	.-10     	; 0xabc <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder+0x30>
     ac6:	f9 01       	movw	r30, r18
     ac8:	42 17       	cp	r20, r18
     aca:	53 07       	cpc	r21, r19
     acc:	21 f0       	breq	.+8      	; 0xad6 <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder+0x4a>
     ace:	9f 01       	movw	r18, r30
     ad0:	20 5e       	subi	r18, 0xE0	; 224
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	f3 cf       	rjmp	.-26     	; 0xabc <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder+0x30>
     ad6:	fc 01       	movw	r30, r24
     ad8:	e0 54       	subi	r30, 0x40	; 64
     ada:	ff 4f       	sbci	r31, 0xFF	; 255
     adc:	10 82       	st	Z, r1
     ade:	31 96       	adiw	r30, 0x01	; 1
     ae0:	10 82       	st	Z, r1
     ae2:	7b 96       	adiw	r30, 0x1b	; 27
     ae4:	10 82       	st	Z, r1
     ae6:	7a 97       	sbiw	r30, 0x1a	; 26
     ae8:	2f e0       	ldi	r18, 0x0F	; 15
     aea:	20 83       	st	Z, r18
     aec:	39 96       	adiw	r30, 0x09	; 9
     aee:	10 82       	st	Z, r1
     af0:	38 97       	sbiw	r30, 0x08	; 8
     af2:	10 82       	st	Z, r1
     af4:	11 82       	std	Z+1, r1	; 0x01
     af6:	12 82       	std	Z+2, r1	; 0x02
     af8:	13 82       	std	Z+3, r1	; 0x03
     afa:	34 96       	adiw	r30, 0x04	; 4
     afc:	10 82       	st	Z, r1
     afe:	11 82       	std	Z+1, r1	; 0x01
     b00:	12 82       	std	Z+2, r1	; 0x02
     b02:	13 82       	std	Z+3, r1	; 0x03
     b04:	08 95       	ret

00000b06 <_ZN9Sequencer10updateLEDsEv>:

}

void Sequencer::updateLEDs( void )
{
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	ec 01       	movw	r28, r24
	if( timer->elapsed_millis(timeStamp_updateLEDs) >= UPDATE_LEDS_PERIOD ){
     b10:	fc 01       	movw	r30, r24
     b12:	e9 53       	subi	r30, 0x39	; 57
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	40 81       	ld	r20, Z
     b18:	51 81       	ldd	r21, Z+1	; 0x01
     b1a:	62 81       	ldd	r22, Z+2	; 0x02
     b1c:	73 81       	ldd	r23, Z+3	; 0x03
     b1e:	35 96       	adiw	r30, 0x05	; 5
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Timer14elapsed_millisEm>
     b28:	6c 3d       	cpi	r22, 0xDC	; 220
     b2a:	75 40       	sbci	r23, 0x05	; 5
     b2c:	81 05       	cpc	r24, r1
     b2e:	91 05       	cpc	r25, r1
     b30:	40 f1       	brcs	.+80     	; 0xb82 <_ZN9Sequencer10updateLEDsEv+0x7c>
		
		timeStamp_updateLEDs = timer->millis();
     b32:	fe 01       	movw	r30, r28
     b34:	e4 53       	subi	r30, 0x34	; 52
     b36:	ff 4f       	sbci	r31, 0xFF	; 255
     b38:	80 81       	ld	r24, Z
     b3a:	91 81       	ldd	r25, Z+1	; 0x01
     b3c:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZN5Timer6millisEv>
     b40:	fe 01       	movw	r30, r28
     b42:	e9 53       	subi	r30, 0x39	; 57
     b44:	ff 4f       	sbci	r31, 0xFF	; 255
     b46:	60 83       	st	Z, r22
     b48:	71 83       	std	Z+1, r23	; 0x01
     b4a:	82 83       	std	Z+2, r24	; 0x02
     b4c:	93 83       	std	Z+3, r25	; 0x03
		
		leds->loadMeasure( (uint16_t **) programedValues , measure, SIZE_OF_MEASURE );
     b4e:	36 97       	sbiw	r30, 0x06	; 6
     b50:	8e 01       	movw	r16, r28
     b52:	06 52       	subi	r16, 0x26	; 38
     b54:	1f 4f       	sbci	r17, 0xFF	; 255
     b56:	20 e1       	ldi	r18, 0x10	; 16
     b58:	40 81       	ld	r20, Z
     b5a:	be 01       	movw	r22, r28
     b5c:	f8 01       	movw	r30, r16
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	0e 94 68 00 	call	0xd0	; 0xd0 <_ZN4LEDs11loadMeasureEPPjhh>
		leds->setInstrument( instrumentBeingProgrammed );
     b66:	c0 54       	subi	r28, 0x40	; 64
     b68:	df 4f       	sbci	r29, 0xFF	; 255
     b6a:	68 81       	ld	r22, Y
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	f8 01       	movw	r30, r16
     b70:	80 81       	ld	r24, Z
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN4LEDs13setInstrumentEj>
		leds->generateBitMap();
     b78:	f8 01       	movw	r30, r16
     b7a:	80 81       	ld	r24, Z
     b7c:	91 81       	ldd	r25, Z+1	; 0x01
     b7e:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN4LEDs14generateBitMapEv>
	}
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <_ZN9Sequencer8runTimerEv>:

void Sequencer::runTimer( void )
{
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	ec 01       	movw	r28, r24

	if( timer->elapsed_millis( timeStamp_Timer ) >= PULSE_PERIOD_DBG )
     b92:	fc 01       	movw	r30, r24
     b94:	ed 53       	subi	r30, 0x3D	; 61
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	62 81       	ldd	r22, Z+2	; 0x02
     b9e:	73 81       	ldd	r23, Z+3	; 0x03
     ba0:	39 96       	adiw	r30, 0x09	; 9
     ba2:	80 81       	ld	r24, Z
     ba4:	91 81       	ldd	r25, Z+1	; 0x01
     ba6:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Timer14elapsed_millisEm>
     baa:	68 38       	cpi	r22, 0x88	; 136
     bac:	73 41       	sbci	r23, 0x13	; 19
     bae:	81 05       	cpc	r24, r1
     bb0:	91 05       	cpc	r25, r1
     bb2:	e0 f0       	brcs	.+56     	; 0xbec <_ZN9Sequencer8runTimerEv+0x60>
	{
		//Refresh time stamp.
		timeStamp_Timer = timer->millis();
     bb4:	fe 01       	movw	r30, r28
     bb6:	e4 53       	subi	r30, 0x34	; 52
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZN5Timer6millisEv>
     bc2:	fe 01       	movw	r30, r28
     bc4:	ed 53       	subi	r30, 0x3D	; 61
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	60 83       	st	Z, r22
     bca:	71 83       	std	Z+1, r23	; 0x01
     bcc:	82 83       	std	Z+2, r24	; 0x02
     bce:	93 83       	std	Z+3, r25	; 0x03

		//increment position in time
		this->positionInTime = this->positionInTime + 1;
     bd0:	79 96       	adiw	r30, 0x19	; 25
     bd2:	80 81       	ld	r24, Z
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	80 83       	st	Z, r24

		//if it's higher than loopback then reset.
		if ( this->positionInTime > loopBackLength ){
     bd8:	7a 97       	sbiw	r30, 0x1a	; 26
     bda:	90 81       	ld	r25, Z
     bdc:	98 17       	cp	r25, r24
     bde:	10 f4       	brcc	.+4      	; 0xbe4 <_ZN9Sequencer8runTimerEv+0x58>
			this->positionInTime = 0;
     be0:	7a 96       	adiw	r30, 0x1a	; 26
     be2:	10 82       	st	Z, r1
		}

		triggerInstruments = true;
     be4:	c5 53       	subi	r28, 0x35	; 53
     be6:	df 4f       	sbci	r29, 0xFF	; 255
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	88 83       	st	Y, r24
	}

}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <_ZN9Sequencer12loadSequenceEPjh>:

void Sequencer::loadSequence(uint16_t * sequence, uint8_t size )
{
	for( uint8_t i=0; i < size ; i++ ){
     bf2:	44 23       	and	r20, r20
     bf4:	a9 f0       	breq	.+42     	; 0xc20 <_ZN9Sequencer12loadSequenceEPjh+0x2e>
     bf6:	a6 2f       	mov	r26, r22
     bf8:	b7 2f       	mov	r27, r23
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t effectiveMeasure = (i >> 4);

		programedValues[effectiveMeasure][i] = sequence[i];
     bfe:	6d 91       	ld	r22, X+
     c00:	7d 91       	ld	r23, X+
     c02:	f9 01       	movw	r30, r18
     c04:	e0 7f       	andi	r30, 0xF0	; 240
     c06:	ff 70       	andi	r31, 0x0F	; 15
     c08:	e2 0f       	add	r30, r18
     c0a:	f3 1f       	adc	r31, r19
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	e8 0f       	add	r30, r24
     c12:	f9 1f       	adc	r31, r25
     c14:	71 83       	std	Z+1, r23	; 0x01
     c16:	60 83       	st	Z, r22
     c18:	2f 5f       	subi	r18, 0xFF	; 255
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255

}

void Sequencer::loadSequence(uint16_t * sequence, uint8_t size )
{
	for( uint8_t i=0; i < size ; i++ ){
     c1c:	24 17       	cp	r18, r20
     c1e:	78 f3       	brcs	.-34     	; 0xbfe <_ZN9Sequencer12loadSequenceEPjh+0xc>
     c20:	08 95       	ret

00000c22 <_ZN9Sequencer30loadInstrumentTriggerReferenceER17InstrumentTrigger>:
	}
}

void Sequencer::loadInstrumentTriggerReference( InstrumentTrigger & instrumentTriggerRef )
{
	instrumentTrigger = &instrumentTriggerRef;
     c22:	fc 01       	movw	r30, r24
     c24:	ee 52       	subi	r30, 0x2E	; 46
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	71 83       	std	Z+1, r23	; 0x01
     c2a:	60 83       	st	Z, r22
     c2c:	08 95       	ret

00000c2e <_ZN9Sequencer17getPositionInTimeEv>:
}

uint8_t Sequencer::getPositionInTime( void )
{
	return positionInTime;
     c2e:	fc 01       	movw	r30, r24
     c30:	e4 52       	subi	r30, 0x24	; 36
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
}
     c34:	80 81       	ld	r24, Z
     c36:	08 95       	ret

00000c38 <_ZN9SequencerD1Ev>:

// default destructor
Sequencer::~Sequencer()
     c38:	08 95       	ret

00000c3a <_ZN11TaskManagerC1ER5Timer>:


#include "TaskManager.h"

// default constructor
TaskManager::TaskManager( Timer & timerPtr )
     c3a:	fc 01       	movw	r30, r24
{
	
	timer = &timerPtr;
     c3c:	77 8f       	std	Z+31, r23	; 0x1f
     c3e:	66 8f       	std	Z+30, r22	; 0x1e
	
	//At initialization there should be zero loaded tasks. 
	loadedTasks = 0;
     c40:	10 a2       	std	Z+32, r1	; 0x20
	
	//Should be initialized to a prime number
	randNum = RANDOM_GEN_SEED;
     c42:	8b e0       	ldi	r24, 0x0B	; 11
     c44:	81 a3       	std	Z+33, r24	; 0x21
     c46:	08 95       	ret

00000c48 <_ZN11TaskManager7addTaskEPFvvEh>:

//Add a task to the task list.
//Priority; Range between 0-250. Closer to 0, the more likely task will run. 0 is realtime
void TaskManager::addTask( void (*task) (void), uint8_t priority ){
	
	tasks[ loadedTasks ] = task;
     c48:	fc 01       	movw	r30, r24
     c4a:	20 a1       	ldd	r18, Z+32	; 0x20
     c4c:	a2 2f       	mov	r26, r18
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	fd 01       	movw	r30, r26
     c52:	35 96       	adiw	r30, 0x05	; 5
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	e8 0f       	add	r30, r24
     c5a:	f9 1f       	adc	r31, r25
     c5c:	71 83       	std	Z+1, r23	; 0x01
     c5e:	60 83       	st	Z, r22
	
	taskPriority[ loadedTasks ] = priority;
     c60:	a8 0f       	add	r26, r24
     c62:	b9 1f       	adc	r27, r25
     c64:	4c 93       	st	X, r20
	
	loadedTasks++;
     c66:	2f 5f       	subi	r18, 0xFF	; 255
     c68:	fc 01       	movw	r30, r24
     c6a:	20 a3       	std	Z+32, r18	; 0x20
     c6c:	08 95       	ret

00000c6e <_ZN11TaskManager20generateRandomNumberEv>:
	}
	
}

void TaskManager::generateRandomNumber( void )
{
     c6e:	fc 01       	movw	r30, r24
	randNum = (randNum*109+89)%251;
     c70:	21 a1       	ldd	r18, Z+33	; 0x21
     c72:	8d e6       	ldi	r24, 0x6D	; 109
     c74:	28 9f       	mul	r18, r24
     c76:	90 01       	movw	r18, r0
     c78:	11 24       	eor	r1, r1
     c7a:	c9 01       	movw	r24, r18
     c7c:	87 5a       	subi	r24, 0xA7	; 167
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	6b ef       	ldi	r22, 0xFB	; 251
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__divmodhi4>
     c88:	81 a3       	std	Z+33, r24	; 0x21
     c8a:	08 95       	ret

00000c8c <_ZN11TaskManager8runTasksEv>:
	
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
	for( int i=0; i < loadedTasks ; i++){
     c9c:	dc 01       	movw	r26, r24
     c9e:	90 96       	adiw	r26, 0x20	; 32
     ca0:	2c 91       	ld	r18, X
     ca2:	22 23       	and	r18, r18
     ca4:	f9 f0       	breq	.+62     	; 0xce4 <_ZN11TaskManager8runTasksEv+0x58>
     ca6:	ec 01       	movw	r28, r24
     ca8:	6c 01       	movw	r12, r24
     caa:	7c 01       	movw	r14, r24
     cac:	ba e0       	ldi	r27, 0x0A	; 10
     cae:	eb 0e       	add	r14, r27
     cb0:	f1 1c       	adc	r15, r1
     cb2:	00 e0       	ldi	r16, 0x00	; 0
     cb4:	10 e0       	ldi	r17, 0x00	; 0
		
		//Generate random number for seeing if task should run
		this->generateRandomNumber();
     cb6:	ce 01       	movw	r24, r28
     cb8:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN11TaskManager20generateRandomNumberEv>
		if( taskPriority[i] <= randNum ){
     cbc:	f6 01       	movw	r30, r12
     cbe:	91 91       	ld	r25, Z+
     cc0:	6f 01       	movw	r12, r30
     cc2:	89 a1       	ldd	r24, Y+33	; 0x21
     cc4:	89 17       	cp	r24, r25
     cc6:	20 f0       	brcs	.+8      	; 0xcd0 <_ZN11TaskManager8runTasksEv+0x44>
			
			//Run the task
			(*tasks[i]) (); 
     cc8:	d7 01       	movw	r26, r14
     cca:	ed 91       	ld	r30, X+
     ccc:	fc 91       	ld	r31, X
     cce:	09 95       	icall
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
	for( int i=0; i < loadedTasks ; i++){
     cd0:	0f 5f       	subi	r16, 0xFF	; 255
     cd2:	1f 4f       	sbci	r17, 0xFF	; 255
     cd4:	b2 e0       	ldi	r27, 0x02	; 2
     cd6:	eb 0e       	add	r14, r27
     cd8:	f1 1c       	adc	r15, r1
     cda:	28 a1       	ldd	r18, Y+32	; 0x20
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	02 17       	cp	r16, r18
     ce0:	13 07       	cpc	r17, r19
     ce2:	4c f3       	brlt	.-46     	; 0xcb6 <_ZN11TaskManager8runTasksEv+0x2a>
			(*tasks[i]) (); 
		}
		
	}
	
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	08 95       	ret

00000cf6 <_ZN5TimerC1Ev>:
	fixedTime = this->millis();
}

void Timer::resumeTimer( void )
{
	step = fixedTime;
     cf6:	fc 01       	movw	r30, r24
     cf8:	10 82       	st	Z, r1
     cfa:	11 82       	std	Z+1, r1	; 0x01
     cfc:	12 82       	std	Z+2, r1	; 0x02
     cfe:	13 82       	std	Z+3, r1	; 0x03
     d00:	14 82       	std	Z+4, r1	; 0x04
     d02:	15 82       	std	Z+5, r1	; 0x05
     d04:	16 82       	std	Z+6, r1	; 0x06
     d06:	17 82       	std	Z+7, r1	; 0x07
     d08:	08 95       	ret

00000d0a <_ZN5Timer14incrementTimerEv>:
     d0a:	fc 01       	movw	r30, r24
     d0c:	40 81       	ld	r20, Z
     d0e:	51 81       	ldd	r21, Z+1	; 0x01
     d10:	62 81       	ldd	r22, Z+2	; 0x02
     d12:	73 81       	ldd	r23, Z+3	; 0x03
     d14:	4f 5f       	subi	r20, 0xFF	; 255
     d16:	5f 4f       	sbci	r21, 0xFF	; 255
     d18:	6f 4f       	sbci	r22, 0xFF	; 255
     d1a:	7f 4f       	sbci	r23, 0xFF	; 255
     d1c:	40 83       	st	Z, r20
     d1e:	51 83       	std	Z+1, r21	; 0x01
     d20:	62 83       	std	Z+2, r22	; 0x02
     d22:	73 83       	std	Z+3, r23	; 0x03
     d24:	08 95       	ret

00000d26 <_ZN5Timer5resetEv>:
     d26:	fc 01       	movw	r30, r24
     d28:	10 82       	st	Z, r1
     d2a:	11 82       	std	Z+1, r1	; 0x01
     d2c:	12 82       	std	Z+2, r1	; 0x02
     d2e:	13 82       	std	Z+3, r1	; 0x03
     d30:	08 95       	ret

00000d32 <_ZN5Timer14elapsed_millisEm>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
	return (step - comparison);	
     d36:	fc 01       	movw	r30, r24
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	a2 81       	ldd	r26, Z+2	; 0x02
     d3e:	b3 81       	ldd	r27, Z+3	; 0x03
     d40:	8c 01       	movw	r16, r24
     d42:	9d 01       	movw	r18, r26
     d44:	04 1b       	sub	r16, r20
     d46:	15 0b       	sbc	r17, r21
     d48:	26 0b       	sbc	r18, r22
     d4a:	37 0b       	sbc	r19, r23
     d4c:	c9 01       	movw	r24, r18
     d4e:	b8 01       	movw	r22, r16
}
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return step;
     d56:	fc 01       	movw	r30, r24
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
}
     d60:	08 95       	ret

00000d62 <_ZN5Timer8wait_1usEv>:
	//Variable to find the difference between a current value
	//of a timer and a previous value
	uint8_t difference = 0;
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
     d62:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
		difference = TCNT2 - timerValue;
     d66:	e2 eb       	ldi	r30, 0xB2	; 178
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	89 1b       	sub	r24, r25
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
     d6e:	80 31       	cpi	r24, 0x10	; 16
     d70:	e0 f3       	brcs	.-8      	; 0xd6a <_ZN5Timer8wait_1usEv+0x8>
		difference = TCNT2 - timerValue;
	}
}
     d72:	08 95       	ret

00000d74 <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
     d74:	08 95       	ret

00000d76 <__udivmodhi4>:
     d76:	aa 1b       	sub	r26, r26
     d78:	bb 1b       	sub	r27, r27
     d7a:	51 e1       	ldi	r21, 0x11	; 17
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <__udivmodhi4_ep>

00000d7e <__udivmodhi4_loop>:
     d7e:	aa 1f       	adc	r26, r26
     d80:	bb 1f       	adc	r27, r27
     d82:	a6 17       	cp	r26, r22
     d84:	b7 07       	cpc	r27, r23
     d86:	10 f0       	brcs	.+4      	; 0xd8c <__udivmodhi4_ep>
     d88:	a6 1b       	sub	r26, r22
     d8a:	b7 0b       	sbc	r27, r23

00000d8c <__udivmodhi4_ep>:
     d8c:	88 1f       	adc	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	5a 95       	dec	r21
     d92:	a9 f7       	brne	.-22     	; 0xd7e <__udivmodhi4_loop>
     d94:	80 95       	com	r24
     d96:	90 95       	com	r25
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	08 95       	ret

00000d9e <__divmodhi4>:
     d9e:	97 fb       	bst	r25, 7
     da0:	07 2e       	mov	r0, r23
     da2:	16 f4       	brtc	.+4      	; 0xda8 <__divmodhi4+0xa>
     da4:	00 94       	com	r0
     da6:	07 d0       	rcall	.+14     	; 0xdb6 <__divmodhi4_neg1>
     da8:	77 fd       	sbrc	r23, 7
     daa:	09 d0       	rcall	.+18     	; 0xdbe <__divmodhi4_neg2>
     dac:	0e 94 bb 06 	call	0xd76	; 0xd76 <__udivmodhi4>
     db0:	07 fc       	sbrc	r0, 7
     db2:	05 d0       	rcall	.+10     	; 0xdbe <__divmodhi4_neg2>
     db4:	3e f4       	brtc	.+14     	; 0xdc4 <__divmodhi4_exit>

00000db6 <__divmodhi4_neg1>:
     db6:	90 95       	com	r25
     db8:	81 95       	neg	r24
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	08 95       	ret

00000dbe <__divmodhi4_neg2>:
     dbe:	70 95       	com	r23
     dc0:	61 95       	neg	r22
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255

00000dc4 <__divmodhi4_exit>:
     dc4:	08 95       	ret

00000dc6 <__tablejump2__>:
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	05 90       	lpm	r0, Z+
     dcc:	f4 91       	lpm	r31, Z
     dce:	e0 2d       	mov	r30, r0
     dd0:	09 94       	ijmp

00000dd2 <malloc>:
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	91 05       	cpc	r25, r1
     dda:	10 f4       	brcc	.+4      	; 0xde0 <malloc+0xe>
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <__flp>
     de4:	f0 91 80 02 	lds	r31, 0x0280	; 0x800280 <__flp+0x1>
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	c0 e0       	ldi	r28, 0x00	; 0
     dee:	d0 e0       	ldi	r29, 0x00	; 0
     df0:	30 97       	sbiw	r30, 0x00	; 0
     df2:	11 f1       	breq	.+68     	; 0xe38 <malloc+0x66>
     df4:	40 81       	ld	r20, Z
     df6:	51 81       	ldd	r21, Z+1	; 0x01
     df8:	48 17       	cp	r20, r24
     dfa:	59 07       	cpc	r21, r25
     dfc:	c0 f0       	brcs	.+48     	; 0xe2e <malloc+0x5c>
     dfe:	48 17       	cp	r20, r24
     e00:	59 07       	cpc	r21, r25
     e02:	61 f4       	brne	.+24     	; 0xe1c <malloc+0x4a>
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	20 97       	sbiw	r28, 0x00	; 0
     e0a:	19 f0       	breq	.+6      	; 0xe12 <malloc+0x40>
     e0c:	9b 83       	std	Y+3, r25	; 0x03
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	2b c0       	rjmp	.+86     	; 0xe68 <malloc+0x96>
     e12:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <__flp+0x1>
     e16:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <__flp>
     e1a:	26 c0       	rjmp	.+76     	; 0xe68 <malloc+0x96>
     e1c:	21 15       	cp	r18, r1
     e1e:	31 05       	cpc	r19, r1
     e20:	19 f0       	breq	.+6      	; 0xe28 <malloc+0x56>
     e22:	42 17       	cp	r20, r18
     e24:	53 07       	cpc	r21, r19
     e26:	18 f4       	brcc	.+6      	; 0xe2e <malloc+0x5c>
     e28:	9a 01       	movw	r18, r20
     e2a:	be 01       	movw	r22, r28
     e2c:	df 01       	movw	r26, r30
     e2e:	ef 01       	movw	r28, r30
     e30:	02 80       	ldd	r0, Z+2	; 0x02
     e32:	f3 81       	ldd	r31, Z+3	; 0x03
     e34:	e0 2d       	mov	r30, r0
     e36:	dc cf       	rjmp	.-72     	; 0xdf0 <malloc+0x1e>
     e38:	21 15       	cp	r18, r1
     e3a:	31 05       	cpc	r19, r1
     e3c:	09 f1       	breq	.+66     	; 0xe80 <malloc+0xae>
     e3e:	28 1b       	sub	r18, r24
     e40:	39 0b       	sbc	r19, r25
     e42:	24 30       	cpi	r18, 0x04	; 4
     e44:	31 05       	cpc	r19, r1
     e46:	90 f4       	brcc	.+36     	; 0xe6c <malloc+0x9a>
     e48:	12 96       	adiw	r26, 0x02	; 2
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	13 97       	sbiw	r26, 0x03	; 3
     e50:	61 15       	cp	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	21 f0       	breq	.+8      	; 0xe5e <malloc+0x8c>
     e56:	fb 01       	movw	r30, r22
     e58:	93 83       	std	Z+3, r25	; 0x03
     e5a:	82 83       	std	Z+2, r24	; 0x02
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <malloc+0x94>
     e5e:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <__flp+0x1>
     e62:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <__flp>
     e66:	fd 01       	movw	r30, r26
     e68:	32 96       	adiw	r30, 0x02	; 2
     e6a:	44 c0       	rjmp	.+136    	; 0xef4 <malloc+0x122>
     e6c:	fd 01       	movw	r30, r26
     e6e:	e2 0f       	add	r30, r18
     e70:	f3 1f       	adc	r31, r19
     e72:	81 93       	st	Z+, r24
     e74:	91 93       	st	Z+, r25
     e76:	22 50       	subi	r18, 0x02	; 2
     e78:	31 09       	sbc	r19, r1
     e7a:	2d 93       	st	X+, r18
     e7c:	3c 93       	st	X, r19
     e7e:	3a c0       	rjmp	.+116    	; 0xef4 <malloc+0x122>
     e80:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <__brkval>
     e84:	30 91 7e 02 	lds	r19, 0x027E	; 0x80027e <__brkval+0x1>
     e88:	23 2b       	or	r18, r19
     e8a:	41 f4       	brne	.+16     	; 0xe9c <malloc+0xca>
     e8c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     e90:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e94:	30 93 7e 02 	sts	0x027E, r19	; 0x80027e <__brkval+0x1>
     e98:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <__brkval>
     e9c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     ea0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     ea4:	21 15       	cp	r18, r1
     ea6:	31 05       	cpc	r19, r1
     ea8:	41 f4       	brne	.+16     	; 0xeba <malloc+0xe8>
     eaa:	2d b7       	in	r18, 0x3d	; 61
     eac:	3e b7       	in	r19, 0x3e	; 62
     eae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     eb2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     eb6:	24 1b       	sub	r18, r20
     eb8:	35 0b       	sbc	r19, r21
     eba:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <__brkval>
     ebe:	f0 91 7e 02 	lds	r31, 0x027E	; 0x80027e <__brkval+0x1>
     ec2:	e2 17       	cp	r30, r18
     ec4:	f3 07       	cpc	r31, r19
     ec6:	a0 f4       	brcc	.+40     	; 0xef0 <malloc+0x11e>
     ec8:	2e 1b       	sub	r18, r30
     eca:	3f 0b       	sbc	r19, r31
     ecc:	28 17       	cp	r18, r24
     ece:	39 07       	cpc	r19, r25
     ed0:	78 f0       	brcs	.+30     	; 0xef0 <malloc+0x11e>
     ed2:	ac 01       	movw	r20, r24
     ed4:	4e 5f       	subi	r20, 0xFE	; 254
     ed6:	5f 4f       	sbci	r21, 0xFF	; 255
     ed8:	24 17       	cp	r18, r20
     eda:	35 07       	cpc	r19, r21
     edc:	48 f0       	brcs	.+18     	; 0xef0 <malloc+0x11e>
     ede:	4e 0f       	add	r20, r30
     ee0:	5f 1f       	adc	r21, r31
     ee2:	50 93 7e 02 	sts	0x027E, r21	; 0x80027e <__brkval+0x1>
     ee6:	40 93 7d 02 	sts	0x027D, r20	; 0x80027d <__brkval>
     eea:	81 93       	st	Z+, r24
     eec:	91 93       	st	Z+, r25
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <malloc+0x122>
     ef0:	e0 e0       	ldi	r30, 0x00	; 0
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	cf 01       	movw	r24, r30
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <free>:
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	09 f4       	brne	.+2      	; 0xf0a <free+0xe>
     f08:	8c c0       	rjmp	.+280    	; 0x1022 <free+0x126>
     f0a:	fc 01       	movw	r30, r24
     f0c:	32 97       	sbiw	r30, 0x02	; 2
     f0e:	13 82       	std	Z+3, r1	; 0x03
     f10:	12 82       	std	Z+2, r1	; 0x02
     f12:	00 91 7f 02 	lds	r16, 0x027F	; 0x80027f <__flp>
     f16:	10 91 80 02 	lds	r17, 0x0280	; 0x800280 <__flp+0x1>
     f1a:	01 15       	cp	r16, r1
     f1c:	11 05       	cpc	r17, r1
     f1e:	81 f4       	brne	.+32     	; 0xf40 <free+0x44>
     f20:	20 81       	ld	r18, Z
     f22:	31 81       	ldd	r19, Z+1	; 0x01
     f24:	82 0f       	add	r24, r18
     f26:	93 1f       	adc	r25, r19
     f28:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <__brkval>
     f2c:	30 91 7e 02 	lds	r19, 0x027E	; 0x80027e <__brkval+0x1>
     f30:	28 17       	cp	r18, r24
     f32:	39 07       	cpc	r19, r25
     f34:	79 f5       	brne	.+94     	; 0xf94 <free+0x98>
     f36:	f0 93 7e 02 	sts	0x027E, r31	; 0x80027e <__brkval+0x1>
     f3a:	e0 93 7d 02 	sts	0x027D, r30	; 0x80027d <__brkval>
     f3e:	71 c0       	rjmp	.+226    	; 0x1022 <free+0x126>
     f40:	d8 01       	movw	r26, r16
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	ae 17       	cp	r26, r30
     f48:	bf 07       	cpc	r27, r31
     f4a:	50 f4       	brcc	.+20     	; 0xf60 <free+0x64>
     f4c:	12 96       	adiw	r26, 0x02	; 2
     f4e:	2d 91       	ld	r18, X+
     f50:	3c 91       	ld	r19, X
     f52:	13 97       	sbiw	r26, 0x03	; 3
     f54:	ad 01       	movw	r20, r26
     f56:	21 15       	cp	r18, r1
     f58:	31 05       	cpc	r19, r1
     f5a:	09 f1       	breq	.+66     	; 0xf9e <free+0xa2>
     f5c:	d9 01       	movw	r26, r18
     f5e:	f3 cf       	rjmp	.-26     	; 0xf46 <free+0x4a>
     f60:	9d 01       	movw	r18, r26
     f62:	da 01       	movw	r26, r20
     f64:	33 83       	std	Z+3, r19	; 0x03
     f66:	22 83       	std	Z+2, r18	; 0x02
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	86 0f       	add	r24, r22
     f6e:	97 1f       	adc	r25, r23
     f70:	82 17       	cp	r24, r18
     f72:	93 07       	cpc	r25, r19
     f74:	69 f4       	brne	.+26     	; 0xf90 <free+0x94>
     f76:	ec 01       	movw	r28, r24
     f78:	28 81       	ld	r18, Y
     f7a:	39 81       	ldd	r19, Y+1	; 0x01
     f7c:	26 0f       	add	r18, r22
     f7e:	37 1f       	adc	r19, r23
     f80:	2e 5f       	subi	r18, 0xFE	; 254
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	31 83       	std	Z+1, r19	; 0x01
     f86:	20 83       	st	Z, r18
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	9b 81       	ldd	r25, Y+3	; 0x03
     f8c:	93 83       	std	Z+3, r25	; 0x03
     f8e:	82 83       	std	Z+2, r24	; 0x02
     f90:	45 2b       	or	r20, r21
     f92:	29 f4       	brne	.+10     	; 0xf9e <free+0xa2>
     f94:	f0 93 80 02 	sts	0x0280, r31	; 0x800280 <__flp+0x1>
     f98:	e0 93 7f 02 	sts	0x027F, r30	; 0x80027f <__flp>
     f9c:	42 c0       	rjmp	.+132    	; 0x1022 <free+0x126>
     f9e:	13 96       	adiw	r26, 0x03	; 3
     fa0:	fc 93       	st	X, r31
     fa2:	ee 93       	st	-X, r30
     fa4:	12 97       	sbiw	r26, 0x02	; 2
     fa6:	ed 01       	movw	r28, r26
     fa8:	49 91       	ld	r20, Y+
     faa:	59 91       	ld	r21, Y+
     fac:	9e 01       	movw	r18, r28
     fae:	24 0f       	add	r18, r20
     fb0:	35 1f       	adc	r19, r21
     fb2:	e2 17       	cp	r30, r18
     fb4:	f3 07       	cpc	r31, r19
     fb6:	71 f4       	brne	.+28     	; 0xfd4 <free+0xd8>
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	84 0f       	add	r24, r20
     fbe:	95 1f       	adc	r25, r21
     fc0:	02 96       	adiw	r24, 0x02	; 2
     fc2:	11 96       	adiw	r26, 0x01	; 1
     fc4:	9c 93       	st	X, r25
     fc6:	8e 93       	st	-X, r24
     fc8:	82 81       	ldd	r24, Z+2	; 0x02
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	13 96       	adiw	r26, 0x03	; 3
     fce:	9c 93       	st	X, r25
     fd0:	8e 93       	st	-X, r24
     fd2:	12 97       	sbiw	r26, 0x02	; 2
     fd4:	e0 e0       	ldi	r30, 0x00	; 0
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	d8 01       	movw	r26, r16
     fda:	12 96       	adiw	r26, 0x02	; 2
     fdc:	8d 91       	ld	r24, X+
     fde:	9c 91       	ld	r25, X
     fe0:	13 97       	sbiw	r26, 0x03	; 3
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	19 f0       	breq	.+6      	; 0xfec <free+0xf0>
     fe6:	f8 01       	movw	r30, r16
     fe8:	8c 01       	movw	r16, r24
     fea:	f6 cf       	rjmp	.-20     	; 0xfd8 <free+0xdc>
     fec:	8d 91       	ld	r24, X+
     fee:	9c 91       	ld	r25, X
     ff0:	98 01       	movw	r18, r16
     ff2:	2e 5f       	subi	r18, 0xFE	; 254
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <__brkval>
     ffe:	30 91 7e 02 	lds	r19, 0x027E	; 0x80027e <__brkval+0x1>
    1002:	28 17       	cp	r18, r24
    1004:	39 07       	cpc	r19, r25
    1006:	69 f4       	brne	.+26     	; 0x1022 <free+0x126>
    1008:	30 97       	sbiw	r30, 0x00	; 0
    100a:	29 f4       	brne	.+10     	; 0x1016 <free+0x11a>
    100c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <__flp+0x1>
    1010:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <__flp>
    1014:	02 c0       	rjmp	.+4      	; 0x101a <free+0x11e>
    1016:	13 82       	std	Z+3, r1	; 0x03
    1018:	12 82       	std	Z+2, r1	; 0x02
    101a:	10 93 7e 02 	sts	0x027E, r17	; 0x80027e <__brkval+0x1>
    101e:	00 93 7d 02 	sts	0x027D, r16	; 0x80027d <__brkval>
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <__do_global_dtors>:
    102c:	10 e0       	ldi	r17, 0x00	; 0
    102e:	c5 e3       	ldi	r28, 0x35	; 53
    1030:	d0 e0       	ldi	r29, 0x00	; 0
    1032:	04 c0       	rjmp	.+8      	; 0x103c <__do_global_dtors+0x10>
    1034:	fe 01       	movw	r30, r28
    1036:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__tablejump2__>
    103a:	21 96       	adiw	r28, 0x01	; 1
    103c:	c6 33       	cpi	r28, 0x36	; 54
    103e:	d1 07       	cpc	r29, r17
    1040:	c9 f7       	brne	.-14     	; 0x1034 <__do_global_dtors+0x8>
    1042:	f8 94       	cli

00001044 <__stop_program>:
    1044:	ff cf       	rjmp	.-2      	; 0x1044 <__stop_program>
