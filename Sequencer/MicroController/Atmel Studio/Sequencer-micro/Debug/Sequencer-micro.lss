
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000e32  00000ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005e  00800112  00800112  00000ed8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006bcf  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000244c  00000000  00000000  00007f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cc1  00000000  00000000  0000a35f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000894  00000000  00000000  0000c020  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001257  00000000  00000000  0000c8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014a2  00000000  00000000  0000db0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000efad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_11>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_12>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	44 01       	movw	r8, r8

0000006a <__ctors_end>:
  6a:	76 01       	movw	r14, r12

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e2 e3       	ldi	r30, 0x32	; 50
  80:	fe e0       	ldi	r31, 0x0E	; 14
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a2 31       	cpi	r26, 0x12	; 18
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a2 e1       	ldi	r26, 0x12	; 18
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a0 37       	cpi	r26, 0x70	; 112
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 03 01 	call	0x206	; 0x206 <main>
  b8:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_14>:

void disableShifting( void )
{
	//TIMSK2 is the TC2 Interrupt Mask Register
	//We will disable interrupt on compare match with OCR2A
	TIMSK2 &= ~(1 << OCIE2A);
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	3f 93       	push	r19
  ce:	4f 93       	push	r20
  d0:	5f 93       	push	r21
  d2:	6f 93       	push	r22
  d4:	7f 93       	push	r23
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
  e2:	84 e6       	ldi	r24, 0x64	; 100
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_ZN5Timer14incrementTimerEv>
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_12>:
 10c:	78 94       	sei
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <_Z20setUpTimerInterruptsv>:
 122:	ee e6       	ldi	r30, 0x6E	; 110
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 83       	st	Z, r24
 12c:	89 e1       	ldi	r24, 0x19	; 25
 12e:	87 bd       	out	0x27, r24	; 39
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	94 bd       	out	0x24, r25	; 36
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	85 bd       	out	0x25, r24	; 37
 138:	ef e6       	ldi	r30, 0x6F	; 111
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	86 60       	ori	r24, 0x06	; 6
 140:	80 83       	st	Z, r24
 142:	20 e4       	ldi	r18, 0x40	; 64
 144:	36 e0       	ldi	r19, 0x06	; 6
 146:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 14a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 156:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 15a:	89 e0       	ldi	r24, 0x09	; 9
 15c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 166:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 170:	78 94       	sei
 172:	08 95       	ret

00000174 <_Z25disableTimerOneInterruptsv>:
}

void disableTimerOneInterrupts( void )
{
	TIMSK1 &= ~((1 << OCIE1A) | (1 << OCIE2B));
 174:	ef e6       	ldi	r30, 0x6F	; 111
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	89 7f       	andi	r24, 0xF9	; 249
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <__vector_11>:
ISR( TIMER1_COMPB_vect, ISR_NOBLOCK)
{
}

ISR( TIMER1_COMPA_vect, ISR_NOBLOCK )
{
 180:	78 94       	sei
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
	disableTimerOneInterrupts();
 1a4:	0e 94 ba 00 	call	0x174	; 0x174 <_Z25disableTimerOneInterruptsv>
}
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	7f 91       	pop	r23
 1b6:	6f 91       	pop	r22
 1b8:	5f 91       	pop	r21
 1ba:	4f 91       	pop	r20
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <_Z9latchTaskv>:
//Task for triggering
void triggerTask( void ){
	trigger.run();
}
//Task for counting
void counterTask( void ){
 1ca:	84 e4       	ldi	r24, 0x44	; 68
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN5Latch3runEv>
 1d2:	08 95       	ret

000001d4 <_Z23sevenSegmentDisplayTaskv>:
 1d4:	86 e4       	ldi	r24, 0x46	; 70
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 44 04 	call	0x888	; 0x888 <_ZN8SevenSeg3runEv>
 1dc:	08 95       	ret

000001de <_Z11triggerTaskv>:
 1de:	82 e1       	ldi	r24, 0x12	; 18
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN7Trigger3runEv>
 1e6:	08 95       	ret

000001e8 <_Z10blinkyTaskv>:
 1e8:	8b e1       	ldi	r24, 0x1B	; 27
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN6Blinky3runEv>
 1f0:	08 95       	ret

000001f2 <_Z12BPMInputTaskv>:
 1f2:	83 e3       	ldi	r24, 0x33	; 51
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN8BPMInput3runEv>
 1fa:	08 95       	ret

000001fc <_Z12PrintBPMTaskv>:
 1fc:	89 e2       	ldi	r24, 0x29	; 41
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN8PrintBPM3runEv>
 204:	08 95       	ret

00000206 <main>:
void PrintBPMTask( void ){
	printBPM.run();
}

int main(void)
{	
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	66 97       	sbiw	r28, 0x16	; 22
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61

	//Setup interrupts to get the timer to work
	setUpTimerInterrupts();
 21a:	0e 94 91 00 	call	0x122	; 0x122 <_Z20setUpTimerInterruptsv>
	
	//Initialize task manager
	TaskManager taskManager( timer );
 21e:	64 e6       	ldi	r22, 0x64	; 100
 220:	71 e0       	ldi	r23, 0x01	; 1
 222:	ce 01       	movw	r24, r28
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN11TaskManagerC1ER5Timer>
	
	//Add tasks with priority 0-250. 0 is real time. 251 never runs.
	taskManager.addTask( latchTask , 64);
 22a:	40 e4       	ldi	r20, 0x40	; 64
 22c:	65 ee       	ldi	r22, 0xE5	; 229
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( sevenSegmentDisplayTask, 128);
 238:	40 e8       	ldi	r20, 0x80	; 128
 23a:	6a ee       	ldi	r22, 0xEA	; 234
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( triggerTask,  4);
 246:	44 e0       	ldi	r20, 0x04	; 4
 248:	6f ee       	ldi	r22, 0xEF	; 239
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	ce 01       	movw	r24, r28
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	//taskManager.addTask( counterTask, 128);
	taskManager.addTask( BPMInputTask, 128 );
 254:	40 e8       	ldi	r20, 0x80	; 128
 256:	69 ef       	ldi	r22, 0xF9	; 249
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	ce 01       	movw	r24, r28
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( PrintBPMTask, 128 );
 262:	40 e8       	ldi	r20, 0x80	; 128
 264:	6e ef       	ldi	r22, 0xFE	; 254
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	ce 01       	movw	r24, r28
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( blinkyTask, 128);
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	64 ef       	ldi	r22, 0xF4	; 244
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	ce 01       	movw	r24, r28
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	
    while (1) 
    {
		taskManager.runTasks();
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN11TaskManager8runTasksEv>
 286:	fb cf       	rjmp	.-10     	; 0x27e <main+0x78>

00000288 <_GLOBAL__sub_I_timer>:
 * Author : Koltin Kosik-Harvey
 */
#include "Tasks/setupTasks.h"

//Define a pointer to a timer object.
Timer timer;
 288:	84 e6       	ldi	r24, 0x64	; 100
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN5TimerC1Ev>

//Define a pointer to a seven segment display object.
SevenSeg sevenSegmentDisplay(NUM_DISPLAYS, timer);
 290:	44 e6       	ldi	r20, 0x64	; 100
 292:	51 e0       	ldi	r21, 0x01	; 1
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	86 e4       	ldi	r24, 0x46	; 70
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN8SevenSegC1EhR5Timer>
//Pointer to the counter object
//Task counts to 100 then resets.
//Counter counter;

//Pointer to latching task. Controls latching output on shift registers
Latch latch( sevenSegmentDisplay );
 29e:	66 e4       	ldi	r22, 0x46	; 70
 2a0:	71 e0       	ldi	r23, 0x01	; 1
 2a2:	84 e4       	ldi	r24, 0x44	; 68
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN5LatchC1ER8SevenSeg>

//Pointer to the BPMInput task. Polls the potentiometer and averages it
BPMInput bpmInput( timer );
 2aa:	64 e6       	ldi	r22, 0x64	; 100
 2ac:	71 e0       	ldi	r23, 0x01	; 1
 2ae:	83 e3       	ldi	r24, 0x33	; 51
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN8BPMInputC1ER5Timer>

//Pointer to the PrintBPM task. Prints value of the recorded BPM
PrintBPM printBPM( timer, bpmInput, sevenSegmentDisplay );
 2b6:	26 e4       	ldi	r18, 0x46	; 70
 2b8:	31 e0       	ldi	r19, 0x01	; 1
 2ba:	43 e3       	ldi	r20, 0x33	; 51
 2bc:	51 e0       	ldi	r21, 0x01	; 1
 2be:	64 e6       	ldi	r22, 0x64	; 100
 2c0:	71 e0       	ldi	r23, 0x01	; 1
 2c2:	89 e2       	ldi	r24, 0x29	; 41
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN8PrintBPMC1ER5TimerR8BPMInputR8SevenSeg>

//Pointer to the blinky task
Blinky blinky( timer, bpmInput );
 2ca:	43 e3       	ldi	r20, 0x33	; 51
 2cc:	51 e0       	ldi	r21, 0x01	; 1
 2ce:	64 e6       	ldi	r22, 0x64	; 100
 2d0:	71 e0       	ldi	r23, 0x01	; 1
 2d2:	8b e1       	ldi	r24, 0x1B	; 27
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN6BlinkyC1ER5TimerR8BPMInput>

//Pointer to trigger task
//Used for triggering the instruments in the sequencer
Trigger trigger( timer, blinky );
 2da:	4b e1       	ldi	r20, 0x1B	; 27
 2dc:	51 e0       	ldi	r21, 0x01	; 1
 2de:	64 e6       	ldi	r22, 0x64	; 100
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	82 e1       	ldi	r24, 0x12	; 18
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN7TriggerC1ER5TimerR6Blinky>
 2ea:	08 95       	ret

000002ec <_GLOBAL__sub_D_timer>:
 2ec:	82 e1       	ldi	r24, 0x12	; 18
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN7TriggerD1Ev>

//Pointer to the PrintBPM task. Prints value of the recorded BPM
PrintBPM printBPM( timer, bpmInput, sevenSegmentDisplay );

//Pointer to the blinky task
Blinky blinky( timer, bpmInput );
 2f4:	8b e1       	ldi	r24, 0x1B	; 27
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 a1 03 	call	0x742	; 0x742 <_ZN6BlinkyD1Ev>

//Pointer to the BPMInput task. Polls the potentiometer and averages it
BPMInput bpmInput( timer );

//Pointer to the PrintBPM task. Prints value of the recorded BPM
PrintBPM printBPM( timer, bpmInput, sevenSegmentDisplay );
 2fc:	89 e2       	ldi	r24, 0x29	; 41
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN8PrintBPMD1Ev>

//Pointer to latching task. Controls latching output on shift registers
Latch latch( sevenSegmentDisplay );

//Pointer to the BPMInput task. Polls the potentiometer and averages it
BPMInput bpmInput( timer );
 304:	83 e3       	ldi	r24, 0x33	; 51
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 34 03 	call	0x668	; 0x668 <_ZN8BPMInputD1Ev>
//Pointer to the counter object
//Task counts to 100 then resets.
//Counter counter;

//Pointer to latching task. Controls latching output on shift registers
Latch latch( sevenSegmentDisplay );
 30c:	84 e4       	ldi	r24, 0x44	; 68
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN5LatchD1Ev>

//Define a pointer to a timer object.
Timer timer;

//Define a pointer to a seven segment display object.
SevenSeg sevenSegmentDisplay(NUM_DISPLAYS, timer);
 314:	86 e4       	ldi	r24, 0x46	; 70
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 a2 04 	call	0x944	; 0x944 <_ZN8SevenSegD1Ev>
 * Author : Koltin Kosik-Harvey
 */
#include "Tasks/setupTasks.h"

//Define a pointer to a timer object.
Timer timer;
 31c:	84 e6       	ldi	r24, 0x64	; 100
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN5TimerD1Ev>
 324:	08 95       	ret

00000326 <_Znwj>:
	 return malloc(size);
 }

 void operator delete[](void * ptr)
 {
	 free(ptr);
 326:	0e 94 df 05 	call	0xbbe	; 0xbbe <malloc>
 32a:	08 95       	ret

0000032c <_Z5pow10h>:
 }
 
 uint16_t pow10( uint8_t exponent )
 {
	 if (exponent == 0){
 32c:	88 23       	and	r24, r24
 32e:	f1 f0       	breq	.+60     	; 0x36c <_Z5pow10h+0x40>
		 return 1;
	 }
	 uint16_t output = 1;
	 for(int i=0; i < exponent ; i++){
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	18 16       	cp	r1, r24
 334:	19 06       	cpc	r1, r25
 336:	ac f4       	brge	.+42     	; 0x362 <_Z5pow10h+0x36>
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
		 output = output * 10;
 340:	b9 01       	movw	r22, r18
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	22 0f       	add	r18, r18
 34c:	33 1f       	adc	r19, r19
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	26 0f       	add	r18, r22
 354:	37 1f       	adc	r19, r23
 {
	 if (exponent == 0){
		 return 1;
	 }
	 uint16_t output = 1;
	 for(int i=0; i < exponent ; i++){
 356:	4f 5f       	subi	r20, 0xFF	; 255
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	48 17       	cp	r20, r24
 35c:	59 07       	cpc	r21, r25
 35e:	81 f7       	brne	.-32     	; 0x340 <_Z5pow10h+0x14>
 360:	02 c0       	rjmp	.+4      	; 0x366 <_Z5pow10h+0x3a>
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
		 output = output * 10;
	 }
	 return output;
 366:	82 2f       	mov	r24, r18
 368:	93 2f       	mov	r25, r19
 36a:	08 95       	ret
 }
 
 uint16_t pow10( uint8_t exponent )
 {
	 if (exponent == 0){
		 return 1;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
	 uint16_t output = 1;
	 for(int i=0; i < exponent ; i++){
		 output = output * 10;
	 }
	 return output;
 370:	08 95       	ret

00000372 <_ZN9AnalogPinC1Eh>:
{
	//Ensure ADSC is low.
	while ( this->if_done_conv() == false ){};
	ADCSRA |= (1 << ADIF); // Clear ADC Interrupt Flag	
	return ADCH;
}
 372:	fc 01       	movw	r30, r24
 374:	60 83       	st	Z, r22
 376:	ee e7       	ldi	r30, 0x7E	; 126
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	20 81       	ld	r18, Z
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <_ZN9AnalogPinC1Eh+0x14>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <_ZN9AnalogPinC1Eh+0x10>
 38a:	82 2b       	or	r24, r18
 38c:	80 83       	st	Z, r24
 38e:	ec e7       	ldi	r30, 0x7C	; 124
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	80 64       	ori	r24, 0x40	; 64
 396:	80 83       	st	Z, r24
 398:	ea e7       	ldi	r30, 0x7A	; 122
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	80 83       	st	Z, r24
 3a2:	80 81       	ld	r24, Z
 3a4:	87 60       	ori	r24, 0x07	; 7
 3a6:	80 83       	st	Z, r24
 3a8:	08 95       	ret

000003aa <_ZN9AnalogPin10conv_beginEv>:
 3aa:	dc 01       	movw	r26, r24
 3ac:	ec e7       	ldi	r30, 0x7C	; 124
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	90 81       	ld	r25, Z
 3b2:	90 7f       	andi	r25, 0xF0	; 240
 3b4:	90 83       	st	Z, r25
 3b6:	90 81       	ld	r25, Z
 3b8:	8c 91       	ld	r24, X
 3ba:	89 2b       	or	r24, r25
 3bc:	80 83       	st	Z, r24
 3be:	ea e7       	ldi	r30, 0x7A	; 122
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	80 64       	ori	r24, 0x40	; 64
 3c6:	80 83       	st	Z, r24
 3c8:	08 95       	ret

000003ca <_ZN9AnalogPin12if_done_convEv>:
 3ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3ce:	86 fb       	bst	r24, 6
 3d0:	88 27       	eor	r24, r24
 3d2:	80 f9       	bld	r24, 0
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	89 27       	eor	r24, r25
 3d8:	08 95       	ret

000003da <_ZN9AnalogPin10read_10BitEv>:

//Reads ADC with 10 bit precision (slower)
uint16_t AnalogPin::read_10Bit( void )
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ec 01       	movw	r28, r24
	//Ensure ADSC is low.
	while ( this->if_done_conv() == false ){};	
 3e0:	ce 01       	movw	r24, r28
 3e2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN9AnalogPin12if_done_convEv>
 3e6:	88 23       	and	r24, r24
 3e8:	d9 f3       	breq	.-10     	; 0x3e0 <_ZN9AnalogPin10read_10BitEv+0x6>
	ADCSRA |= (1 << ADIF); // Clear ADC Interrupt Flag
 3ea:	ea e7       	ldi	r30, 0x7A	; 122
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	80 61       	ori	r24, 0x10	; 16
 3f2:	80 83       	st	Z, r24
	return ADC;
 3f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <_ZN3Pin17setDirectionInputEv>:
//ANDs the pinNumber mask with the input pin register
//ie 00010000 & 11110000 = 00010000
uint8_t Pin::read( void )
{
	return ( pinNumber & *pin_register );
}
 402:	dc 01       	movw	r26, r24
 404:	ed 91       	ld	r30, X+
 406:	fc 91       	ld	r31, X
 408:	11 97       	sbiw	r26, 0x01	; 1
 40a:	90 81       	ld	r25, Z
 40c:	16 96       	adiw	r26, 0x06	; 6
 40e:	8c 91       	ld	r24, X
 410:	80 95       	com	r24
 412:	89 23       	and	r24, r25
 414:	80 83       	st	Z, r24
 416:	08 95       	ret

00000418 <_ZN3Pin7setHighEv>:
	}
}

//Sets the pin high
void Pin::setHigh( void )
{
 418:	dc 01       	movw	r26, r24
	//set the pin high
	*port_register |= pinNumber;
 41a:	12 96       	adiw	r26, 0x02	; 2
 41c:	ed 91       	ld	r30, X+
 41e:	fc 91       	ld	r31, X
 420:	13 97       	sbiw	r26, 0x03	; 3
 422:	90 81       	ld	r25, Z
 424:	16 96       	adiw	r26, 0x06	; 6
 426:	8c 91       	ld	r24, X
 428:	89 2b       	or	r24, r25
 42a:	80 83       	st	Z, r24
 42c:	08 95       	ret

0000042e <_ZN3Pin6setLowEv>:
}

//Sets the pin low
void Pin::setLow( void )
{
 42e:	dc 01       	movw	r26, r24
	*port_register &= ~pinNumber;
 430:	12 96       	adiw	r26, 0x02	; 2
 432:	ed 91       	ld	r30, X+
 434:	fc 91       	ld	r31, X
 436:	13 97       	sbiw	r26, 0x03	; 3
 438:	90 81       	ld	r25, Z
 43a:	16 96       	adiw	r26, 0x06	; 6
 43c:	8c 91       	ld	r24, X
 43e:	80 95       	com	r24
 440:	89 23       	and	r24, r25
 442:	80 83       	st	Z, r24
 444:	08 95       	ret

00000446 <_ZN3Pin18setDirectionOutputEv>:
{	
	*data_direction_reg &= ~pinNumber;
}

void Pin::setDirectionOutput( void )
{
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	ec 01       	movw	r28, r24
	//Set the pin to low
	this->setLow();
 44c:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Pin6setLowEv>

	//Set data direction to output for the pin
	*data_direction_reg |= pinNumber;
 450:	e8 81       	ld	r30, Y
 452:	f9 81       	ldd	r31, Y+1	; 0x01
 454:	90 81       	ld	r25, Z
 456:	8e 81       	ldd	r24, Y+6	; 0x06
 458:	89 2b       	or	r24, r25
 45a:	80 83       	st	Z, r24
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <_ZN3PinC1EhPVhh>:
*/

#include "Pin.h"

// default constructor
Pin::Pin(uint8_t PIN_NUMBER, volatile uint8_t * PortRegister, uint8_t DIRECTION)
 462:	fc 01       	movw	r30, r24
{
	pin_register = PortRegister - 2;
 464:	ca 01       	movw	r24, r20
 466:	02 97       	sbiw	r24, 0x02	; 2
 468:	95 83       	std	Z+5, r25	; 0x05
 46a:	84 83       	std	Z+4, r24	; 0x04
	data_direction_reg = PortRegister - 1;
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	91 83       	std	Z+1, r25	; 0x01
 470:	80 83       	st	Z, r24
	port_register = PortRegister;
 472:	53 83       	std	Z+3, r21	; 0x03
 474:	42 83       	std	Z+2, r20	; 0x02
	
	//Stores pin number as a mask. Makes it easier for operations like setting the pin value
	pinNumber = (1 << PIN_NUMBER);
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	01 c0       	rjmp	.+2      	; 0x47c <_ZN3PinC1EhPVhh+0x1a>
 47a:	88 0f       	add	r24, r24
 47c:	6a 95       	dec	r22
 47e:	ea f7       	brpl	.-6      	; 0x47a <_ZN3PinC1EhPVhh+0x18>
 480:	86 83       	std	Z+6, r24	; 0x06

	if ( DIRECTION == OUTPUT )
 482:	21 30       	cpi	r18, 0x01	; 1
 484:	21 f4       	brne	.+8      	; 0x48e <_ZN3PinC1EhPVhh+0x2c>
	{
		this->setDirectionOutput();
 486:	cf 01       	movw	r24, r30
 488:	0e 94 23 02 	call	0x446	; 0x446 <_ZN3Pin18setDirectionOutputEv>
 48c:	08 95       	ret
	} else {
		this->setDirectionInput();
 48e:	cf 01       	movw	r24, r30
 490:	0e 94 01 02 	call	0x402	; 0x402 <_ZN3Pin17setDirectionInputEv>
 494:	08 95       	ret

00000496 <_ZN13ShiftRegisterC1Ev>:

ShiftRegister::ShiftRegister( Pin * shift, Pin * latch, Pin * serial )
{
	shiftPin = shift;
	latchPin = latch;
	serialPin = serial;
 496:	08 95       	ret

00000498 <_ZN13ShiftRegister11singleShiftEv>:
}

void ShiftRegister::singleShift( void )
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ec 01       	movw	r28, r24
	//Shift single bit in.
	shiftPin->setHigh();
 49e:	88 81       	ld	r24, Y
 4a0:	99 81       	ldd	r25, Y+1	; 0x01
 4a2:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN3Pin7setHighEv>
	//wait
	timer->wait_1us();
 4a6:	8e 81       	ldd	r24, Y+6	; 0x06
 4a8:	9f 81       	ldd	r25, Y+7	; 0x07
 4aa:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Timer8wait_1usEv>
	//Set shift high
	shiftPin->setLow();
 4ae:	88 81       	ld	r24, Y
 4b0:	99 81       	ldd	r25, Y+1	; 0x01
 4b2:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Pin6setLowEv>
	//wait
	timer->wait_1us();
 4b6:	8e 81       	ldd	r24, Y+6	; 0x06
 4b8:	9f 81       	ldd	r25, Y+7	; 0x07
 4ba:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Timer8wait_1usEv>
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <_ZN13ShiftRegister5latchEv>:

void ShiftRegister::latch( void )
{
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	ec 01       	movw	r28, r24
	//Latch output
	latchPin->setHigh();
 4ca:	8a 81       	ldd	r24, Y+2	; 0x02
 4cc:	9b 81       	ldd	r25, Y+3	; 0x03
 4ce:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN3Pin7setHighEv>
	//wait
	timer->wait_1us();
 4d2:	8e 81       	ldd	r24, Y+6	; 0x06
 4d4:	9f 81       	ldd	r25, Y+7	; 0x07
 4d6:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Timer8wait_1usEv>
	//Set latch high
	latchPin->setLow();
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	9b 81       	ldd	r25, Y+3	; 0x03
 4de:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Pin6setLowEv>

}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <_ZN13ShiftRegister17getTimerReferenceER5Timer>:

void ShiftRegister::getTimerReference( Timer & ptr )
{
	timer = &ptr;
 4e8:	fc 01       	movw	r30, r24
 4ea:	77 83       	std	Z+7, r23	; 0x07
 4ec:	66 83       	std	Z+6, r22	; 0x06
 4ee:	08 95       	ret

000004f0 <_ZN13ShiftRegisterD1Ev>:
} //getTimerReference

// default destructor
ShiftRegister::~ShiftRegister()
 4f0:	08 95       	ret

000004f2 <_ZN18ShiftRegister_SIPOC1Ev>:
//Constructs object with pinout
ShiftRegister_SIPO::ShiftRegister_SIPO( Pin * shift, Pin * latch, Pin * serial ) : ShiftRegister( shift, latch, serial )
{
	//Start off with output byte 0
	output_byte = 0;
}
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ec 01       	movw	r28, r24
 4f8:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN13ShiftRegisterC1Ev>
 4fc:	19 86       	std	Y+9, r1	; 0x09
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <_ZN18ShiftRegister_SIPO9shiftBitsEv>:

//Shifts in a bit into the shift register.
void ShiftRegister_SIPO::shiftBits( void )
{		
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	ec 01       	movw	r28, r24
	//Starting shifting with shift/serial/latch at 0
	latchPin->setLow();
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	9b 81       	ldd	r25, Y+3	; 0x03
 512:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Pin6setLowEv>
	shiftPin->setLow();
 516:	88 81       	ld	r24, Y
 518:	99 81       	ldd	r25, Y+1	; 0x01
 51a:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Pin6setLowEv>
	serialPin->setLow();
 51e:	8c 81       	ldd	r24, Y+4	; 0x04
 520:	9d 81       	ldd	r25, Y+5	; 0x05
 522:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Pin6setLowEv>

	//Wait 1us
	timer->wait_1us();
 526:	8e 81       	ldd	r24, Y+6	; 0x06
 528:	9f 81       	ldd	r25, Y+7	; 0x07
 52a:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Timer8wait_1usEv>
		
	for ( int i=0; i < 8; i++){
 52e:	00 e0       	ldi	r16, 0x00	; 0
 530:	10 e0       	ldi	r17, 0x00	; 0
			
		//Load serial pin with bit
			
		//If the bit needs to be set to 1...
		if( output_byte & (1 << i) ){
 532:	29 85       	ldd	r18, Y+9	; 0x09
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	00 2e       	mov	r0, r16
 538:	02 c0       	rjmp	.+4      	; 0x53e <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x3a>
 53a:	35 95       	asr	r19
 53c:	27 95       	ror	r18
 53e:	0a 94       	dec	r0
 540:	e2 f7       	brpl	.-8      	; 0x53a <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x36>
 542:	20 ff       	sbrs	r18, 0
 544:	05 c0       	rjmp	.+10     	; 0x550 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x4c>

			serialPin->setHigh();
 546:	8c 81       	ldd	r24, Y+4	; 0x04
 548:	9d 81       	ldd	r25, Y+5	; 0x05
 54a:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN3Pin7setHighEv>
 54e:	04 c0       	rjmp	.+8      	; 0x558 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x54>
				
		//Else set to 0
		} else {
			
			serialPin->setLow();
 550:	8c 81       	ldd	r24, Y+4	; 0x04
 552:	9d 81       	ldd	r25, Y+5	; 0x05
 554:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Pin6setLowEv>
		}
			
		timer->wait_1us();
 558:	8e 81       	ldd	r24, Y+6	; 0x06
 55a:	9f 81       	ldd	r25, Y+7	; 0x07
 55c:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Timer8wait_1usEv>
			
		this->singleShift();
 560:	ce 01       	movw	r24, r28
 562:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN13ShiftRegister11singleShiftEv>
	serialPin->setLow();

	//Wait 1us
	timer->wait_1us();
		
	for ( int i=0; i < 8; i++){
 566:	0f 5f       	subi	r16, 0xFF	; 255
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	08 30       	cpi	r16, 0x08	; 8
 56c:	11 05       	cpc	r17, r1
 56e:	09 f7       	brne	.-62     	; 0x532 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x2e>
		timer->wait_1us();
			
		this->singleShift();
	}
	
} //ShiftBits
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

0000057a <_ZN18ShiftRegister_SIPO8loadByteEh>:

void ShiftRegister_SIPO::loadByte( uint8_t byteToLoad )
{
	output_byte = byteToLoad;
 57a:	fc 01       	movw	r30, r24
 57c:	61 87       	std	Z+9, r22	; 0x09
 57e:	08 95       	ret

00000580 <_ZN18ShiftRegister_SIPOD1Ev>:
}

// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
 580:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_ZN13ShiftRegisterD1Ev>
 584:	08 95       	ret

00000586 <_ZN8BPMInputC1ER5Timer>:
*/


#include "BPMInput.h"

BPMInput::BPMInput( Timer & timerPtr ) : AnalogPin ( BPM_INPUT_PIN )
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	ec 01       	movw	r28, r24
 590:	8b 01       	movw	r16, r22
 592:	63 e0       	ldi	r22, 0x03	; 3
 594:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN9AnalogPinC1Eh>
{
	//Store reference to timer pointer
	timer = &timerPtr;
 598:	1f 83       	std	Y+7, r17	; 0x07
 59a:	0e 83       	std	Y+6, r16	; 0x06
	
	//Initialize Conversion Started flag
	conversionFinished = false;
 59c:	19 82       	std	Y+1, r1	; 0x01
	
	//Initialize time stamp
	timeStamp = timer->millis();
 59e:	c8 01       	movw	r24, r16
 5a0:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 5a4:	68 87       	std	Y+8, r22	; 0x08
 5a6:	79 87       	std	Y+9, r23	; 0x09
 5a8:	8a 87       	std	Y+10, r24	; 0x0a
 5aa:	9b 87       	std	Y+11, r25	; 0x0b
	
	//Initialize iteration counter
	iteration = 0;
 5ac:	18 8a       	std	Y+16, r1	; 0x10
	
	//Initialize sum for averaging 
	sum = 0;
 5ae:	1c 86       	std	Y+12, r1	; 0x0c
 5b0:	1d 86       	std	Y+13, r1	; 0x0d
 5b2:	1e 86       	std	Y+14, r1	; 0x0e
 5b4:	1f 86       	std	Y+15, r1	; 0x0f
	
	//Begin first conversion
	this->conv_begin();
 5b6:	ce 01       	movw	r24, r28
 5b8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN9AnalogPin10conv_beginEv>
	
} //BPMInput
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	08 95       	ret

000005c6 <_ZN8BPMInput3runEv>:

void BPMInput::run( void )
{
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	ec 01       	movw	r28, r24
	if ( timer->elapsed_millis(timeStamp) > BPM_PIN_POLLING_TIME ){
 5cc:	48 85       	ldd	r20, Y+8	; 0x08
 5ce:	59 85       	ldd	r21, Y+9	; 0x09
 5d0:	6a 85       	ldd	r22, Y+10	; 0x0a
 5d2:	7b 85       	ldd	r23, Y+11	; 0x0b
 5d4:	8e 81       	ldd	r24, Y+6	; 0x06
 5d6:	9f 81       	ldd	r25, Y+7	; 0x07
 5d8:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5Timer14elapsed_millisEm>
 5dc:	63 33       	cpi	r22, 0x33	; 51
 5de:	71 05       	cpc	r23, r1
 5e0:	81 05       	cpc	r24, r1
 5e2:	91 05       	cpc	r25, r1
 5e4:	f0 f1       	brcs	.+124    	; 0x662 <_ZN8BPMInput3runEv+0x9c>
		
		//Check if previous ADC conversion is complete.
		if ( this->if_done_conv()  ){
 5e6:	ce 01       	movw	r24, r28
 5e8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN9AnalogPin12if_done_convEv>
 5ec:	88 23       	and	r24, r24
 5ee:	c9 f1       	breq	.+114    	; 0x662 <_ZN8BPMInput3runEv+0x9c>
			
			//Read a sample of the ADC
			sum += this->read_10Bit();
 5f0:	ce 01       	movw	r24, r28
 5f2:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN9AnalogPin10read_10BitEv>
 5f6:	4c 85       	ldd	r20, Y+12	; 0x0c
 5f8:	5d 85       	ldd	r21, Y+13	; 0x0d
 5fa:	6e 85       	ldd	r22, Y+14	; 0x0e
 5fc:	7f 85       	ldd	r23, Y+15	; 0x0f
 5fe:	48 0f       	add	r20, r24
 600:	59 1f       	adc	r21, r25
 602:	61 1d       	adc	r22, r1
 604:	71 1d       	adc	r23, r1
 606:	4c 87       	std	Y+12, r20	; 0x0c
 608:	5d 87       	std	Y+13, r21	; 0x0d
 60a:	6e 87       	std	Y+14, r22	; 0x0e
 60c:	7f 87       	std	Y+15, r23	; 0x0f
			
			//Begin conversion for next iteration
			this->conv_begin();
 60e:	ce 01       	movw	r24, r28
 610:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN9AnalogPin10conv_beginEv>
			
			//Increment the iteration count
			iteration++;
 614:	88 89       	ldd	r24, Y+16	; 0x10
 616:	8f 5f       	subi	r24, 0xFF	; 255
 618:	88 8b       	std	Y+16, r24	; 0x10
			
			//Check if we take the required amount of samples for averaging
			if ( iteration >= SAMPLES ){
 61a:	80 31       	cpi	r24, 0x10	; 16
 61c:	d0 f0       	brcs	.+52     	; 0x652 <_ZN8BPMInput3runEv+0x8c>
				
				//Value is the average however this would leave with a value of 1024 as MAX
				value = (sum >> SAMPLES_LOG2);
 61e:	8c 85       	ldd	r24, Y+12	; 0x0c
 620:	9d 85       	ldd	r25, Y+13	; 0x0d
 622:	ae 85       	ldd	r26, Y+14	; 0x0e
 624:	bf 85       	ldd	r27, Y+15	; 0x0f
				
				//Convert value to a range between 0-256 essential devide by four
				value = value >> 2;
 626:	68 94       	set
 628:	15 f8       	bld	r1, 5
 62a:	b6 95       	lsr	r27
 62c:	a7 95       	ror	r26
 62e:	97 95       	ror	r25
 630:	87 95       	ror	r24
 632:	16 94       	lsr	r1
 634:	d1 f7       	brne	.-12     	; 0x62a <_ZN8BPMInput3runEv+0x64>
				
				//Add the offset
				value = value + BPM_OFFSET;
 636:	4e 96       	adiw	r24, 0x1e	; 30
 638:	a1 1d       	adc	r26, r1
 63a:	b1 1d       	adc	r27, r1
 63c:	8a 83       	std	Y+2, r24	; 0x02
 63e:	9b 83       	std	Y+3, r25	; 0x03
 640:	ac 83       	std	Y+4, r26	; 0x04
 642:	bd 83       	std	Y+5, r27	; 0x05
	
				//Reset sum
				sum = 0;
 644:	1c 86       	std	Y+12, r1	; 0x0c
 646:	1d 86       	std	Y+13, r1	; 0x0d
 648:	1e 86       	std	Y+14, r1	; 0x0e
 64a:	1f 86       	std	Y+15, r1	; 0x0f
				
				//Reset iteration count
				iteration = 0;	
 64c:	18 8a       	std	Y+16, r1	; 0x10
				
				//Indicate the conversion is done
				conversionFinished = true;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	89 83       	std	Y+1, r24	; 0x01
			}
			
			//Reset the time stamp
			timeStamp = timer->millis();
 652:	8e 81       	ldd	r24, Y+6	; 0x06
 654:	9f 81       	ldd	r25, Y+7	; 0x07
 656:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 65a:	68 87       	std	Y+8, r22	; 0x08
 65c:	79 87       	std	Y+9, r23	; 0x09
 65e:	8a 87       	std	Y+10, r24	; 0x0a
 660:	9b 87       	std	Y+11, r25	; 0x0b
		}
	}
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <_ZN8BPMInputD1Ev>:


// default destructor
BPMInput::~BPMInput()
 668:	08 95       	ret

0000066a <_ZN6BlinkyC1ER5TimerR8BPMInput>:


#include "Blinky.h"

//Initialize the pins. 
Blinky::Blinky( Timer & timerPtr, BPMInput & bpmInputRef )
 66a:	0f 93       	push	r16
 66c:	1f 93       	push	r17
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	ec 01       	movw	r28, r24
{
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
 674:	50 9a       	sbi	0x0a, 0	; 10
		
	//Used for the "Status LED"
	DDRD |= (1 << PORTD1);
 676:	51 9a       	sbi	0x0a, 1	; 10
	
	//Used for Task - "Blinky". Indicates next value of LED
	LEDValueNext = 1;
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	8a 83       	std	Y+2, r24	; 0x02
	
	//initialize time stamp to zero
	timeStamp = 0;
 67c:	18 86       	std	Y+8, r1	; 0x08
 67e:	19 86       	std	Y+9, r1	; 0x09
 680:	1a 86       	std	Y+10, r1	; 0x0a
 682:	1b 86       	std	Y+11, r1	; 0x0b
	
	//Get reference to the timer
	timer = &timerPtr;
 684:	7d 83       	std	Y+5, r23	; 0x05
 686:	6c 83       	std	Y+4, r22	; 0x04
	
	//Get reference to the BPM input
	bpmInput = &bpmInputRef;
 688:	5f 83       	std	Y+7, r21	; 0x07
 68a:	4e 83       	std	Y+6, r20	; 0x06
	
	blinkyPin = new Pin(0, &PORTD, OUTPUT);
 68c:	87 e0       	ldi	r24, 0x07	; 7
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 93 01 	call	0x326	; 0x326 <_Znwj>
 694:	8c 01       	movw	r16, r24
 696:	21 e0       	ldi	r18, 0x01	; 1
 698:	4b e2       	ldi	r20, 0x2B	; 43
 69a:	50 e0       	ldi	r21, 0x00	; 0
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	0e 94 31 02 	call	0x462	; 0x462 <_ZN3PinC1EhPVhh>
 6a2:	1d 87       	std	Y+13, r17	; 0x0d
 6a4:	0c 87       	std	Y+12, r16	; 0x0c
	
	//initialize pulse width
	pulseWidth = 5000;
 6a6:	88 e8       	ldi	r24, 0x88	; 136
 6a8:	93 e1       	ldi	r25, 0x13	; 19
 6aa:	99 83       	std	Y+1, r25	; 0x01
 6ac:	88 83       	st	Y, r24
	
	//init flag
	justSetHigh = false;
 6ae:	1b 82       	std	Y+3, r1	; 0x03
	
} //Blinky
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	08 95       	ret

000006ba <_ZN6Blinky3runEv>:

void Blinky::run()
{
 6ba:	0f 93       	push	r16
 6bc:	1f 93       	push	r17
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	ec 01       	movw	r28, r24
	if ( timer->elapsed_millis( timeStamp ) > pulseWidth ) {
 6c4:	48 85       	ldd	r20, Y+8	; 0x08
 6c6:	59 85       	ldd	r21, Y+9	; 0x09
 6c8:	6a 85       	ldd	r22, Y+10	; 0x0a
 6ca:	7b 85       	ldd	r23, Y+11	; 0x0b
 6cc:	8c 81       	ldd	r24, Y+4	; 0x04
 6ce:	9d 81       	ldd	r25, Y+5	; 0x05
 6d0:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5Timer14elapsed_millisEm>
 6d4:	28 81       	ld	r18, Y
 6d6:	39 81       	ldd	r19, Y+1	; 0x01
 6d8:	89 01       	movw	r16, r18
 6da:	20 e0       	ldi	r18, 0x00	; 0
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	06 17       	cp	r16, r22
 6e0:	17 07       	cpc	r17, r23
 6e2:	28 07       	cpc	r18, r24
 6e4:	39 07       	cpc	r19, r25
 6e6:	40 f5       	brcc	.+80     	; 0x738 <_ZN6Blinky3runEv+0x7e>
		
		//Update time stamp
		timeStamp = timer->millis();
 6e8:	8c 81       	ldd	r24, Y+4	; 0x04
 6ea:	9d 81       	ldd	r25, Y+5	; 0x05
 6ec:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 6f0:	68 87       	std	Y+8, r22	; 0x08
 6f2:	79 87       	std	Y+9, r23	; 0x09
 6f4:	8a 87       	std	Y+10, r24	; 0x0a
 6f6:	9b 87       	std	Y+11, r25	; 0x0b
		
		if( LEDValueNext == 1 ){
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	81 30       	cpi	r24, 0x01	; 1
 6fc:	31 f4       	brne	.+12     	; 0x70a <_ZN6Blinky3runEv+0x50>
			//Set Test LED to OFF
			blinkyPin->setHigh();	
 6fe:	8c 85       	ldd	r24, Y+12	; 0x0c
 700:	9d 85       	ldd	r25, Y+13	; 0x0d
 702:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN3Pin7setHighEv>
			LEDValueNext = 0;
 706:	1a 82       	std	Y+2, r1	; 0x02
 708:	07 c0       	rjmp	.+14     	; 0x718 <_ZN6Blinky3runEv+0x5e>
			
			} else {
			//Set Test LED to ON
			blinkyPin->setLow();
 70a:	8c 85       	ldd	r24, Y+12	; 0x0c
 70c:	9d 85       	ldd	r25, Y+13	; 0x0d
 70e:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN3Pin6setLowEv>
			
			justSetHigh = true;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	8b 83       	std	Y+3, r24	; 0x03
			
			LEDValueNext = 1;
 716:	8a 83       	std	Y+2, r24	; 0x02
		//Recalculate pulse rate. in units of 0.1ms 
		//Timer counter to 600000 per 0.1ms so if we have 60 BPM
		//The delay would be 600000/60 = 10000;
		//Then we need to devide by two, to have the clock go up and down.
		//Period would still be the 1/BPM.
		pulseWidth = 600000 / bpmInput->value;
 718:	ee 81       	ldd	r30, Y+6	; 0x06
 71a:	ff 81       	ldd	r31, Y+7	; 0x07
 71c:	22 81       	ldd	r18, Z+2	; 0x02
 71e:	33 81       	ldd	r19, Z+3	; 0x03
 720:	44 81       	ldd	r20, Z+4	; 0x04
 722:	55 81       	ldd	r21, Z+5	; 0x05
 724:	60 ec       	ldi	r22, 0xC0	; 192
 726:	77 e2       	ldi	r23, 0x27	; 39
 728:	89 e0       	ldi	r24, 0x09	; 9
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 a8 05 	call	0xb50	; 0xb50 <__udivmodsi4>
		pulseWidth = pulseWidth >> 1;
 730:	36 95       	lsr	r19
 732:	27 95       	ror	r18
 734:	39 83       	std	Y+1, r19	; 0x01
 736:	28 83       	st	Y, r18
		
	}
}
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	08 95       	ret

00000742 <_ZN6BlinkyD1Ev>:

// default destructor
Blinky::~Blinky()
 742:	08 95       	ret

00000744 <_ZN5LatchC1ER8SevenSeg>:
#include "Latch.h"

Latch::Latch( SevenSeg & sevenSegPtr )
{
	//Reference to the seven segment display
	sevenSegmentDisplay = &sevenSegPtr;
 744:	fc 01       	movw	r30, r24
 746:	71 83       	std	Z+1, r23	; 0x01
 748:	60 83       	st	Z, r22
 74a:	08 95       	ret

0000074c <_ZN5Latch3runEv>:
} //Latch

void Latch::run( void )
{
	if( sevenSegmentDisplay->shiftComplete == true){
 74c:	dc 01       	movw	r26, r24
 74e:	ed 91       	ld	r30, X+
 750:	fc 91       	ld	r31, X
 752:	11 97       	sbiw	r26, 0x01	; 1
 754:	22 85       	ldd	r18, Z+10	; 0x0a
 756:	21 30       	cpi	r18, 0x01	; 1
 758:	29 f4       	brne	.+10     	; 0x764 <_ZN5Latch3runEv+0x18>
		
		//Reset the shift complete flag
		sevenSegmentDisplay->shiftComplete = false;
 75a:	12 86       	std	Z+10, r1	; 0x0a
		
		//Latch shift registers. Output should show on seven segment display
		sevenSegmentDisplay->latch();
 75c:	8d 91       	ld	r24, X+
 75e:	9c 91       	ld	r25, X
 760:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_ZN13ShiftRegister5latchEv>
 764:	08 95       	ret

00000766 <_ZN5LatchD1Ev>:
	}
}

// default destructor
Latch::~Latch()
 766:	08 95       	ret

00000768 <_ZN8PrintBPMC1ER5TimerR8BPMInputR8SevenSeg>:


#include "PrintBPM.h"


PrintBPM::PrintBPM( Timer & timerPtr, BPMInput & BPMInputPtr, SevenSeg & sevenSegPtr)
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	ec 01       	movw	r28, r24
 76e:	cb 01       	movw	r24, r22
{	
	//Get reference to timer object
	timer = &timerPtr;
 770:	7b 83       	std	Y+3, r23	; 0x03
 772:	6a 83       	std	Y+2, r22	; 0x02
	
	//Get reference to the BPM input object
	BPMInputRef = &BPMInputPtr;
 774:	59 83       	std	Y+1, r21	; 0x01
 776:	48 83       	st	Y, r20
	
	//Get reference to the seven segment display
	sevenSeg = &sevenSegPtr;
 778:	3d 83       	std	Y+5, r19	; 0x05
 77a:	2c 83       	std	Y+4, r18	; 0x04
	
	//Initialize timeStamp
	timeStamp = timer->millis();
 77c:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 780:	6e 83       	std	Y+6, r22	; 0x06
 782:	7f 83       	std	Y+7, r23	; 0x07
 784:	88 87       	std	Y+8, r24	; 0x08
 786:	99 87       	std	Y+9, r25	; 0x09
	
} //PrintBPM
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <_ZN8PrintBPM3runEv>:

void PrintBPM::run( void )
{
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	ec 01       	movw	r28, r24
	if( timer->elapsed_millis(timeStamp) > BPM_MIN_UPDATE_TIME ){
 794:	4e 81       	ldd	r20, Y+6	; 0x06
 796:	5f 81       	ldd	r21, Y+7	; 0x07
 798:	68 85       	ldd	r22, Y+8	; 0x08
 79a:	79 85       	ldd	r23, Y+9	; 0x09
 79c:	8a 81       	ldd	r24, Y+2	; 0x02
 79e:	9b 81       	ldd	r25, Y+3	; 0x03
 7a0:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5Timer14elapsed_millisEm>
 7a4:	69 3e       	cpi	r22, 0xE9	; 233
 7a6:	73 40       	sbci	r23, 0x03	; 3
 7a8:	81 05       	cpc	r24, r1
 7aa:	91 05       	cpc	r25, r1
 7ac:	e0 f0       	brcs	.+56     	; 0x7e6 <_ZN8PrintBPM3runEv+0x58>
		
		//See if the ADC conversion to get the BPM has been completed
		if ( BPMInputRef->conversionFinished == true ){
 7ae:	e8 81       	ld	r30, Y
 7b0:	f9 81       	ldd	r31, Y+1	; 0x01
 7b2:	81 81       	ldd	r24, Z+1	; 0x01
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	b9 f4       	brne	.+46     	; 0x7e6 <_ZN8PrintBPM3runEv+0x58>
				
			//Set the content for the seven segment to print
			sevenSeg->contentToPrint = BPMInputRef->value;
 7b8:	ac 81       	ldd	r26, Y+4	; 0x04
 7ba:	bd 81       	ldd	r27, Y+5	; 0x05
 7bc:	82 81       	ldd	r24, Z+2	; 0x02
 7be:	93 81       	ldd	r25, Z+3	; 0x03
 7c0:	1d 96       	adiw	r26, 0x0d	; 13
 7c2:	9c 93       	st	X, r25
 7c4:	8e 93       	st	-X, r24
 7c6:	1c 97       	sbiw	r26, 0x0c	; 12
				
			//Tell seven seg object to print new content
			sevenSeg->newContentToPrint = true;
 7c8:	ec 81       	ldd	r30, Y+4	; 0x04
 7ca:	fd 81       	ldd	r31, Y+5	; 0x05
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	83 87       	std	Z+11, r24	; 0x0b
				
			//Reset the BPM input "conversion finished" flag
			BPMInputRef->conversionFinished = false;
 7d0:	e8 81       	ld	r30, Y
 7d2:	f9 81       	ldd	r31, Y+1	; 0x01
 7d4:	11 82       	std	Z+1, r1	; 0x01
				
			//Get new time stamp
			timeStamp = timer->millis();
 7d6:	8a 81       	ldd	r24, Y+2	; 0x02
 7d8:	9b 81       	ldd	r25, Y+3	; 0x03
 7da:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 7de:	6e 83       	std	Y+6, r22	; 0x06
 7e0:	7f 83       	std	Y+7, r23	; 0x07
 7e2:	88 87       	std	Y+8, r24	; 0x08
 7e4:	99 87       	std	Y+9, r25	; 0x09
		}
	}
}
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	08 95       	ret

000007ec <_ZN8PrintBPMD1Ev>:

// default destructor
PrintBPM::~PrintBPM()
 7ec:	08 95       	ret

000007ee <_ZN8SevenSegC1EhR5Timer>:
	//Shift in the Byte
	this->shiftBits();
	
	//latch output
	this->latch();
}
 7ee:	ef 92       	push	r14
 7f0:	ff 92       	push	r15
 7f2:	0f 93       	push	r16
 7f4:	1f 93       	push	r17
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	ec 01       	movw	r28, r24
 7fc:	16 2f       	mov	r17, r22
 7fe:	7a 01       	movw	r14, r20
 800:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN18ShiftRegister_SIPOC1Ev>
 804:	8b e0       	ldi	r24, 0x0B	; 11
 806:	e6 e0       	ldi	r30, 0x06	; 6
 808:	f1 e0       	ldi	r31, 0x01	; 1
 80a:	de 01       	movw	r26, r28
 80c:	1f 96       	adiw	r26, 0x0f	; 15
 80e:	01 90       	ld	r0, Z+
 810:	0d 92       	st	X+, r0
 812:	8a 95       	dec	r24
 814:	e1 f7       	brne	.-8      	; 0x80e <_ZN8SevenSegC1EhR5Timer+0x20>
 816:	1d 86       	std	Y+13, r1	; 0x0d
 818:	1c 86       	std	Y+12, r1	; 0x0c
 81a:	1d 8e       	std	Y+29, r1	; 0x1d
 81c:	b7 01       	movw	r22, r14
 81e:	ce 01       	movw	r24, r28
 820:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN13ShiftRegister17getTimerReferenceER5Timer>
 824:	1e 87       	std	Y+14, r17	; 0x0e
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	8a 87       	std	Y+10, r24	; 0x0a
 82a:	8b 87       	std	Y+11, r24	; 0x0b
 82c:	87 e0       	ldi	r24, 0x07	; 7
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	0e 94 93 01 	call	0x326	; 0x326 <_Znwj>
 834:	8c 01       	movw	r16, r24
 836:	21 e0       	ldi	r18, 0x01	; 1
 838:	45 e2       	ldi	r20, 0x25	; 37
 83a:	50 e0       	ldi	r21, 0x00	; 0
 83c:	62 e0       	ldi	r22, 0x02	; 2
 83e:	0e 94 31 02 	call	0x462	; 0x462 <_ZN3PinC1EhPVhh>
 842:	19 83       	std	Y+1, r17	; 0x01
 844:	08 83       	st	Y, r16
 846:	87 e0       	ldi	r24, 0x07	; 7
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 93 01 	call	0x326	; 0x326 <_Znwj>
 84e:	8c 01       	movw	r16, r24
 850:	21 e0       	ldi	r18, 0x01	; 1
 852:	45 e2       	ldi	r20, 0x25	; 37
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	61 e0       	ldi	r22, 0x01	; 1
 858:	0e 94 31 02 	call	0x462	; 0x462 <_ZN3PinC1EhPVhh>
 85c:	1b 83       	std	Y+3, r17	; 0x03
 85e:	0a 83       	std	Y+2, r16	; 0x02
 860:	87 e0       	ldi	r24, 0x07	; 7
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 93 01 	call	0x326	; 0x326 <_Znwj>
 868:	8c 01       	movw	r16, r24
 86a:	21 e0       	ldi	r18, 0x01	; 1
 86c:	45 e2       	ldi	r20, 0x25	; 37
 86e:	50 e0       	ldi	r21, 0x00	; 0
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	0e 94 31 02 	call	0x462	; 0x462 <_ZN3PinC1EhPVhh>
 876:	1d 83       	std	Y+5, r17	; 0x05
 878:	0c 83       	std	Y+4, r16	; 0x04
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	1f 91       	pop	r17
 880:	0f 91       	pop	r16
 882:	ff 90       	pop	r15
 884:	ef 90       	pop	r14
 886:	08 95       	ret

00000888 <_ZN8SevenSeg3runEv>:
 888:	ef 92       	push	r14
 88a:	ff 92       	push	r15
 88c:	1f 93       	push	r17
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
 892:	fc 01       	movw	r30, r24
 894:	23 85       	ldd	r18, Z+11	; 0x0b
 896:	21 30       	cpi	r18, 0x01	; 1
 898:	09 f0       	breq	.+2      	; 0x89c <_ZN8SevenSeg3runEv+0x14>
 89a:	4e c0       	rjmp	.+156    	; 0x938 <__stack+0x39>
 89c:	ec 01       	movw	r28, r24
 89e:	12 86       	std	Z+10, r1	; 0x0a
 8a0:	15 8d       	ldd	r17, Z+29	; 0x1d
 8a2:	e4 84       	ldd	r14, Z+12	; 0x0c
 8a4:	f5 84       	ldd	r15, Z+13	; 0x0d
 8a6:	81 2f       	mov	r24, r17
 8a8:	0e 94 96 01 	call	0x32c	; 0x32c <_Z5pow10h>
 8ac:	bc 01       	movw	r22, r24
 8ae:	fe 01       	movw	r30, r28
 8b0:	e1 0f       	add	r30, r17
 8b2:	f1 1d       	adc	r31, r1
 8b4:	c7 01       	movw	r24, r14
 8b6:	0e 94 80 05 	call	0xb00	; 0xb00 <__udivmodhi4>
 8ba:	ab 01       	movw	r20, r22
 8bc:	9b 01       	movw	r18, r22
 8be:	ad ec       	ldi	r26, 0xCD	; 205
 8c0:	bc ec       	ldi	r27, 0xCC	; 204
 8c2:	0e 94 ca 05 	call	0xb94	; 0xb94 <__umulhisi3>
 8c6:	96 95       	lsr	r25
 8c8:	87 95       	ror	r24
 8ca:	96 95       	lsr	r25
 8cc:	87 95       	ror	r24
 8ce:	96 95       	lsr	r25
 8d0:	87 95       	ror	r24
 8d2:	9c 01       	movw	r18, r24
 8d4:	22 0f       	add	r18, r18
 8d6:	33 1f       	adc	r19, r19
 8d8:	88 0f       	add	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	88 0f       	add	r24, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	82 0f       	add	r24, r18
 8e6:	93 1f       	adc	r25, r19
 8e8:	48 1b       	sub	r20, r24
 8ea:	59 0b       	sbc	r21, r25
 8ec:	42 8f       	std	Z+26, r20	; 0x1a
 8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	fe 01       	movw	r30, r28
 8f4:	e8 0f       	add	r30, r24
 8f6:	f9 1f       	adc	r31, r25
 8f8:	22 8d       	ldd	r18, Z+26	; 0x1a
 8fa:	2a 30       	cpi	r18, 0x0A	; 10
 8fc:	28 f0       	brcs	.+10     	; 0x908 <__stack+0x9>
 8fe:	2a e0       	ldi	r18, 0x0A	; 10
 900:	fe 01       	movw	r30, r28
 902:	e8 0f       	add	r30, r24
 904:	f9 1f       	adc	r31, r25
 906:	22 8f       	std	Z+26, r18	; 0x1a
 908:	fe 01       	movw	r30, r28
 90a:	e8 0f       	add	r30, r24
 90c:	f9 1f       	adc	r31, r25
 90e:	82 8d       	ldd	r24, Z+26	; 0x1a
 910:	fe 01       	movw	r30, r28
 912:	e8 0f       	add	r30, r24
 914:	f1 1d       	adc	r31, r1
 916:	67 85       	ldd	r22, Z+15	; 0x0f
 918:	ce 01       	movw	r24, r28
 91a:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN18ShiftRegister_SIPO8loadByteEh>
 91e:	ce 01       	movw	r24, r28
 920:	0e 94 82 02 	call	0x504	; 0x504 <_ZN18ShiftRegister_SIPO9shiftBitsEv>
 924:	8d 8d       	ldd	r24, Y+29	; 0x1d
 926:	8f 5f       	subi	r24, 0xFF	; 255
 928:	83 30       	cpi	r24, 0x03	; 3
 92a:	10 f4       	brcc	.+4      	; 0x930 <__stack+0x31>
 92c:	8d 8f       	std	Y+29, r24	; 0x1d
 92e:	04 c0       	rjmp	.+8      	; 0x938 <__stack+0x39>
 930:	1d 8e       	std	Y+29, r1	; 0x1d
 932:	1b 86       	std	Y+11, r1	; 0x0b
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	8a 87       	std	Y+10, r24	; 0x0a
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	1f 91       	pop	r17
 93e:	ff 90       	pop	r15
 940:	ef 90       	pop	r14
 942:	08 95       	ret

00000944 <_ZN8SevenSegD1Ev>:

// default destructor
SevenSeg::~SevenSeg()
 944:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN18ShiftRegister_SIPOD1Ev>
 948:	08 95       	ret

0000094a <_ZN11TaskManagerC1ER5Timer>:


#include "TaskManager.h"

// default constructor
TaskManager::TaskManager( Timer & timerPtr )
 94a:	fc 01       	movw	r30, r24
{
	
	timer = &timerPtr;
 94c:	73 8b       	std	Z+19, r23	; 0x13
 94e:	62 8b       	std	Z+18, r22	; 0x12
	
	//At initialization there should be zero loaded tasks. 
	loadedTasks = 0;
 950:	14 8a       	std	Z+20, r1	; 0x14
	
	//Should be initialized to a prime number
	randNum = RANDOM_GEN_SEED;
 952:	87 e0       	ldi	r24, 0x07	; 7
 954:	85 8b       	std	Z+21, r24	; 0x15
 956:	08 95       	ret

00000958 <_ZN11TaskManager7addTaskEPFvvEh>:

//Add a task to the task list.
//Priority; Range between 0-250. Closer to 0, the more likely task will run. 0 is realtime
void TaskManager::addTask( void (*task) (void), uint8_t priority ){
	
	tasks[ loadedTasks ] = task;
 958:	fc 01       	movw	r30, r24
 95a:	24 89       	ldd	r18, Z+20	; 0x14
 95c:	a2 2f       	mov	r26, r18
 95e:	b0 e0       	ldi	r27, 0x00	; 0
 960:	fd 01       	movw	r30, r26
 962:	33 96       	adiw	r30, 0x03	; 3
 964:	ee 0f       	add	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	e8 0f       	add	r30, r24
 96a:	f9 1f       	adc	r31, r25
 96c:	71 83       	std	Z+1, r23	; 0x01
 96e:	60 83       	st	Z, r22
	
	taskPriority[ loadedTasks ] = priority;
 970:	a8 0f       	add	r26, r24
 972:	b9 1f       	adc	r27, r25
 974:	4c 93       	st	X, r20
	
	loadedTasks++;
 976:	2f 5f       	subi	r18, 0xFF	; 255
 978:	fc 01       	movw	r30, r24
 97a:	24 8b       	std	Z+20, r18	; 0x14
 97c:	08 95       	ret

0000097e <_ZN11TaskManager20generateRandomNumberEv>:
	}
	
}

void TaskManager::generateRandomNumber( void )
{
 97e:	fc 01       	movw	r30, r24
	randNum = (randNum*109+89)%251;
 980:	25 89       	ldd	r18, Z+21	; 0x15
 982:	8d e6       	ldi	r24, 0x6D	; 109
 984:	28 9f       	mul	r18, r24
 986:	90 01       	movw	r18, r0
 988:	11 24       	eor	r1, r1
 98a:	c9 01       	movw	r24, r18
 98c:	87 5a       	subi	r24, 0xA7	; 167
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	6b ef       	ldi	r22, 0xFB	; 251
 992:	70 e0       	ldi	r23, 0x00	; 0
 994:	0e 94 94 05 	call	0xb28	; 0xb28 <__divmodhi4>
 998:	85 8b       	std	Z+21, r24	; 0x15
 99a:	08 95       	ret

0000099c <_ZN11TaskManager8runTasksEv>:
	
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
 99c:	cf 92       	push	r12
 99e:	df 92       	push	r13
 9a0:	ef 92       	push	r14
 9a2:	ff 92       	push	r15
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
	for( int i=0; i < loadedTasks ; i++){
 9ac:	dc 01       	movw	r26, r24
 9ae:	54 96       	adiw	r26, 0x14	; 20
 9b0:	2c 91       	ld	r18, X
 9b2:	22 23       	and	r18, r18
 9b4:	f1 f0       	breq	.+60     	; 0x9f2 <_ZN11TaskManager8runTasksEv+0x56>
 9b6:	ec 01       	movw	r28, r24
 9b8:	6c 01       	movw	r12, r24
 9ba:	7c 01       	movw	r14, r24
 9bc:	00 e0       	ldi	r16, 0x00	; 0
 9be:	10 e0       	ldi	r17, 0x00	; 0
		
		//Generate random number for seeing if task should run
		this->generateRandomNumber();
 9c0:	ce 01       	movw	r24, r28
 9c2:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN11TaskManager20generateRandomNumberEv>
		if( taskPriority[i] <= randNum ){
 9c6:	f6 01       	movw	r30, r12
 9c8:	91 91       	ld	r25, Z+
 9ca:	6f 01       	movw	r12, r30
 9cc:	8d 89       	ldd	r24, Y+21	; 0x15
 9ce:	89 17       	cp	r24, r25
 9d0:	30 f0       	brcs	.+12     	; 0x9de <_ZN11TaskManager8runTasksEv+0x42>
			
			//Run the task
			(*tasks[i]) (); 
 9d2:	d7 01       	movw	r26, r14
 9d4:	16 96       	adiw	r26, 0x06	; 6
 9d6:	ed 91       	ld	r30, X+
 9d8:	fc 91       	ld	r31, X
 9da:	17 97       	sbiw	r26, 0x07	; 7
 9dc:	09 95       	icall
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
	for( int i=0; i < loadedTasks ; i++){
 9de:	0f 5f       	subi	r16, 0xFF	; 255
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	b2 e0       	ldi	r27, 0x02	; 2
 9e4:	eb 0e       	add	r14, r27
 9e6:	f1 1c       	adc	r15, r1
 9e8:	2c 89       	ldd	r18, Y+20	; 0x14
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	02 17       	cp	r16, r18
 9ee:	13 07       	cpc	r17, r19
 9f0:	3c f3       	brlt	.-50     	; 0x9c0 <_ZN11TaskManager8runTasksEv+0x24>
			(*tasks[i]) (); 
		}
		
	}
	
}
 9f2:	df 91       	pop	r29
 9f4:	cf 91       	pop	r28
 9f6:	1f 91       	pop	r17
 9f8:	0f 91       	pop	r16
 9fa:	ff 90       	pop	r15
 9fc:	ef 90       	pop	r14
 9fe:	df 90       	pop	r13
 a00:	cf 90       	pop	r12
 a02:	08 95       	ret

00000a04 <_ZN7TriggerC1ER5TimerR6Blinky>:


#include "Trigger.h"

// default constructor
Trigger::Trigger( Timer & timerPtr, Blinky & blinkyRef )
 a04:	cf 93       	push	r28
 a06:	df 93       	push	r29
 a08:	ec 01       	movw	r28, r24
 a0a:	cb 01       	movw	r24, r22
{
	//Initialize the output pin.
	DDRD |= (1 << PORTD2);
 a0c:	52 9a       	sbi	0x0a, 2	; 10
	
	//Used for marking a point in time.
	timeStamp = 0;
 a0e:	1b 82       	std	Y+3, r1	; 0x03
 a10:	1c 82       	std	Y+4, r1	; 0x04
 a12:	1d 82       	std	Y+5, r1	; 0x05
 a14:	1e 82       	std	Y+6, r1	; 0x06

	//Get reference to the timer
	timer = &timerPtr;
 a16:	7a 83       	std	Y+2, r23	; 0x02
 a18:	69 83       	std	Y+1, r22	; 0x01
	
	//Reference to blinky
	blinky = &blinkyRef;
 a1a:	58 87       	std	Y+8, r21	; 0x08
 a1c:	4f 83       	std	Y+7, r20	; 0x07
		
	//Initialize the time stamp
	//Timer->millis returns the number of 0.1ms since epoche
	timeStamp = timer->millis();
 a1e:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 a22:	6b 83       	std	Y+3, r22	; 0x03
 a24:	7c 83       	std	Y+4, r23	; 0x04
 a26:	8d 83       	std	Y+5, r24	; 0x05
 a28:	9e 83       	std	Y+6, r25	; 0x06
	
	//Intialize first run flag
	triggerSetHigh = true;
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	88 83       	st	Y, r24
	
} //Trigger
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	08 95       	ret

00000a34 <_ZN7Trigger3runEv>:

//Runs the trigger task.
void Trigger::run(){
 a34:	cf 93       	push	r28
 a36:	df 93       	push	r29
 a38:	ec 01       	movw	r28, r24
	
	if( blinky->justSetHigh == true ){
 a3a:	ef 81       	ldd	r30, Y+7	; 0x07
 a3c:	f8 85       	ldd	r31, Y+8	; 0x08
 a3e:	83 81       	ldd	r24, Z+3	; 0x03
 a40:	81 30       	cpi	r24, 0x01	; 1
 a42:	71 f4       	brne	.+28     	; 0xa60 <_ZN7Trigger3runEv+0x2c>

		//Get time stamp
		timeStamp = timer->millis();
 a44:	89 81       	ldd	r24, Y+1	; 0x01
 a46:	9a 81       	ldd	r25, Y+2	; 0x02
 a48:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 a4c:	6b 83       	std	Y+3, r22	; 0x03
 a4e:	7c 83       	std	Y+4, r23	; 0x04
 a50:	8d 83       	std	Y+5, r24	; 0x05
 a52:	9e 83       	std	Y+6, r25	; 0x06
		
		//Set pin high
		PORTD |= ( 1 << PORTD2 );
 a54:	5a 9a       	sbi	0x0b, 2	; 11
		
		triggerSetHigh = true;
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	88 83       	st	Y, r24
		
		blinky->justSetHigh = false;
 a5a:	ef 81       	ldd	r30, Y+7	; 0x07
 a5c:	f8 85       	ldd	r31, Y+8	; 0x08
 a5e:	13 82       	std	Z+3, r1	; 0x03
	}
	if ( triggerSetHigh == true ){
 a60:	88 81       	ld	r24, Y
 a62:	81 30       	cpi	r24, 0x01	; 1
 a64:	79 f4       	brne	.+30     	; 0xa84 <_ZN7Trigger3runEv+0x50>
		//Wait for 1ms or Trigger high duration
		if( timer->elapsed_millis(timeStamp) >= TRIGGER_HIGH ){
 a66:	4b 81       	ldd	r20, Y+3	; 0x03
 a68:	5c 81       	ldd	r21, Y+4	; 0x04
 a6a:	6d 81       	ldd	r22, Y+5	; 0x05
 a6c:	7e 81       	ldd	r23, Y+6	; 0x06
 a6e:	89 81       	ldd	r24, Y+1	; 0x01
 a70:	9a 81       	ldd	r25, Y+2	; 0x02
 a72:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5Timer14elapsed_millisEm>
 a76:	6a 30       	cpi	r22, 0x0A	; 10
 a78:	71 05       	cpc	r23, r1
 a7a:	81 05       	cpc	r24, r1
 a7c:	91 05       	cpc	r25, r1
 a7e:	10 f0       	brcs	.+4      	; 0xa84 <_ZN7Trigger3runEv+0x50>
			//Set pin low.
			PORTD &= ~(1 << PORTD2);
 a80:	5a 98       	cbi	0x0b, 2	; 11
				
			triggerSetHigh = false;
 a82:	18 82       	st	Y, r1
		}
	}
}
 a84:	df 91       	pop	r29
 a86:	cf 91       	pop	r28
 a88:	08 95       	ret

00000a8a <_ZN7TriggerD1Ev>:

// default destructor
Trigger::~Trigger()
 a8a:	08 95       	ret

00000a8c <_ZN5TimerC1Ev>:
	fixedTime = this->millis();
}

void Timer::resumeTimer( void )
{
	step = fixedTime;
 a8c:	fc 01       	movw	r30, r24
 a8e:	10 82       	st	Z, r1
 a90:	11 82       	std	Z+1, r1	; 0x01
 a92:	12 82       	std	Z+2, r1	; 0x02
 a94:	13 82       	std	Z+3, r1	; 0x03
 a96:	14 82       	std	Z+4, r1	; 0x04
 a98:	15 82       	std	Z+5, r1	; 0x05
 a9a:	16 82       	std	Z+6, r1	; 0x06
 a9c:	17 82       	std	Z+7, r1	; 0x07
 a9e:	08 95       	ret

00000aa0 <_ZN5Timer14incrementTimerEv>:
 aa0:	fc 01       	movw	r30, r24
 aa2:	40 81       	ld	r20, Z
 aa4:	51 81       	ldd	r21, Z+1	; 0x01
 aa6:	62 81       	ldd	r22, Z+2	; 0x02
 aa8:	73 81       	ldd	r23, Z+3	; 0x03
 aaa:	4f 5f       	subi	r20, 0xFF	; 255
 aac:	5f 4f       	sbci	r21, 0xFF	; 255
 aae:	6f 4f       	sbci	r22, 0xFF	; 255
 ab0:	7f 4f       	sbci	r23, 0xFF	; 255
 ab2:	40 83       	st	Z, r20
 ab4:	51 83       	std	Z+1, r21	; 0x01
 ab6:	62 83       	std	Z+2, r22	; 0x02
 ab8:	73 83       	std	Z+3, r23	; 0x03
 aba:	08 95       	ret

00000abc <_ZN5Timer14elapsed_millisEm>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
 abc:	0f 93       	push	r16
 abe:	1f 93       	push	r17
	return (step - comparison);	
 ac0:	fc 01       	movw	r30, r24
 ac2:	80 81       	ld	r24, Z
 ac4:	91 81       	ldd	r25, Z+1	; 0x01
 ac6:	a2 81       	ldd	r26, Z+2	; 0x02
 ac8:	b3 81       	ldd	r27, Z+3	; 0x03
 aca:	8c 01       	movw	r16, r24
 acc:	9d 01       	movw	r18, r26
 ace:	04 1b       	sub	r16, r20
 ad0:	15 0b       	sbc	r17, r21
 ad2:	26 0b       	sbc	r18, r22
 ad4:	37 0b       	sbc	r19, r23
 ad6:	c9 01       	movw	r24, r18
 ad8:	b8 01       	movw	r22, r16
}
 ada:	1f 91       	pop	r17
 adc:	0f 91       	pop	r16
 ade:	08 95       	ret

00000ae0 <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return step;
 ae0:	fc 01       	movw	r30, r24
 ae2:	60 81       	ld	r22, Z
 ae4:	71 81       	ldd	r23, Z+1	; 0x01
 ae6:	82 81       	ldd	r24, Z+2	; 0x02
 ae8:	93 81       	ldd	r25, Z+3	; 0x03
}
 aea:	08 95       	ret

00000aec <_ZN5Timer8wait_1usEv>:
	//Variable to find the difference between a current value
	//of a timer and a previous value
	uint8_t difference = 0;
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
 aec:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
		difference = TCNT2 - timerValue;
 af0:	e2 eb       	ldi	r30, 0xB2	; 178
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	80 81       	ld	r24, Z
 af6:	89 1b       	sub	r24, r25
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
 af8:	80 31       	cpi	r24, 0x10	; 16
 afa:	e0 f3       	brcs	.-8      	; 0xaf4 <_ZN5Timer8wait_1usEv+0x8>
		difference = TCNT2 - timerValue;
	}
}
 afc:	08 95       	ret

00000afe <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 afe:	08 95       	ret

00000b00 <__udivmodhi4>:
 b00:	aa 1b       	sub	r26, r26
 b02:	bb 1b       	sub	r27, r27
 b04:	51 e1       	ldi	r21, 0x11	; 17
 b06:	07 c0       	rjmp	.+14     	; 0xb16 <__udivmodhi4_ep>

00000b08 <__udivmodhi4_loop>:
 b08:	aa 1f       	adc	r26, r26
 b0a:	bb 1f       	adc	r27, r27
 b0c:	a6 17       	cp	r26, r22
 b0e:	b7 07       	cpc	r27, r23
 b10:	10 f0       	brcs	.+4      	; 0xb16 <__udivmodhi4_ep>
 b12:	a6 1b       	sub	r26, r22
 b14:	b7 0b       	sbc	r27, r23

00000b16 <__udivmodhi4_ep>:
 b16:	88 1f       	adc	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	5a 95       	dec	r21
 b1c:	a9 f7       	brne	.-22     	; 0xb08 <__udivmodhi4_loop>
 b1e:	80 95       	com	r24
 b20:	90 95       	com	r25
 b22:	bc 01       	movw	r22, r24
 b24:	cd 01       	movw	r24, r26
 b26:	08 95       	ret

00000b28 <__divmodhi4>:
 b28:	97 fb       	bst	r25, 7
 b2a:	07 2e       	mov	r0, r23
 b2c:	16 f4       	brtc	.+4      	; 0xb32 <__divmodhi4+0xa>
 b2e:	00 94       	com	r0
 b30:	07 d0       	rcall	.+14     	; 0xb40 <__divmodhi4_neg1>
 b32:	77 fd       	sbrc	r23, 7
 b34:	09 d0       	rcall	.+18     	; 0xb48 <__divmodhi4_neg2>
 b36:	0e 94 80 05 	call	0xb00	; 0xb00 <__udivmodhi4>
 b3a:	07 fc       	sbrc	r0, 7
 b3c:	05 d0       	rcall	.+10     	; 0xb48 <__divmodhi4_neg2>
 b3e:	3e f4       	brtc	.+14     	; 0xb4e <__divmodhi4_exit>

00000b40 <__divmodhi4_neg1>:
 b40:	90 95       	com	r25
 b42:	81 95       	neg	r24
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	08 95       	ret

00000b48 <__divmodhi4_neg2>:
 b48:	70 95       	com	r23
 b4a:	61 95       	neg	r22
 b4c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b4e <__divmodhi4_exit>:
 b4e:	08 95       	ret

00000b50 <__udivmodsi4>:
 b50:	a1 e2       	ldi	r26, 0x21	; 33
 b52:	1a 2e       	mov	r1, r26
 b54:	aa 1b       	sub	r26, r26
 b56:	bb 1b       	sub	r27, r27
 b58:	fd 01       	movw	r30, r26
 b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__udivmodsi4_ep>

00000b5c <__udivmodsi4_loop>:
 b5c:	aa 1f       	adc	r26, r26
 b5e:	bb 1f       	adc	r27, r27
 b60:	ee 1f       	adc	r30, r30
 b62:	ff 1f       	adc	r31, r31
 b64:	a2 17       	cp	r26, r18
 b66:	b3 07       	cpc	r27, r19
 b68:	e4 07       	cpc	r30, r20
 b6a:	f5 07       	cpc	r31, r21
 b6c:	20 f0       	brcs	.+8      	; 0xb76 <__udivmodsi4_ep>
 b6e:	a2 1b       	sub	r26, r18
 b70:	b3 0b       	sbc	r27, r19
 b72:	e4 0b       	sbc	r30, r20
 b74:	f5 0b       	sbc	r31, r21

00000b76 <__udivmodsi4_ep>:
 b76:	66 1f       	adc	r22, r22
 b78:	77 1f       	adc	r23, r23
 b7a:	88 1f       	adc	r24, r24
 b7c:	99 1f       	adc	r25, r25
 b7e:	1a 94       	dec	r1
 b80:	69 f7       	brne	.-38     	; 0xb5c <__udivmodsi4_loop>
 b82:	60 95       	com	r22
 b84:	70 95       	com	r23
 b86:	80 95       	com	r24
 b88:	90 95       	com	r25
 b8a:	9b 01       	movw	r18, r22
 b8c:	ac 01       	movw	r20, r24
 b8e:	bd 01       	movw	r22, r26
 b90:	cf 01       	movw	r24, r30
 b92:	08 95       	ret

00000b94 <__umulhisi3>:
 b94:	a2 9f       	mul	r26, r18
 b96:	b0 01       	movw	r22, r0
 b98:	b3 9f       	mul	r27, r19
 b9a:	c0 01       	movw	r24, r0
 b9c:	a3 9f       	mul	r26, r19
 b9e:	70 0d       	add	r23, r0
 ba0:	81 1d       	adc	r24, r1
 ba2:	11 24       	eor	r1, r1
 ba4:	91 1d       	adc	r25, r1
 ba6:	b2 9f       	mul	r27, r18
 ba8:	70 0d       	add	r23, r0
 baa:	81 1d       	adc	r24, r1
 bac:	11 24       	eor	r1, r1
 bae:	91 1d       	adc	r25, r1
 bb0:	08 95       	ret

00000bb2 <__tablejump2__>:
 bb2:	ee 0f       	add	r30, r30
 bb4:	ff 1f       	adc	r31, r31
 bb6:	05 90       	lpm	r0, Z+
 bb8:	f4 91       	lpm	r31, Z
 bba:	e0 2d       	mov	r30, r0
 bbc:	09 94       	ijmp

00000bbe <malloc>:
 bbe:	cf 93       	push	r28
 bc0:	df 93       	push	r29
 bc2:	82 30       	cpi	r24, 0x02	; 2
 bc4:	91 05       	cpc	r25, r1
 bc6:	10 f4       	brcc	.+4      	; 0xbcc <malloc+0xe>
 bc8:	82 e0       	ldi	r24, 0x02	; 2
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <__flp>
 bd0:	f0 91 6f 01 	lds	r31, 0x016F	; 0x80016f <__flp+0x1>
 bd4:	20 e0       	ldi	r18, 0x00	; 0
 bd6:	30 e0       	ldi	r19, 0x00	; 0
 bd8:	c0 e0       	ldi	r28, 0x00	; 0
 bda:	d0 e0       	ldi	r29, 0x00	; 0
 bdc:	30 97       	sbiw	r30, 0x00	; 0
 bde:	11 f1       	breq	.+68     	; 0xc24 <malloc+0x66>
 be0:	40 81       	ld	r20, Z
 be2:	51 81       	ldd	r21, Z+1	; 0x01
 be4:	48 17       	cp	r20, r24
 be6:	59 07       	cpc	r21, r25
 be8:	c0 f0       	brcs	.+48     	; 0xc1a <malloc+0x5c>
 bea:	48 17       	cp	r20, r24
 bec:	59 07       	cpc	r21, r25
 bee:	61 f4       	brne	.+24     	; 0xc08 <malloc+0x4a>
 bf0:	82 81       	ldd	r24, Z+2	; 0x02
 bf2:	93 81       	ldd	r25, Z+3	; 0x03
 bf4:	20 97       	sbiw	r28, 0x00	; 0
 bf6:	19 f0       	breq	.+6      	; 0xbfe <malloc+0x40>
 bf8:	9b 83       	std	Y+3, r25	; 0x03
 bfa:	8a 83       	std	Y+2, r24	; 0x02
 bfc:	2b c0       	rjmp	.+86     	; 0xc54 <malloc+0x96>
 bfe:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <__flp+0x1>
 c02:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__flp>
 c06:	26 c0       	rjmp	.+76     	; 0xc54 <malloc+0x96>
 c08:	21 15       	cp	r18, r1
 c0a:	31 05       	cpc	r19, r1
 c0c:	19 f0       	breq	.+6      	; 0xc14 <malloc+0x56>
 c0e:	42 17       	cp	r20, r18
 c10:	53 07       	cpc	r21, r19
 c12:	18 f4       	brcc	.+6      	; 0xc1a <malloc+0x5c>
 c14:	9a 01       	movw	r18, r20
 c16:	be 01       	movw	r22, r28
 c18:	df 01       	movw	r26, r30
 c1a:	ef 01       	movw	r28, r30
 c1c:	02 80       	ldd	r0, Z+2	; 0x02
 c1e:	f3 81       	ldd	r31, Z+3	; 0x03
 c20:	e0 2d       	mov	r30, r0
 c22:	dc cf       	rjmp	.-72     	; 0xbdc <malloc+0x1e>
 c24:	21 15       	cp	r18, r1
 c26:	31 05       	cpc	r19, r1
 c28:	09 f1       	breq	.+66     	; 0xc6c <malloc+0xae>
 c2a:	28 1b       	sub	r18, r24
 c2c:	39 0b       	sbc	r19, r25
 c2e:	24 30       	cpi	r18, 0x04	; 4
 c30:	31 05       	cpc	r19, r1
 c32:	90 f4       	brcc	.+36     	; 0xc58 <malloc+0x9a>
 c34:	12 96       	adiw	r26, 0x02	; 2
 c36:	8d 91       	ld	r24, X+
 c38:	9c 91       	ld	r25, X
 c3a:	13 97       	sbiw	r26, 0x03	; 3
 c3c:	61 15       	cp	r22, r1
 c3e:	71 05       	cpc	r23, r1
 c40:	21 f0       	breq	.+8      	; 0xc4a <malloc+0x8c>
 c42:	fb 01       	movw	r30, r22
 c44:	93 83       	std	Z+3, r25	; 0x03
 c46:	82 83       	std	Z+2, r24	; 0x02
 c48:	04 c0       	rjmp	.+8      	; 0xc52 <malloc+0x94>
 c4a:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <__flp+0x1>
 c4e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__flp>
 c52:	fd 01       	movw	r30, r26
 c54:	32 96       	adiw	r30, 0x02	; 2
 c56:	44 c0       	rjmp	.+136    	; 0xce0 <malloc+0x122>
 c58:	fd 01       	movw	r30, r26
 c5a:	e2 0f       	add	r30, r18
 c5c:	f3 1f       	adc	r31, r19
 c5e:	81 93       	st	Z+, r24
 c60:	91 93       	st	Z+, r25
 c62:	22 50       	subi	r18, 0x02	; 2
 c64:	31 09       	sbc	r19, r1
 c66:	2d 93       	st	X+, r18
 c68:	3c 93       	st	X, r19
 c6a:	3a c0       	rjmp	.+116    	; 0xce0 <malloc+0x122>
 c6c:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <__brkval>
 c70:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <__brkval+0x1>
 c74:	23 2b       	or	r18, r19
 c76:	41 f4       	brne	.+16     	; 0xc88 <malloc+0xca>
 c78:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c7c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c80:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <__brkval+0x1>
 c84:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <__brkval>
 c88:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c8c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c90:	21 15       	cp	r18, r1
 c92:	31 05       	cpc	r19, r1
 c94:	41 f4       	brne	.+16     	; 0xca6 <malloc+0xe8>
 c96:	2d b7       	in	r18, 0x3d	; 61
 c98:	3e b7       	in	r19, 0x3e	; 62
 c9a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c9e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 ca2:	24 1b       	sub	r18, r20
 ca4:	35 0b       	sbc	r19, r21
 ca6:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <__brkval>
 caa:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <__brkval+0x1>
 cae:	e2 17       	cp	r30, r18
 cb0:	f3 07       	cpc	r31, r19
 cb2:	a0 f4       	brcc	.+40     	; 0xcdc <malloc+0x11e>
 cb4:	2e 1b       	sub	r18, r30
 cb6:	3f 0b       	sbc	r19, r31
 cb8:	28 17       	cp	r18, r24
 cba:	39 07       	cpc	r19, r25
 cbc:	78 f0       	brcs	.+30     	; 0xcdc <malloc+0x11e>
 cbe:	ac 01       	movw	r20, r24
 cc0:	4e 5f       	subi	r20, 0xFE	; 254
 cc2:	5f 4f       	sbci	r21, 0xFF	; 255
 cc4:	24 17       	cp	r18, r20
 cc6:	35 07       	cpc	r19, r21
 cc8:	48 f0       	brcs	.+18     	; 0xcdc <malloc+0x11e>
 cca:	4e 0f       	add	r20, r30
 ccc:	5f 1f       	adc	r21, r31
 cce:	50 93 6d 01 	sts	0x016D, r21	; 0x80016d <__brkval+0x1>
 cd2:	40 93 6c 01 	sts	0x016C, r20	; 0x80016c <__brkval>
 cd6:	81 93       	st	Z+, r24
 cd8:	91 93       	st	Z+, r25
 cda:	02 c0       	rjmp	.+4      	; 0xce0 <malloc+0x122>
 cdc:	e0 e0       	ldi	r30, 0x00	; 0
 cde:	f0 e0       	ldi	r31, 0x00	; 0
 ce0:	cf 01       	movw	r24, r30
 ce2:	df 91       	pop	r29
 ce4:	cf 91       	pop	r28
 ce6:	08 95       	ret

00000ce8 <free>:
 ce8:	0f 93       	push	r16
 cea:	1f 93       	push	r17
 cec:	cf 93       	push	r28
 cee:	df 93       	push	r29
 cf0:	00 97       	sbiw	r24, 0x00	; 0
 cf2:	09 f4       	brne	.+2      	; 0xcf6 <free+0xe>
 cf4:	8c c0       	rjmp	.+280    	; 0xe0e <free+0x126>
 cf6:	fc 01       	movw	r30, r24
 cf8:	32 97       	sbiw	r30, 0x02	; 2
 cfa:	13 82       	std	Z+3, r1	; 0x03
 cfc:	12 82       	std	Z+2, r1	; 0x02
 cfe:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <__flp>
 d02:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <__flp+0x1>
 d06:	01 15       	cp	r16, r1
 d08:	11 05       	cpc	r17, r1
 d0a:	81 f4       	brne	.+32     	; 0xd2c <free+0x44>
 d0c:	20 81       	ld	r18, Z
 d0e:	31 81       	ldd	r19, Z+1	; 0x01
 d10:	82 0f       	add	r24, r18
 d12:	93 1f       	adc	r25, r19
 d14:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <__brkval>
 d18:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <__brkval+0x1>
 d1c:	28 17       	cp	r18, r24
 d1e:	39 07       	cpc	r19, r25
 d20:	79 f5       	brne	.+94     	; 0xd80 <free+0x98>
 d22:	f0 93 6d 01 	sts	0x016D, r31	; 0x80016d <__brkval+0x1>
 d26:	e0 93 6c 01 	sts	0x016C, r30	; 0x80016c <__brkval>
 d2a:	71 c0       	rjmp	.+226    	; 0xe0e <free+0x126>
 d2c:	d8 01       	movw	r26, r16
 d2e:	40 e0       	ldi	r20, 0x00	; 0
 d30:	50 e0       	ldi	r21, 0x00	; 0
 d32:	ae 17       	cp	r26, r30
 d34:	bf 07       	cpc	r27, r31
 d36:	50 f4       	brcc	.+20     	; 0xd4c <free+0x64>
 d38:	12 96       	adiw	r26, 0x02	; 2
 d3a:	2d 91       	ld	r18, X+
 d3c:	3c 91       	ld	r19, X
 d3e:	13 97       	sbiw	r26, 0x03	; 3
 d40:	ad 01       	movw	r20, r26
 d42:	21 15       	cp	r18, r1
 d44:	31 05       	cpc	r19, r1
 d46:	09 f1       	breq	.+66     	; 0xd8a <free+0xa2>
 d48:	d9 01       	movw	r26, r18
 d4a:	f3 cf       	rjmp	.-26     	; 0xd32 <free+0x4a>
 d4c:	9d 01       	movw	r18, r26
 d4e:	da 01       	movw	r26, r20
 d50:	33 83       	std	Z+3, r19	; 0x03
 d52:	22 83       	std	Z+2, r18	; 0x02
 d54:	60 81       	ld	r22, Z
 d56:	71 81       	ldd	r23, Z+1	; 0x01
 d58:	86 0f       	add	r24, r22
 d5a:	97 1f       	adc	r25, r23
 d5c:	82 17       	cp	r24, r18
 d5e:	93 07       	cpc	r25, r19
 d60:	69 f4       	brne	.+26     	; 0xd7c <free+0x94>
 d62:	ec 01       	movw	r28, r24
 d64:	28 81       	ld	r18, Y
 d66:	39 81       	ldd	r19, Y+1	; 0x01
 d68:	26 0f       	add	r18, r22
 d6a:	37 1f       	adc	r19, r23
 d6c:	2e 5f       	subi	r18, 0xFE	; 254
 d6e:	3f 4f       	sbci	r19, 0xFF	; 255
 d70:	31 83       	std	Z+1, r19	; 0x01
 d72:	20 83       	st	Z, r18
 d74:	8a 81       	ldd	r24, Y+2	; 0x02
 d76:	9b 81       	ldd	r25, Y+3	; 0x03
 d78:	93 83       	std	Z+3, r25	; 0x03
 d7a:	82 83       	std	Z+2, r24	; 0x02
 d7c:	45 2b       	or	r20, r21
 d7e:	29 f4       	brne	.+10     	; 0xd8a <free+0xa2>
 d80:	f0 93 6f 01 	sts	0x016F, r31	; 0x80016f <__flp+0x1>
 d84:	e0 93 6e 01 	sts	0x016E, r30	; 0x80016e <__flp>
 d88:	42 c0       	rjmp	.+132    	; 0xe0e <free+0x126>
 d8a:	13 96       	adiw	r26, 0x03	; 3
 d8c:	fc 93       	st	X, r31
 d8e:	ee 93       	st	-X, r30
 d90:	12 97       	sbiw	r26, 0x02	; 2
 d92:	ed 01       	movw	r28, r26
 d94:	49 91       	ld	r20, Y+
 d96:	59 91       	ld	r21, Y+
 d98:	9e 01       	movw	r18, r28
 d9a:	24 0f       	add	r18, r20
 d9c:	35 1f       	adc	r19, r21
 d9e:	e2 17       	cp	r30, r18
 da0:	f3 07       	cpc	r31, r19
 da2:	71 f4       	brne	.+28     	; 0xdc0 <free+0xd8>
 da4:	80 81       	ld	r24, Z
 da6:	91 81       	ldd	r25, Z+1	; 0x01
 da8:	84 0f       	add	r24, r20
 daa:	95 1f       	adc	r25, r21
 dac:	02 96       	adiw	r24, 0x02	; 2
 dae:	11 96       	adiw	r26, 0x01	; 1
 db0:	9c 93       	st	X, r25
 db2:	8e 93       	st	-X, r24
 db4:	82 81       	ldd	r24, Z+2	; 0x02
 db6:	93 81       	ldd	r25, Z+3	; 0x03
 db8:	13 96       	adiw	r26, 0x03	; 3
 dba:	9c 93       	st	X, r25
 dbc:	8e 93       	st	-X, r24
 dbe:	12 97       	sbiw	r26, 0x02	; 2
 dc0:	e0 e0       	ldi	r30, 0x00	; 0
 dc2:	f0 e0       	ldi	r31, 0x00	; 0
 dc4:	d8 01       	movw	r26, r16
 dc6:	12 96       	adiw	r26, 0x02	; 2
 dc8:	8d 91       	ld	r24, X+
 dca:	9c 91       	ld	r25, X
 dcc:	13 97       	sbiw	r26, 0x03	; 3
 dce:	00 97       	sbiw	r24, 0x00	; 0
 dd0:	19 f0       	breq	.+6      	; 0xdd8 <free+0xf0>
 dd2:	f8 01       	movw	r30, r16
 dd4:	8c 01       	movw	r16, r24
 dd6:	f6 cf       	rjmp	.-20     	; 0xdc4 <free+0xdc>
 dd8:	8d 91       	ld	r24, X+
 dda:	9c 91       	ld	r25, X
 ddc:	98 01       	movw	r18, r16
 dde:	2e 5f       	subi	r18, 0xFE	; 254
 de0:	3f 4f       	sbci	r19, 0xFF	; 255
 de2:	82 0f       	add	r24, r18
 de4:	93 1f       	adc	r25, r19
 de6:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <__brkval>
 dea:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <__brkval+0x1>
 dee:	28 17       	cp	r18, r24
 df0:	39 07       	cpc	r19, r25
 df2:	69 f4       	brne	.+26     	; 0xe0e <free+0x126>
 df4:	30 97       	sbiw	r30, 0x00	; 0
 df6:	29 f4       	brne	.+10     	; 0xe02 <free+0x11a>
 df8:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <__flp+0x1>
 dfc:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__flp>
 e00:	02 c0       	rjmp	.+4      	; 0xe06 <free+0x11e>
 e02:	13 82       	std	Z+3, r1	; 0x03
 e04:	12 82       	std	Z+2, r1	; 0x02
 e06:	10 93 6d 01 	sts	0x016D, r17	; 0x80016d <__brkval+0x1>
 e0a:	00 93 6c 01 	sts	0x016C, r16	; 0x80016c <__brkval>
 e0e:	df 91       	pop	r29
 e10:	cf 91       	pop	r28
 e12:	1f 91       	pop	r17
 e14:	0f 91       	pop	r16
 e16:	08 95       	ret

00000e18 <__do_global_dtors>:
 e18:	10 e0       	ldi	r17, 0x00	; 0
 e1a:	c5 e3       	ldi	r28, 0x35	; 53
 e1c:	d0 e0       	ldi	r29, 0x00	; 0
 e1e:	04 c0       	rjmp	.+8      	; 0xe28 <__do_global_dtors+0x10>
 e20:	fe 01       	movw	r30, r28
 e22:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__tablejump2__>
 e26:	21 96       	adiw	r28, 0x01	; 1
 e28:	c6 33       	cpi	r28, 0x36	; 54
 e2a:	d1 07       	cpc	r29, r17
 e2c:	c9 f7       	brne	.-14     	; 0xe20 <__do_global_dtors+0x8>
 e2e:	f8 94       	cli

00000e30 <__stop_program>:
 e30:	ff cf       	rjmp	.-2      	; 0xe30 <__stop_program>
