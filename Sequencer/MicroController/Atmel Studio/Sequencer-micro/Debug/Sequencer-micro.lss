
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000e9a  00000f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000153  00800126  00800126  00000f54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009ad8  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ac8  00000000  00000000  0000af34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002531  00000000  00000000  0000d9fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ec  00000000  00000000  0000ff30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017cb  00000000  00000000  0001091c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a39  00000000  00000000  000120e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  00013b20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_11>
  30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_12>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	72 01       	movw	r14, r4

0000006a <__ctors_end>:
  6a:	a5 01       	movw	r20, r10

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ea e9       	ldi	r30, 0x9A	; 154
  80:	fe e0       	ldi	r31, 0x0E	; 14
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a6 32       	cpi	r26, 0x26	; 38
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	22 e0       	ldi	r18, 0x02	; 2
  90:	a6 e2       	ldi	r26, 0x26	; 38
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a9 37       	cpi	r26, 0x79	; 121
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 23 01 	call	0x246	; 0x246 <main>
  b8:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_ZN7ButtonsC1Ev>:


#include "Buttons.h"

// default constructor
Buttons::Buttons()
  c0:	fc 01       	movw	r30, r24
{
	//Initialize states to zero
	currentState = 0;
  c2:	11 82       	std	Z+1, r1	; 0x01
  c4:	10 82       	st	Z, r1
	previousState = 0;
  c6:	13 82       	std	Z+3, r1	; 0x03
  c8:	12 82       	std	Z+2, r1	; 0x02
	
	//There's nothing to toggle at creation
	toggledValues = 0;
  ca:	15 82       	std	Z+5, r1	; 0x05
  cc:	14 82       	std	Z+4, r1	; 0x04
  ce:	08 95       	ret

000000d0 <_ZN12RotarySwitchC1Ev>:


#include "RotarySwitch.h"

// default constructor
RotarySwitch::RotarySwitch()
  d0:	08 95       	ret

000000d2 <_ZN8SevenSegC1Eh>:
		}
		
		//Get bitmaps
		bitMaps[i] = sevenSegBitMap[ numbersToPrint[i] ];
	}
}
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ec 01       	movw	r28, r24
  d8:	6c 83       	std	Y+4, r22	; 0x04
  da:	86 2f       	mov	r24, r22
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 c8 01 	call	0x390	; 0x390 <_Znaj>
  e2:	99 83       	std	Y+1, r25	; 0x01
  e4:	88 83       	st	Y, r24
  e6:	8c 81       	ldd	r24, Y+4	; 0x04
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 c8 01 	call	0x390	; 0x390 <_Znaj>
  ee:	9b 83       	std	Y+3, r25	; 0x03
  f0:	8a 83       	std	Y+2, r24	; 0x02
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <_ZN8SevenSegD1Ev>:

// default destructor
SevenSeg::~SevenSeg()
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	ec 01       	movw	r28, r24
{
	delete numbersToPrint;
  fe:	88 81       	ld	r24, Y
 100:	99 81       	ldd	r25, Y+1	; 0x01
 102:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZdlPv>
	delete bitMaps;
 106:	8a 81       	ldd	r24, Y+2	; 0x02
 108:	9b 81       	ldd	r25, Y+3	; 0x03
 10a:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZdlPv>
} //~SevenSeg
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <__vector_14>:

void disableShifting( void )
{
	//TIMSK2 is the TC2 Interrupt Mask Register
	//We will disable interrupt on compare match with OCR2A
	TIMSK2 &= ~(1 << OCIE2A);
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
 136:	8d e6       	ldi	r24, 0x6D	; 109
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN5Timer14incrementTimerEv>
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_12>:
 160:	78 94       	sei
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <_Z20setUpTimerInterruptsv>:
 176:	ee e6       	ldi	r30, 0x6E	; 110
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	80 83       	st	Z, r24
 180:	89 e1       	ldi	r24, 0x19	; 25
 182:	87 bd       	out	0x27, r24	; 39
 184:	92 e0       	ldi	r25, 0x02	; 2
 186:	94 bd       	out	0x24, r25	; 36
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	85 bd       	out	0x25, r24	; 37
 18c:	ef e6       	ldi	r30, 0x6F	; 111
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	86 60       	ori	r24, 0x06	; 6
 194:	80 83       	st	Z, r24
 196:	20 e4       	ldi	r18, 0x40	; 64
 198:	36 e0       	ldi	r19, 0x06	; 6
 19a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 19e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1aa:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1ae:	89 e0       	ldi	r24, 0x09	; 9
 1b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1ba:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 1c4:	78 94       	sei
 1c6:	08 95       	ret

000001c8 <_Z25disableTimerOneInterruptsv>:
}

void disableTimerOneInterrupts( void )
{
	TIMSK1 &= ~((1 << OCIE1A) | (1 << OCIE2B));
 1c8:	ef e6       	ldi	r30, 0x6F	; 111
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	89 7f       	andi	r24, 0xF9	; 249
 1d0:	80 83       	st	Z, r24
 1d2:	08 95       	ret

000001d4 <__vector_11>:
ISR( TIMER1_COMPB_vect, ISR_NOBLOCK)
{
}

ISR( TIMER1_COMPA_vect, ISR_NOBLOCK )
{
 1d4:	78 94       	sei
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	disableTimerOneInterrupts();
 1f8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z25disableTimerOneInterruptsv>
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <_Z11triggerTaskv>:
//TASKS
///////////////////////////////////////////

//Task for triggering
void triggerTask( void ){
	instumentTrigger.run();
 21e:	86 e2       	ldi	r24, 0x26	; 38
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN17InstrumentTrigger3runEv>
 226:	08 95       	ret

00000228 <_Z14triggerSetHighv>:
}
void triggerSetHigh( void ){
	instumentTrigger.setHigh();
 228:	86 e2       	ldi	r24, 0x26	; 38
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN17InstrumentTrigger7setHighEv>
 230:	08 95       	ret

00000232 <_Z13triggerSetLowv>:
}
void triggerSetLow( void ){
	instumentTrigger.setLow();
 232:	86 e2       	ldi	r24, 0x26	; 38
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN17InstrumentTrigger6setLowEv>
 23a:	08 95       	ret

0000023c <_Z13sequencerTaskv>:
}
void sequencerTask( void ){
	sequencer.runDebug();
 23c:	84 e6       	ldi	r24, 0x64	; 100
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_ZN9Sequencer8runDebugEv>
 244:	08 95       	ret

00000246 <main>:
}

int main(void)
{	
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	c2 54       	subi	r28, 0x42	; 66
 250:	d1 09       	sbc	r29, r1
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61

	//Setup interrupts to get the timer to work
	setUpTimerInterrupts();
 25c:	0e 94 bb 00 	call	0x176	; 0x176 <_Z20setUpTimerInterruptsv>
	
	//Initialize task manager
	TaskManager taskManager( timer );
 260:	6d e6       	ldi	r22, 0x6D	; 109
 262:	72 e0       	ldi	r23, 0x02	; 2
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN11TaskManagerC1ER5Timer>

	sequencer.loadInstrumentTriggerReference( instumentTrigger );
 26c:	66 e2       	ldi	r22, 0x26	; 38
 26e:	71 e0       	ldi	r23, 0x01	; 1
 270:	84 e6       	ldi	r24, 0x64	; 100
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN9Sequencer30loadInstrumentTriggerReferenceER17InstrumentTrigger>

	uint16_t testSequence [16] = {
		0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555, 
		0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555,0x5555
	};
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	e6 e0       	ldi	r30, 0x06	; 6
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	de 01       	movw	r26, r28
 280:	93 96       	adiw	r26, 0x23	; 35
 282:	01 90       	ld	r0, Z+
 284:	0d 92       	st	X+, r0
 286:	8a 95       	dec	r24
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x3c>
	sequencer.loadSequence(testSequence, 16);
 28a:	40 e1       	ldi	r20, 0x10	; 16
 28c:	be 01       	movw	r22, r28
 28e:	6d 5d       	subi	r22, 0xDD	; 221
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	84 e6       	ldi	r24, 0x64	; 100
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN9Sequencer12loadSequenceEPjh>
	
	timer.reset();
 29a:	8d e6       	ldi	r24, 0x6D	; 109
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_ZN5Timer5resetEv>
	//Add tasks with priority 0-250. 0 is real time. 251 never runs.
	//taskManager.addTask( triggerTask,  4);
	//taskManager.addTask( counterTask, 128);
	taskManager.addTask( triggerTask, 4 );
 2a2:	44 e0       	ldi	r20, 0x04	; 4
 2a4:	6f e0       	ldi	r22, 0x0F	; 15
 2a6:	71 e0       	ldi	r23, 0x01	; 1
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( triggerSetLow, 0 );
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	69 e1       	ldi	r22, 0x19	; 25
 2b4:	71 e0       	ldi	r23, 0x01	; 1
 2b6:	ce 01       	movw	r24, r28
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( triggerSetHigh, 4);
 2be:	44 e0       	ldi	r20, 0x04	; 4
 2c0:	64 e1       	ldi	r22, 0x14	; 20
 2c2:	71 e0       	ldi	r23, 0x01	; 1
 2c4:	ce 01       	movw	r24, r28
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( sequencerTask, 32);
 2cc:	40 e2       	ldi	r20, 0x20	; 32
 2ce:	6e e1       	ldi	r22, 0x1E	; 30
 2d0:	71 e0       	ldi	r23, 0x01	; 1
 2d2:	ce 01       	movw	r24, r28
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_ZN11TaskManager7addTaskEPFvvEh>
	
    while (1) 
    {
		taskManager.runTasks();
 2da:	ce 01       	movw	r24, r28
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN11TaskManager8runTasksEv>
 2e2:	fb cf       	rjmp	.-10     	; 0x2da <main+0x94>

000002e4 <_GLOBAL__sub_I_timer>:
#include "Tasks/PrintOutput.h"
#include "Tasks/RotaryEncoder.h"
#include "Tasks/InstrumentTrigger.h"

//Define a pointer to a timer object.
Timer timer;
 2e4:	8d e6       	ldi	r24, 0x6D	; 109
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN5TimerC1Ev>

//Digital input task object. Shifts in input and sorts it.
DigitalInput digitalInput;
 2ec:	84 e5       	ldi	r24, 0x54	; 84
 2ee:	92 e0       	ldi	r25, 0x02	; 2
 2f0:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN12DigitalInputC1Ev>

//Input poll task object latches in the input at regular intervals.
InputPoll inputPoll( timer, digitalInput );
 2f4:	44 e5       	ldi	r20, 0x54	; 84
 2f6:	52 e0       	ldi	r21, 0x02	; 2
 2f8:	6d e6       	ldi	r22, 0x6D	; 109
 2fa:	72 e0       	ldi	r23, 0x02	; 2
 2fc:	8c e4       	ldi	r24, 0x4C	; 76
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN9InputPollC1ER5TimerR12DigitalInput>

//Acts the same as above, but operates at higher frequency for the encoders
RotaryEncoder rotaryEncoders( timer, digitalInput );
 304:	44 e5       	ldi	r20, 0x54	; 84
 306:	52 e0       	ldi	r21, 0x02	; 2
 308:	6d e6       	ldi	r22, 0x6D	; 109
 30a:	72 e0       	ldi	r23, 0x02	; 2
 30c:	8b e3       	ldi	r24, 0x3B	; 59
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN13RotaryEncoderC1ER5TimerR12DigitalInput>

//Task object that deals with the sequencer. 
Sequencer sequencer(timer, digitalInput, rotaryEncoders );
 314:	2b e3       	ldi	r18, 0x3B	; 59
 316:	32 e0       	ldi	r19, 0x02	; 2
 318:	44 e5       	ldi	r20, 0x54	; 84
 31a:	52 e0       	ldi	r21, 0x02	; 2
 31c:	6d e6       	ldi	r22, 0x6D	; 109
 31e:	72 e0       	ldi	r23, 0x02	; 2
 320:	84 e6       	ldi	r24, 0x64	; 100
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder>

//Task object for printing to output
PrintOutput printOutput( timer, sequencer );
 328:	44 e6       	ldi	r20, 0x64	; 100
 32a:	51 e0       	ldi	r21, 0x01	; 1
 32c:	6d e6       	ldi	r22, 0x6D	; 109
 32e:	72 e0       	ldi	r23, 0x02	; 2
 330:	83 e4       	ldi	r24, 0x43	; 67
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN11PrintOutputC1ER5TimerR9Sequencer>

//Task object for instrument trigger
InstrumentTrigger instumentTrigger( timer, sequencer );
 338:	44 e6       	ldi	r20, 0x64	; 100
 33a:	51 e0       	ldi	r21, 0x01	; 1
 33c:	6d e6       	ldi	r22, 0x6D	; 109
 33e:	72 e0       	ldi	r23, 0x02	; 2
 340:	86 e2       	ldi	r24, 0x26	; 38
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 21 03 	call	0x642	; 0x642 <_ZN17InstrumentTriggerC1ER5TimerR9Sequencer>
 348:	08 95       	ret

0000034a <_GLOBAL__sub_D_timer>:
 34a:	86 e2       	ldi	r24, 0x26	; 38
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN17InstrumentTriggerD1Ev>

//Task object that deals with the sequencer. 
Sequencer sequencer(timer, digitalInput, rotaryEncoders );

//Task object for printing to output
PrintOutput printOutput( timer, sequencer );
 352:	83 e4       	ldi	r24, 0x43	; 67
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN11PrintOutputD1Ev>

//Acts the same as above, but operates at higher frequency for the encoders
RotaryEncoder rotaryEncoders( timer, digitalInput );

//Task object that deals with the sequencer. 
Sequencer sequencer(timer, digitalInput, rotaryEncoders );
 35a:	84 e6       	ldi	r24, 0x64	; 100
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN9SequencerD1Ev>

//Input poll task object latches in the input at regular intervals.
InputPoll inputPoll( timer, digitalInput );

//Acts the same as above, but operates at higher frequency for the encoders
RotaryEncoder rotaryEncoders( timer, digitalInput );
 362:	8b e3       	ldi	r24, 0x3B	; 59
 364:	92 e0       	ldi	r25, 0x02	; 2
 366:	0e 94 bc 04 	call	0x978	; 0x978 <_ZN13RotaryEncoderD1Ev>

//Digital input task object. Shifts in input and sorts it.
DigitalInput digitalInput;

//Input poll task object latches in the input at regular intervals.
InputPoll inputPoll( timer, digitalInput );
 36a:	8c e4       	ldi	r24, 0x4C	; 76
 36c:	92 e0       	ldi	r25, 0x02	; 2
 36e:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9InputPollD1Ev>

//Define a pointer to a timer object.
Timer timer;

//Digital input task object. Shifts in input and sorts it.
DigitalInput digitalInput;
 372:	84 e5       	ldi	r24, 0x54	; 84
 374:	92 e0       	ldi	r25, 0x02	; 2
 376:	0e 94 0c 03 	call	0x618	; 0x618 <_ZN12DigitalInputD1Ev>
#include "Tasks/PrintOutput.h"
#include "Tasks/RotaryEncoder.h"
#include "Tasks/InstrumentTrigger.h"

//Define a pointer to a timer object.
Timer timer;
 37a:	8d e6       	ldi	r24, 0x6D	; 109
 37c:	92 e0       	ldi	r25, 0x02	; 2
 37e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN5TimerD1Ev>
 382:	08 95       	ret

00000384 <_Znwj>:

 #include "helperFunctions.h"

 void * operator new(size_t size)
 {
	 return malloc(size);
 384:	0e 94 13 06 	call	0xc26	; 0xc26 <malloc>
 }
 388:	08 95       	ret

0000038a <_ZdlPv>:

 void operator delete(void * ptr)
 {
	 free(ptr);
 38a:	0e 94 a8 06 	call	0xd50	; 0xd50 <free>
 38e:	08 95       	ret

00000390 <_Znaj>:
 }

 void * operator new[](size_t size)
 {
	 return malloc(size);
 390:	0e 94 13 06 	call	0xc26	; 0xc26 <malloc>
 }
 394:	08 95       	ret

00000396 <_ZN3Pin17setDirectionInputEv>:
void Pin::write( uint8_t set )
{
	if ( set != LOW ){
		this->setHigh();
		} else {
		this->setLow();
 396:	dc 01       	movw	r26, r24
 398:	ed 91       	ld	r30, X+
 39a:	fc 91       	ld	r31, X
 39c:	11 97       	sbiw	r26, 0x01	; 1
 39e:	90 81       	ld	r25, Z
 3a0:	16 96       	adiw	r26, 0x06	; 6
 3a2:	8c 91       	ld	r24, X
 3a4:	80 95       	com	r24
 3a6:	89 23       	and	r24, r25
 3a8:	80 83       	st	Z, r24
 3aa:	08 95       	ret

000003ac <_ZN3Pin7setHighEv>:
 3ac:	dc 01       	movw	r26, r24
 3ae:	12 96       	adiw	r26, 0x02	; 2
 3b0:	ed 91       	ld	r30, X+
 3b2:	fc 91       	ld	r31, X
 3b4:	13 97       	sbiw	r26, 0x03	; 3
 3b6:	90 81       	ld	r25, Z
 3b8:	16 96       	adiw	r26, 0x06	; 6
 3ba:	8c 91       	ld	r24, X
 3bc:	89 2b       	or	r24, r25
 3be:	80 83       	st	Z, r24
 3c0:	08 95       	ret

000003c2 <_ZN3Pin6setLowEv>:
 3c2:	dc 01       	movw	r26, r24
 3c4:	12 96       	adiw	r26, 0x02	; 2
 3c6:	ed 91       	ld	r30, X+
 3c8:	fc 91       	ld	r31, X
 3ca:	13 97       	sbiw	r26, 0x03	; 3
 3cc:	90 81       	ld	r25, Z
 3ce:	16 96       	adiw	r26, 0x06	; 6
 3d0:	8c 91       	ld	r24, X
 3d2:	80 95       	com	r24
 3d4:	89 23       	and	r24, r25
 3d6:	80 83       	st	Z, r24
 3d8:	08 95       	ret

000003da <_ZN3Pin18setDirectionOutputEv>:
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ec 01       	movw	r28, r24
 3e0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN3Pin6setLowEv>
 3e4:	e8 81       	ld	r30, Y
 3e6:	f9 81       	ldd	r31, Y+1	; 0x01
 3e8:	90 81       	ld	r25, Z
 3ea:	8e 81       	ldd	r24, Y+6	; 0x06
 3ec:	89 2b       	or	r24, r25
 3ee:	80 83       	st	Z, r24
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <_ZN3PinC1EhPVhh>:
 3f6:	fc 01       	movw	r30, r24
 3f8:	ca 01       	movw	r24, r20
 3fa:	02 97       	sbiw	r24, 0x02	; 2
 3fc:	95 83       	std	Z+5, r25	; 0x05
 3fe:	84 83       	std	Z+4, r24	; 0x04
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	80 83       	st	Z, r24
 406:	53 83       	std	Z+3, r21	; 0x03
 408:	42 83       	std	Z+2, r20	; 0x02
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40e:	88 0f       	add	r24, r24
 410:	6a 95       	dec	r22
 412:	ea f7       	brpl	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 414:	86 83       	std	Z+6, r24	; 0x06
 416:	21 30       	cpi	r18, 0x01	; 1
 418:	21 f4       	brne	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41a:	cf 01       	movw	r24, r30
 41c:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN3Pin18setDirectionOutputEv>
 420:	08 95       	ret
 422:	cf 01       	movw	r24, r30
 424:	0e 94 cb 01 	call	0x396	; 0x396 <_ZN3Pin17setDirectionInputEv>
 428:	08 95       	ret

0000042a <_ZN3PinD1Ev>:
{
	*port_register &= ~pinNumber;
}

// default destructor
Pin::~Pin()
 42a:	08 95       	ret

0000042c <_ZN13ShiftRegisterC1Ev>:

}

void ShiftRegister::getTimerReference( Timer & ptr )
{
	timer = &ptr;
 42c:	08 95       	ret

0000042e <_ZN13ShiftRegister11singleShiftEv>:
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	ec 01       	movw	r28, r24
 434:	8a 81       	ldd	r24, Y+2	; 0x02
 436:	9b 81       	ldd	r25, Y+3	; 0x03
 438:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_ZN3Pin7setHighEv>
 43c:	88 81       	ld	r24, Y
 43e:	99 81       	ldd	r25, Y+1	; 0x01
 440:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN5Timer8wait_1usEv>
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	9b 81       	ldd	r25, Y+3	; 0x03
 448:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN3Pin6setLowEv>
 44c:	88 81       	ld	r24, Y
 44e:	99 81       	ldd	r25, Y+1	; 0x01
 450:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN5Timer8wait_1usEv>
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <_ZN13ShiftRegister5latchEv>:
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	ec 01       	movw	r28, r24
 460:	8c 81       	ldd	r24, Y+4	; 0x04
 462:	9d 81       	ldd	r25, Y+5	; 0x05
 464:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_ZN3Pin7setHighEv>
 468:	88 81       	ld	r24, Y
 46a:	99 81       	ldd	r25, Y+1	; 0x01
 46c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN5Timer8wait_1usEv>
 470:	8c 81       	ldd	r24, Y+4	; 0x04
 472:	9d 81       	ldd	r25, Y+5	; 0x05
 474:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN3Pin6setLowEv>
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <_ZN13ShiftRegisterD1Ev>:
} //getTimerReference

// default destructor
ShiftRegister::~ShiftRegister()
 47e:	08 95       	ret

00000480 <_ZN18ShiftRegister_PISOC1Ev>:
}

uint8_t ShiftRegister_PISO::readByte( void )
{
	return input_byte;
}
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ec 01       	movw	r28, r24
 486:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN13ShiftRegisterC1Ev>
 48a:	19 86       	std	Y+9, r1	; 0x09
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <_ZN18ShiftRegister_PISOD1Ev>:
// default destructor
ShiftRegister_PISO::~ShiftRegister_PISO()
 492:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN13ShiftRegisterD1Ev>
 496:	08 95       	ret

00000498 <_ZN18ShiftRegister_SIPOC1Eh>:

}

void ShiftRegister_SIPO::loadByte( uint8_t byteToLoad )
{
	output_byte = byteToLoad;
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	ec 01       	movw	r28, r24
 4a0:	16 2f       	mov	r17, r22
 4a2:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN13ShiftRegisterC1Ev>
 4a6:	18 8a       	std	Y+16, r1	; 0x10
 4a8:	81 2f       	mov	r24, r17
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 c8 01 	call	0x390	; 0x390 <_Znaj>
 4b0:	9d 87       	std	Y+13, r25	; 0x0d
 4b2:	8c 87       	std	Y+12, r24	; 0x0c
 4b4:	1e 87       	std	Y+14, r17	; 0x0e
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	08 95       	ret

000004be <_ZN18ShiftRegister_SIPO9shiftBitsEv>:
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ec 01       	movw	r28, r24
 4c8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ca:	9d 81       	ldd	r25, Y+5	; 0x05
 4cc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN3Pin6setLowEv>
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	9b 81       	ldd	r25, Y+3	; 0x03
 4d4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN3Pin6setLowEv>
 4d8:	8e 81       	ldd	r24, Y+6	; 0x06
 4da:	9f 81       	ldd	r25, Y+7	; 0x07
 4dc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN3Pin6setLowEv>
 4e0:	88 81       	ld	r24, Y
 4e2:	99 81       	ldd	r25, Y+1	; 0x01
 4e4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN5Timer8wait_1usEv>
 4e8:	00 e0       	ldi	r16, 0x00	; 0
 4ea:	10 e0       	ldi	r17, 0x00	; 0
 4ec:	28 89       	ldd	r18, Y+16	; 0x10
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	00 2e       	mov	r0, r16
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x3a>
 4f4:	35 95       	asr	r19
 4f6:	27 95       	ror	r18
 4f8:	0a 94       	dec	r0
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x36>
 4fc:	20 ff       	sbrs	r18, 0
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x4c>
 500:	8e 81       	ldd	r24, Y+6	; 0x06
 502:	9f 81       	ldd	r25, Y+7	; 0x07
 504:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_ZN3Pin7setHighEv>
 508:	04 c0       	rjmp	.+8      	; 0x512 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x54>
 50a:	8e 81       	ldd	r24, Y+6	; 0x06
 50c:	9f 81       	ldd	r25, Y+7	; 0x07
 50e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN3Pin6setLowEv>
 512:	88 81       	ld	r24, Y
 514:	99 81       	ldd	r25, Y+1	; 0x01
 516:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN5Timer8wait_1usEv>
 51a:	ce 01       	movw	r24, r28
 51c:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN13ShiftRegister11singleShiftEv>
 520:	0f 5f       	subi	r16, 0xFF	; 255
 522:	1f 4f       	sbci	r17, 0xFF	; 255
 524:	08 30       	cpi	r16, 0x08	; 8
 526:	11 05       	cpc	r17, r1
 528:	09 f7       	brne	.-62     	; 0x4ec <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x2e>
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	08 95       	ret

00000534 <_ZN18ShiftRegister_SIPO9shiftByteEv>:
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	ec 01       	movw	r28, r24
 53a:	19 86       	std	Y+9, r1	; 0x09
 53c:	8f 85       	ldd	r24, Y+15	; 0x0f
 53e:	ec 85       	ldd	r30, Y+12	; 0x0c
 540:	fd 85       	ldd	r31, Y+13	; 0x0d
 542:	e8 0f       	add	r30, r24
 544:	f1 1d       	adc	r31, r1
 546:	80 81       	ld	r24, Z
 548:	88 8b       	std	Y+16, r24	; 0x10
 54a:	ce 01       	movw	r24, r28
 54c:	0e 94 5f 02 	call	0x4be	; 0x4be <_ZN18ShiftRegister_SIPO9shiftBitsEv>
 550:	8f 85       	ldd	r24, Y+15	; 0x0f
 552:	8f 5f       	subi	r24, 0xFF	; 255
 554:	8f 87       	std	Y+15, r24	; 0x0f
 556:	9e 85       	ldd	r25, Y+14	; 0x0e
 558:	89 17       	cp	r24, r25
 55a:	28 f0       	brcs	.+10     	; 0x566 <_ZN18ShiftRegister_SIPO9shiftByteEv+0x32>
 55c:	1f 86       	std	Y+15, r1	; 0x0f
 55e:	1a 86       	std	Y+10, r1	; 0x0a
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	89 87       	std	Y+9, r24	; 0x09
 564:	8b 87       	std	Y+11, r24	; 0x0b
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <_ZN18ShiftRegister_SIPOD1Ev>:
}

// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
 56c:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN13ShiftRegisterD1Ev>
 570:	08 95       	ret

00000572 <_ZN12DigitalInputC1Ev>:
							   (inputBytes[BUTTONS_INPUT_LOW_BYTE]) );
	
		//Finished sorting the input data
		sortData = false;
	} 
}
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	ec 01       	movw	r28, r24
 57c:	0e 94 40 02 	call	0x480	; 0x480 <_ZN18ShiftRegister_PISOC1Ev>
 580:	1a 86       	std	Y+10, r1	; 0x0a
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	8b 87       	std	Y+11, r24	; 0x0b
 586:	18 8e       	std	Y+24, r1	; 0x18
 588:	1f 8a       	std	Y+23, r1	; 0x17
 58a:	87 e0       	ldi	r24, 0x07	; 7
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 592:	8c 01       	movw	r16, r24
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	45 e2       	ldi	r20, 0x25	; 37
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN3PinC1EhPVhh>
 5a0:	1f 83       	std	Y+7, r17	; 0x07
 5a2:	0e 83       	std	Y+6, r16	; 0x06
 5a4:	87 e0       	ldi	r24, 0x07	; 7
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 5ac:	8c 01       	movw	r16, r24
 5ae:	21 e0       	ldi	r18, 0x01	; 1
 5b0:	45 e2       	ldi	r20, 0x25	; 37
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN3PinC1EhPVhh>
 5ba:	1d 83       	std	Y+5, r17	; 0x05
 5bc:	0c 83       	std	Y+4, r16	; 0x04
 5be:	87 e0       	ldi	r24, 0x07	; 7
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 5c6:	8c 01       	movw	r16, r24
 5c8:	21 e0       	ldi	r18, 0x01	; 1
 5ca:	45 e2       	ldi	r20, 0x25	; 37
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	62 e0       	ldi	r22, 0x02	; 2
 5d0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN3PinC1EhPVhh>
 5d4:	1b 83       	std	Y+3, r17	; 0x03
 5d6:	0a 83       	std	Y+2, r16	; 0x02
 5d8:	86 e0       	ldi	r24, 0x06	; 6
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 5e0:	8c 01       	movw	r16, r24
 5e2:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN7ButtonsC1Ev>
 5e6:	1a 8b       	std	Y+18, r17	; 0x12
 5e8:	09 8b       	std	Y+17, r16	; 0x11
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 5f2:	8c 01       	movw	r16, r24
 5f4:	0e 94 68 00 	call	0xd0	; 0xd0 <_ZN12RotarySwitchC1Ev>
 5f8:	1c 8b       	std	Y+20, r17	; 0x14
 5fa:	0b 8b       	std	Y+19, r16	; 0x13
 5fc:	86 e0       	ldi	r24, 0x06	; 6
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 604:	8c 01       	movw	r16, r24
 606:	0e 94 68 00 	call	0xd0	; 0xd0 <_ZN12RotarySwitchC1Ev>
 60a:	1e 8b       	std	Y+22, r17	; 0x16
 60c:	0d 8b       	std	Y+21, r16	; 0x15
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	08 95       	ret

00000618 <_ZN12DigitalInputD1Ev>:

// default destructor
DigitalInput::~DigitalInput()
 618:	0e 94 49 02 	call	0x492	; 0x492 <_ZN18ShiftRegister_PISOD1Ev>
 61c:	08 95       	ret

0000061e <_ZN9InputPollC1ER5TimerR12DigitalInput>:
			
		//Update time stamp
		timeStamp = timer->millis();
	}

}
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	ec 01       	movw	r28, r24
 624:	cb 01       	movw	r24, r22
 626:	59 83       	std	Y+1, r21	; 0x01
 628:	48 83       	st	Y, r20
 62a:	7b 83       	std	Y+3, r23	; 0x03
 62c:	6a 83       	std	Y+2, r22	; 0x02
 62e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_ZN5Timer6millisEv>
 632:	6c 83       	std	Y+4, r22	; 0x04
 634:	7d 83       	std	Y+5, r23	; 0x05
 636:	8e 83       	std	Y+6, r24	; 0x06
 638:	9f 83       	std	Y+7, r25	; 0x07
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <_ZN9InputPollD1Ev>:


InputPoll::~InputPoll()
 640:	08 95       	ret

00000642 <_ZN17InstrumentTriggerC1ER5TimerR9Sequencer>:
		}
	}
}

void InstrumentTrigger::buildOutputBuffer( void )
{
 642:	ef 92       	push	r14
 644:	ff 92       	push	r15
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	ec 01       	movw	r28, r24
 650:	7b 01       	movw	r14, r22
 652:	8a 01       	movw	r16, r20
 654:	62 e0       	ldi	r22, 0x02	; 2
 656:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN18ShiftRegister_SIPOC1Eh>
 65a:	fe 8a       	std	Y+22, r15	; 0x16
 65c:	ed 8a       	std	Y+21, r14	; 0x15
 65e:	1c 8b       	std	Y+20, r17	; 0x14
 660:	0b 8b       	std	Y+19, r16	; 0x13
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 c8 01 	call	0x390	; 0x390 <_Znaj>
 66a:	9a 8b       	std	Y+18, r25	; 0x12
 66c:	89 8b       	std	Y+17, r24	; 0x11
 66e:	8d 89       	ldd	r24, Y+21	; 0x15
 670:	9e 89       	ldd	r25, Y+22	; 0x16
 672:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_ZN5Timer6millisEv>
 676:	6f 8b       	std	Y+23, r22	; 0x17
 678:	78 8f       	std	Y+24, r23	; 0x18
 67a:	89 8f       	std	Y+25, r24	; 0x19
 67c:	9a 8f       	std	Y+26, r25	; 0x1a
 67e:	1b 8e       	std	Y+27, r1	; 0x1b
 680:	87 e0       	ldi	r24, 0x07	; 7
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 688:	8c 01       	movw	r16, r24
 68a:	21 e0       	ldi	r18, 0x01	; 1
 68c:	4b e2       	ldi	r20, 0x2B	; 43
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	64 e0       	ldi	r22, 0x04	; 4
 692:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN3PinC1EhPVhh>
 696:	1b 83       	std	Y+3, r17	; 0x03
 698:	0a 83       	std	Y+2, r16	; 0x02
 69a:	87 e0       	ldi	r24, 0x07	; 7
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 6a2:	8c 01       	movw	r16, r24
 6a4:	21 e0       	ldi	r18, 0x01	; 1
 6a6:	4b e2       	ldi	r20, 0x2B	; 43
 6a8:	50 e0       	ldi	r21, 0x00	; 0
 6aa:	63 e0       	ldi	r22, 0x03	; 3
 6ac:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN3PinC1EhPVhh>
 6b0:	1d 83       	std	Y+5, r17	; 0x05
 6b2:	0c 83       	std	Y+4, r16	; 0x04
 6b4:	87 e0       	ldi	r24, 0x07	; 7
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 6bc:	8c 01       	movw	r16, r24
 6be:	21 e0       	ldi	r18, 0x01	; 1
 6c0:	4b e2       	ldi	r20, 0x2B	; 43
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	62 e0       	ldi	r22, 0x02	; 2
 6c6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN3PinC1EhPVhh>
 6ca:	1f 83       	std	Y+7, r17	; 0x07
 6cc:	0e 83       	std	Y+6, r16	; 0x06
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	89 87       	std	Y+9, r24	; 0x09
 6d2:	1a 86       	std	Y+10, r1	; 0x0a
 6d4:	8b 87       	std	Y+11, r24	; 0x0b
 6d6:	1b 8e       	std	Y+27, r1	; 0x1b
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	ff 90       	pop	r15
 6e2:	ef 90       	pop	r14
 6e4:	08 95       	ret

000006e6 <_ZN17InstrumentTrigger3runEv>:
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	fc 01       	movw	r30, r24
 6ec:	22 85       	ldd	r18, Z+10	; 0x0a
 6ee:	21 30       	cpi	r18, 0x01	; 1
 6f0:	49 f4       	brne	.+18     	; 0x704 <_ZN17InstrumentTrigger3runEv+0x1e>
 6f2:	ec 01       	movw	r28, r24
 6f4:	0e 94 9a 02 	call	0x534	; 0x534 <_ZN18ShiftRegister_SIPO9shiftByteEv>
 6f8:	89 85       	ldd	r24, Y+9	; 0x09
 6fa:	81 30       	cpi	r24, 0x01	; 1
 6fc:	19 f4       	brne	.+6      	; 0x704 <_ZN17InstrumentTrigger3runEv+0x1e>
 6fe:	ce 01       	movw	r24, r28
 700:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN13ShiftRegister5latchEv>
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	08 95       	ret

0000070a <_ZN17InstrumentTrigger7setHighEv>:
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	fc 01       	movw	r30, r24
 710:	23 89       	ldd	r18, Z+19	; 0x13
 712:	34 89       	ldd	r19, Z+20	; 0x14
 714:	f9 01       	movw	r30, r18
 716:	e8 53       	subi	r30, 0x38	; 56
 718:	ff 4f       	sbci	r31, 0xFF	; 255
 71a:	40 81       	ld	r20, Z
 71c:	41 30       	cpi	r20, 0x01	; 1
 71e:	69 f5       	brne	.+90     	; 0x77a <_ZN17InstrumentTrigger7setHighEv+0x70>
 720:	ec 01       	movw	r28, r24
 722:	36 97       	sbiw	r30, 0x06	; 6
 724:	40 81       	ld	r20, Z
 726:	ec 85       	ldd	r30, Y+12	; 0x0c
 728:	fd 85       	ldd	r31, Y+13	; 0x0d
 72a:	84 2f       	mov	r24, r20
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	4f 70       	andi	r20, 0x0F	; 15
 730:	80 7f       	andi	r24, 0xF0	; 240
 732:	99 27       	eor	r25, r25
 734:	84 0f       	add	r24, r20
 736:	91 1d       	adc	r25, r1
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	d9 01       	movw	r26, r18
 73e:	a8 0f       	add	r26, r24
 740:	b9 1f       	adc	r27, r25
 742:	11 96       	adiw	r26, 0x01	; 1
 744:	2c 91       	ld	r18, X
 746:	20 83       	st	Z, r18
 748:	ec 85       	ldd	r30, Y+12	; 0x0c
 74a:	fd 85       	ldd	r31, Y+13	; 0x0d
 74c:	2b 89       	ldd	r18, Y+19	; 0x13
 74e:	3c 89       	ldd	r19, Y+20	; 0x14
 750:	d9 01       	movw	r26, r18
 752:	a8 0f       	add	r26, r24
 754:	b9 1f       	adc	r27, r25
 756:	8c 91       	ld	r24, X
 758:	81 83       	std	Z+1, r24	; 0x01
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	8a 87       	std	Y+10, r24	; 0x0a
 75e:	eb 89       	ldd	r30, Y+19	; 0x13
 760:	fc 89       	ldd	r31, Y+20	; 0x14
 762:	e8 53       	subi	r30, 0x38	; 56
 764:	ff 4f       	sbci	r31, 0xFF	; 255
 766:	10 82       	st	Z, r1
 768:	8b 8f       	std	Y+27, r24	; 0x1b
 76a:	8d 89       	ldd	r24, Y+21	; 0x15
 76c:	9e 89       	ldd	r25, Y+22	; 0x16
 76e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_ZN5Timer6millisEv>
 772:	6f 8b       	std	Y+23, r22	; 0x17
 774:	78 8f       	std	Y+24, r23	; 0x18
 776:	89 8f       	std	Y+25, r24	; 0x19
 778:	9a 8f       	std	Y+26, r25	; 0x1a
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

00000780 <_ZN17InstrumentTrigger6setLowEv>:
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	fc 01       	movw	r30, r24
 786:	23 8d       	ldd	r18, Z+27	; 0x1b
 788:	21 30       	cpi	r18, 0x01	; 1
 78a:	01 f5       	brne	.+64     	; 0x7cc <_ZN17InstrumentTrigger6setLowEv+0x4c>
 78c:	21 85       	ldd	r18, Z+9	; 0x09
 78e:	21 30       	cpi	r18, 0x01	; 1
 790:	e9 f4       	brne	.+58     	; 0x7cc <_ZN17InstrumentTrigger6setLowEv+0x4c>
 792:	ec 01       	movw	r28, r24
 794:	47 89       	ldd	r20, Z+23	; 0x17
 796:	50 8d       	ldd	r21, Z+24	; 0x18
 798:	61 8d       	ldd	r22, Z+25	; 0x19
 79a:	72 8d       	ldd	r23, Z+26	; 0x1a
 79c:	85 89       	ldd	r24, Z+21	; 0x15
 79e:	96 89       	ldd	r25, Z+22	; 0x16
 7a0:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN5Timer14elapsed_millisEm>
 7a4:	6a 30       	cpi	r22, 0x0A	; 10
 7a6:	71 05       	cpc	r23, r1
 7a8:	81 05       	cpc	r24, r1
 7aa:	91 05       	cpc	r25, r1
 7ac:	78 f0       	brcs	.+30     	; 0x7cc <_ZN17InstrumentTrigger6setLowEv+0x4c>
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	8a 87       	std	Y+10, r24	; 0x0a
 7b2:	eb 89       	ldd	r30, Y+19	; 0x13
 7b4:	fc 89       	ldd	r31, Y+20	; 0x14
 7b6:	e8 53       	subi	r30, 0x38	; 56
 7b8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ba:	10 82       	st	Z, r1
 7bc:	ec 85       	ldd	r30, Y+12	; 0x0c
 7be:	fd 85       	ldd	r31, Y+13	; 0x0d
 7c0:	10 82       	st	Z, r1
 7c2:	ec 85       	ldd	r30, Y+12	; 0x0c
 7c4:	fd 85       	ldd	r31, Y+13	; 0x0d
 7c6:	11 82       	std	Z+1, r1	; 0x01
 7c8:	1b 8e       	std	Y+27, r1	; 0x1b
 7ca:	19 86       	std	Y+9, r1	; 0x09
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <_ZN17InstrumentTriggerD1Ev>:
}

// default destructor
InstrumentTrigger::~InstrumentTrigger()
 7d2:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN18ShiftRegister_SIPOD1Ev>
 7d6:	08 95       	ret

000007d8 <_ZN11PrintOutputC1ER5TimerR9Sequencer>:
			return;
		}

		this->ShiftRegister_SIPO::shiftByte();
	}
}
 7d8:	ef 92       	push	r14
 7da:	ff 92       	push	r15
 7dc:	0f 93       	push	r16
 7de:	1f 93       	push	r17
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	ec 01       	movw	r28, r24
 7e6:	7b 01       	movw	r14, r22
 7e8:	8a 01       	movw	r16, r20
 7ea:	68 e0       	ldi	r22, 0x08	; 8
 7ec:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN18ShiftRegister_SIPOC1Eh>
 7f0:	f9 82       	std	Y+1, r15	; 0x01
 7f2:	e8 82       	st	Y, r14
 7f4:	1e 8b       	std	Y+22, r17	; 0x16
 7f6:	0d 8b       	std	Y+21, r16	; 0x15
 7f8:	f8 01       	movw	r30, r16
 7fa:	e5 53       	subi	r30, 0x35	; 53
 7fc:	ff 4f       	sbci	r31, 0xFF	; 255
 7fe:	01 90       	ld	r0, Z+
 800:	f0 81       	ld	r31, Z
 802:	e0 2d       	mov	r30, r0
 804:	82 81       	ldd	r24, Z+2	; 0x02
 806:	93 81       	ldd	r25, Z+3	; 0x03
 808:	98 8f       	std	Y+24, r25	; 0x18
 80a:	8f 8b       	std	Y+23, r24	; 0x17
 80c:	85 e0       	ldi	r24, 0x05	; 5
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 814:	8c 01       	movw	r16, r24
 816:	63 e0       	ldi	r22, 0x03	; 3
 818:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN8SevenSegC1Eh>
 81c:	1a 8f       	std	Y+26, r17	; 0x1a
 81e:	09 8f       	std	Y+25, r16	; 0x19
 820:	85 e0       	ldi	r24, 0x05	; 5
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 828:	8c 01       	movw	r16, r24
 82a:	63 e0       	ldi	r22, 0x03	; 3
 82c:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN8SevenSegC1Eh>
 830:	1c 8f       	std	Y+28, r17	; 0x1c
 832:	0b 8f       	std	Y+27, r16	; 0x1b
 834:	85 e0       	ldi	r24, 0x05	; 5
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 83c:	8c 01       	movw	r16, r24
 83e:	63 e0       	ldi	r22, 0x03	; 3
 840:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN8SevenSegC1Eh>
 844:	1e 8f       	std	Y+30, r17	; 0x1e
 846:	0d 8f       	std	Y+29, r16	; 0x1d
 848:	87 e0       	ldi	r24, 0x07	; 7
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 850:	8c 01       	movw	r16, r24
 852:	21 e0       	ldi	r18, 0x01	; 1
 854:	45 e2       	ldi	r20, 0x25	; 37
 856:	50 e0       	ldi	r21, 0x00	; 0
 858:	62 e0       	ldi	r22, 0x02	; 2
 85a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN3PinC1EhPVhh>
 85e:	1b 83       	std	Y+3, r17	; 0x03
 860:	0a 83       	std	Y+2, r16	; 0x02
 862:	87 e0       	ldi	r24, 0x07	; 7
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 86a:	8c 01       	movw	r16, r24
 86c:	21 e0       	ldi	r18, 0x01	; 1
 86e:	45 e2       	ldi	r20, 0x25	; 37
 870:	50 e0       	ldi	r21, 0x00	; 0
 872:	61 e0       	ldi	r22, 0x01	; 1
 874:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN3PinC1EhPVhh>
 878:	1d 83       	std	Y+5, r17	; 0x05
 87a:	0c 83       	std	Y+4, r16	; 0x04
 87c:	87 e0       	ldi	r24, 0x07	; 7
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 c2 01 	call	0x384	; 0x384 <_Znwj>
 884:	8c 01       	movw	r16, r24
 886:	21 e0       	ldi	r18, 0x01	; 1
 888:	45 e2       	ldi	r20, 0x25	; 37
 88a:	50 e0       	ldi	r21, 0x00	; 0
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN3PinC1EhPVhh>
 892:	1f 83       	std	Y+7, r17	; 0x07
 894:	0e 83       	std	Y+6, r16	; 0x06
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	89 87       	std	Y+9, r24	; 0x09
 89a:	8a 87       	std	Y+10, r24	; 0x0a
 89c:	8b 87       	std	Y+11, r24	; 0x0b
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	1f 91       	pop	r17
 8a4:	0f 91       	pop	r16
 8a6:	ff 90       	pop	r15
 8a8:	ef 90       	pop	r14
 8aa:	08 95       	ret

000008ac <_ZN11PrintOutputD1Ev>:

	//add other stuff
}

// default destructor
PrintOutput::~PrintOutput()
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	ec 01       	movw	r28, r24
{
	delete bpmDisplay;
 8b6:	09 8d       	ldd	r16, Y+25	; 0x19
 8b8:	1a 8d       	ldd	r17, Y+26	; 0x1a
 8ba:	01 15       	cp	r16, r1
 8bc:	11 05       	cpc	r17, r1
 8be:	31 f0       	breq	.+12     	; 0x8cc <_ZN11PrintOutputD1Ev+0x20>
 8c0:	c8 01       	movw	r24, r16
 8c2:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SevenSegD1Ev>
 8c6:	c8 01       	movw	r24, r16
 8c8:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZdlPv>
	delete counterDisplay;
 8cc:	0b 8d       	ldd	r16, Y+27	; 0x1b
 8ce:	1c 8d       	ldd	r17, Y+28	; 0x1c
 8d0:	01 15       	cp	r16, r1
 8d2:	11 05       	cpc	r17, r1
 8d4:	31 f0       	breq	.+12     	; 0x8e2 <_ZN11PrintOutputD1Ev+0x36>
 8d6:	c8 01       	movw	r24, r16
 8d8:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SevenSegD1Ev>
 8dc:	c8 01       	movw	r24, r16
 8de:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZdlPv>
	delete loopBackDisplay;
 8e2:	0d 8d       	ldd	r16, Y+29	; 0x1d
 8e4:	1e 8d       	ldd	r17, Y+30	; 0x1e
 8e6:	01 15       	cp	r16, r1
 8e8:	11 05       	cpc	r17, r1
 8ea:	31 f0       	breq	.+12     	; 0x8f8 <_ZN11PrintOutputD1Ev+0x4c>
 8ec:	c8 01       	movw	r24, r16
 8ee:	0e 94 7c 00 	call	0xf8	; 0xf8 <_ZN8SevenSegD1Ev>
 8f2:	c8 01       	movw	r24, r16
 8f4:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZdlPv>
	delete shiftPin;
 8f8:	0a 81       	ldd	r16, Y+2	; 0x02
 8fa:	1b 81       	ldd	r17, Y+3	; 0x03
 8fc:	01 15       	cp	r16, r1
 8fe:	11 05       	cpc	r17, r1
 900:	31 f0       	breq	.+12     	; 0x90e <__stack+0xf>
 902:	c8 01       	movw	r24, r16
 904:	0e 94 15 02 	call	0x42a	; 0x42a <_ZN3PinD1Ev>
 908:	c8 01       	movw	r24, r16
 90a:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZdlPv>
	delete latchPin;
 90e:	0c 81       	ldd	r16, Y+4	; 0x04
 910:	1d 81       	ldd	r17, Y+5	; 0x05
 912:	01 15       	cp	r16, r1
 914:	11 05       	cpc	r17, r1
 916:	31 f0       	breq	.+12     	; 0x924 <__stack+0x25>
 918:	c8 01       	movw	r24, r16
 91a:	0e 94 15 02 	call	0x42a	; 0x42a <_ZN3PinD1Ev>
 91e:	c8 01       	movw	r24, r16
 920:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZdlPv>
	delete serialPin;
 924:	0e 81       	ldd	r16, Y+6	; 0x06
 926:	1f 81       	ldd	r17, Y+7	; 0x07
 928:	01 15       	cp	r16, r1
 92a:	11 05       	cpc	r17, r1
 92c:	31 f0       	breq	.+12     	; 0x93a <__stack+0x3b>
 92e:	c8 01       	movw	r24, r16
 930:	0e 94 15 02 	call	0x42a	; 0x42a <_ZN3PinD1Ev>
 934:	c8 01       	movw	r24, r16
 936:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZdlPv>

	//add other stuff
}

// default destructor
PrintOutput::~PrintOutput()
 93a:	ce 01       	movw	r24, r28
 93c:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN18ShiftRegister_SIPOD1Ev>
	delete counterDisplay;
	delete loopBackDisplay;
	delete shiftPin;
	delete latchPin;
	delete serialPin;
} //~PrintOutput
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	1f 91       	pop	r17
 946:	0f 91       	pop	r16
 948:	08 95       	ret

0000094a <_ZN13RotaryEncoderC1ER5TimerR12DigitalInput>:
					}
				}
			}
		}
	}
}
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	ec 01       	movw	r28, r24
 950:	cb 01       	movw	r24, r22
 952:	79 87       	std	Y+9, r23	; 0x09
 954:	68 87       	std	Y+8, r22	; 0x08
 956:	5b 87       	std	Y+11, r21	; 0x0b
 958:	4a 87       	std	Y+10, r20	; 0x0a
 95a:	1c 82       	std	Y+4, r1	; 0x04
 95c:	1e 82       	std	Y+6, r1	; 0x06
 95e:	1d 82       	std	Y+5, r1	; 0x05
 960:	1f 82       	std	Y+7, r1	; 0x07
 962:	18 82       	st	Y, r1
 964:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_ZN5Timer6millisEv>
 968:	6c 87       	std	Y+12, r22	; 0x0c
 96a:	7d 87       	std	Y+13, r23	; 0x0d
 96c:	8e 87       	std	Y+14, r24	; 0x0e
 96e:	9f 87       	std	Y+15, r25	; 0x0f
 970:	19 82       	std	Y+1, r1	; 0x01
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	08 95       	ret

00000978 <_ZN13RotaryEncoderD1Ev>:

// default destructor
RotaryEncoder::~RotaryEncoder()
 978:	08 95       	ret

0000097a <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder>:
			//Toggle the programmed value
			programedValues[measure][i] ^= (0x0000) | (toggleBit << i);
		}

		//Set toggled values to 0
		buttons->toggledValues = 0;
 97a:	fc 01       	movw	r30, r24
 97c:	e7 53       	subi	r30, 0x37	; 55
 97e:	ff 4f       	sbci	r31, 0xFF	; 255
 980:	51 83       	std	Z+1, r21	; 0x01
 982:	40 83       	st	Z, r20
 984:	32 96       	adiw	r30, 0x02	; 2
 986:	31 83       	std	Z+1, r19	; 0x01
 988:	20 83       	st	Z, r18
 98a:	fa 01       	movw	r30, r20
 98c:	21 89       	ldd	r18, Z+17	; 0x11
 98e:	32 89       	ldd	r19, Z+18	; 0x12
 990:	fc 01       	movw	r30, r24
 992:	ed 52       	subi	r30, 0x2D	; 45
 994:	ff 4f       	sbci	r31, 0xFF	; 255
 996:	31 83       	std	Z+1, r19	; 0x01
 998:	20 83       	st	Z, r18
 99a:	32 96       	adiw	r30, 0x02	; 2
 99c:	71 83       	std	Z+1, r23	; 0x01
 99e:	60 83       	st	Z, r22
 9a0:	fc 01       	movw	r30, r24
 9a2:	ac 01       	movw	r20, r24
 9a4:	40 54       	subi	r20, 0x40	; 64
 9a6:	5f 4f       	sbci	r21, 0xFF	; 255
 9a8:	09 c0       	rjmp	.+18     	; 0x9bc <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder+0x42>
 9aa:	11 92       	st	Z+, r1
 9ac:	11 92       	st	Z+, r1
 9ae:	e2 17       	cp	r30, r18
 9b0:	f3 07       	cpc	r31, r19
 9b2:	d9 f7       	brne	.-10     	; 0x9aa <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder+0x30>
 9b4:	f9 01       	movw	r30, r18
 9b6:	42 17       	cp	r20, r18
 9b8:	53 07       	cpc	r21, r19
 9ba:	21 f0       	breq	.+8      	; 0x9c4 <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder+0x4a>
 9bc:	9f 01       	movw	r18, r30
 9be:	20 5e       	subi	r18, 0xE0	; 224
 9c0:	3f 4f       	sbci	r19, 0xFF	; 255
 9c2:	f3 cf       	rjmp	.-26     	; 0x9aa <_ZN9SequencerC1ER5TimerR12DigitalInputR13RotaryEncoder+0x30>
 9c4:	fc 01       	movw	r30, r24
 9c6:	e0 54       	subi	r30, 0x40	; 64
 9c8:	ff 4f       	sbci	r31, 0xFF	; 255
 9ca:	10 82       	st	Z, r1
 9cc:	31 96       	adiw	r30, 0x01	; 1
 9ce:	10 82       	st	Z, r1
 9d0:	31 96       	adiw	r30, 0x01	; 1
 9d2:	10 82       	st	Z, r1
 9d4:	31 96       	adiw	r30, 0x01	; 1
 9d6:	2f e0       	ldi	r18, 0x0F	; 15
 9d8:	20 83       	st	Z, r18
 9da:	35 96       	adiw	r30, 0x05	; 5
 9dc:	10 82       	st	Z, r1
 9de:	34 97       	sbiw	r30, 0x04	; 4
 9e0:	10 82       	st	Z, r1
 9e2:	11 82       	std	Z+1, r1	; 0x01
 9e4:	12 82       	std	Z+2, r1	; 0x02
 9e6:	13 82       	std	Z+3, r1	; 0x03
 9e8:	08 95       	ret

000009ea <_ZN9Sequencer8runDebugEv>:
	

}

void Sequencer::runDebug( void )
{
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	ec 01       	movw	r28, r24

	if( timer->elapsed_millis( timeStamp ) >= PULSE_PERIOD_DBG )
 9f0:	fc 01       	movw	r30, r24
 9f2:	ec 53       	subi	r30, 0x3C	; 60
 9f4:	ff 4f       	sbci	r31, 0xFF	; 255
 9f6:	40 81       	ld	r20, Z
 9f8:	51 81       	ldd	r21, Z+1	; 0x01
 9fa:	62 81       	ldd	r22, Z+2	; 0x02
 9fc:	73 81       	ldd	r23, Z+3	; 0x03
 9fe:	71 96       	adiw	r30, 0x11	; 17
 a00:	80 81       	ld	r24, Z
 a02:	91 81       	ldd	r25, Z+1	; 0x01
 a04:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN5Timer14elapsed_millisEm>
 a08:	68 38       	cpi	r22, 0x88	; 136
 a0a:	73 41       	sbci	r23, 0x13	; 19
 a0c:	81 05       	cpc	r24, r1
 a0e:	91 05       	cpc	r25, r1
 a10:	e0 f0       	brcs	.+56     	; 0xa4a <_ZN9Sequencer8runDebugEv+0x60>
	{
		//Refresh time stamp.
		timeStamp = timer->millis();
 a12:	fe 01       	movw	r30, r28
 a14:	eb 52       	subi	r30, 0x2B	; 43
 a16:	ff 4f       	sbci	r31, 0xFF	; 255
 a18:	80 81       	ld	r24, Z
 a1a:	91 81       	ldd	r25, Z+1	; 0x01
 a1c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_ZN5Timer6millisEv>
 a20:	fe 01       	movw	r30, r28
 a22:	ec 53       	subi	r30, 0x3C	; 60
 a24:	ff 4f       	sbci	r31, 0xFF	; 255
 a26:	60 83       	st	Z, r22
 a28:	71 83       	std	Z+1, r23	; 0x01
 a2a:	82 83       	std	Z+2, r24	; 0x02
 a2c:	93 83       	std	Z+3, r25	; 0x03

		//increment position in time
		positionInTime++;
 a2e:	32 97       	sbiw	r30, 0x02	; 2
 a30:	80 81       	ld	r24, Z
 a32:	8f 5f       	subi	r24, 0xFF	; 255
 a34:	80 83       	st	Z, r24

		//if it's higher than loopback then reset.
		if ( positionInTime > loopBackLength ){
 a36:	31 96       	adiw	r30, 0x01	; 1
 a38:	90 81       	ld	r25, Z
 a3a:	98 17       	cp	r25, r24
 a3c:	10 f4       	brcc	.+4      	; 0xa42 <_ZN9Sequencer8runDebugEv+0x58>
			positionInTime = 0;
 a3e:	31 97       	sbiw	r30, 0x01	; 1
 a40:	10 82       	st	Z, r1
		}

		triggerInstruments = true;
 a42:	c8 53       	subi	r28, 0x38	; 56
 a44:	df 4f       	sbci	r29, 0xFF	; 255
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	88 83       	st	Y, r24
	}

}
 a4a:	df 91       	pop	r29
 a4c:	cf 91       	pop	r28
 a4e:	08 95       	ret

00000a50 <_ZN9Sequencer12loadSequenceEPjh>:

void Sequencer::loadSequence(uint16_t * sequence, uint8_t size )
{
	for( uint8_t i=0; i < size ; i++ ){
 a50:	44 23       	and	r20, r20
 a52:	a9 f0       	breq	.+42     	; 0xa7e <_ZN9Sequencer12loadSequenceEPjh+0x2e>
 a54:	a6 2f       	mov	r26, r22
 a56:	b7 2f       	mov	r27, r23
 a58:	20 e0       	ldi	r18, 0x00	; 0
 a5a:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t effectiveMeasure = (i >> 4);

		programedValues[effectiveMeasure][i] = sequence[i];
 a5c:	6d 91       	ld	r22, X+
 a5e:	7d 91       	ld	r23, X+
 a60:	f9 01       	movw	r30, r18
 a62:	e0 7f       	andi	r30, 0xF0	; 240
 a64:	ff 70       	andi	r31, 0x0F	; 15
 a66:	e2 0f       	add	r30, r18
 a68:	f3 1f       	adc	r31, r19
 a6a:	ee 0f       	add	r30, r30
 a6c:	ff 1f       	adc	r31, r31
 a6e:	e8 0f       	add	r30, r24
 a70:	f9 1f       	adc	r31, r25
 a72:	71 83       	std	Z+1, r23	; 0x01
 a74:	60 83       	st	Z, r22
 a76:	2f 5f       	subi	r18, 0xFF	; 255
 a78:	3f 4f       	sbci	r19, 0xFF	; 255

}

void Sequencer::loadSequence(uint16_t * sequence, uint8_t size )
{
	for( uint8_t i=0; i < size ; i++ ){
 a7a:	24 17       	cp	r18, r20
 a7c:	78 f3       	brcs	.-34     	; 0xa5c <_ZN9Sequencer12loadSequenceEPjh+0xc>
 a7e:	08 95       	ret

00000a80 <_ZN9Sequencer30loadInstrumentTriggerReferenceER17InstrumentTrigger>:
	}
}

void Sequencer::loadInstrumentTriggerReference( InstrumentTrigger & instrumentTriggerRef )
{
	instrumentTrigger = &instrumentTriggerRef;
 a80:	fc 01       	movw	r30, r24
 a82:	e3 53       	subi	r30, 0x33	; 51
 a84:	ff 4f       	sbci	r31, 0xFF	; 255
 a86:	71 83       	std	Z+1, r23	; 0x01
 a88:	60 83       	st	Z, r22
 a8a:	08 95       	ret

00000a8c <_ZN9SequencerD1Ev>:
}

// default destructor
Sequencer::~Sequencer()
 a8c:	08 95       	ret

00000a8e <_ZN11TaskManagerC1ER5Timer>:


#include "TaskManager.h"

// default constructor
TaskManager::TaskManager( Timer & timerPtr )
 a8e:	fc 01       	movw	r30, r24
{
	
	timer = &timerPtr;
 a90:	77 8f       	std	Z+31, r23	; 0x1f
 a92:	66 8f       	std	Z+30, r22	; 0x1e
	
	//At initialization there should be zero loaded tasks. 
	loadedTasks = 0;
 a94:	10 a2       	std	Z+32, r1	; 0x20
	
	//Should be initialized to a prime number
	randNum = RANDOM_GEN_SEED;
 a96:	8b e0       	ldi	r24, 0x0B	; 11
 a98:	81 a3       	std	Z+33, r24	; 0x21
 a9a:	08 95       	ret

00000a9c <_ZN11TaskManager7addTaskEPFvvEh>:

//Add a task to the task list.
//Priority; Range between 0-250. Closer to 0, the more likely task will run. 0 is realtime
void TaskManager::addTask( void (*task) (void), uint8_t priority ){
	
	tasks[ loadedTasks ] = task;
 a9c:	fc 01       	movw	r30, r24
 a9e:	20 a1       	ldd	r18, Z+32	; 0x20
 aa0:	a2 2f       	mov	r26, r18
 aa2:	b0 e0       	ldi	r27, 0x00	; 0
 aa4:	fd 01       	movw	r30, r26
 aa6:	35 96       	adiw	r30, 0x05	; 5
 aa8:	ee 0f       	add	r30, r30
 aaa:	ff 1f       	adc	r31, r31
 aac:	e8 0f       	add	r30, r24
 aae:	f9 1f       	adc	r31, r25
 ab0:	71 83       	std	Z+1, r23	; 0x01
 ab2:	60 83       	st	Z, r22
	
	taskPriority[ loadedTasks ] = priority;
 ab4:	a8 0f       	add	r26, r24
 ab6:	b9 1f       	adc	r27, r25
 ab8:	4c 93       	st	X, r20
	
	loadedTasks++;
 aba:	2f 5f       	subi	r18, 0xFF	; 255
 abc:	fc 01       	movw	r30, r24
 abe:	20 a3       	std	Z+32, r18	; 0x20
 ac0:	08 95       	ret

00000ac2 <_ZN11TaskManager20generateRandomNumberEv>:
	}
	
}

void TaskManager::generateRandomNumber( void )
{
 ac2:	fc 01       	movw	r30, r24
	randNum = (randNum*109+89)%251;
 ac4:	21 a1       	ldd	r18, Z+33	; 0x21
 ac6:	8d e6       	ldi	r24, 0x6D	; 109
 ac8:	28 9f       	mul	r18, r24
 aca:	90 01       	movw	r18, r0
 acc:	11 24       	eor	r1, r1
 ace:	c9 01       	movw	r24, r18
 ad0:	87 5a       	subi	r24, 0xA7	; 167
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	6b ef       	ldi	r22, 0xFB	; 251
 ad6:	70 e0       	ldi	r23, 0x00	; 0
 ad8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__divmodhi4>
 adc:	81 a3       	std	Z+33, r24	; 0x21
 ade:	08 95       	ret

00000ae0 <_ZN11TaskManager8runTasksEv>:
	
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
 ae0:	cf 92       	push	r12
 ae2:	df 92       	push	r13
 ae4:	ef 92       	push	r14
 ae6:	ff 92       	push	r15
 ae8:	0f 93       	push	r16
 aea:	1f 93       	push	r17
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
	for( int i=0; i < loadedTasks ; i++){
 af0:	dc 01       	movw	r26, r24
 af2:	90 96       	adiw	r26, 0x20	; 32
 af4:	2c 91       	ld	r18, X
 af6:	22 23       	and	r18, r18
 af8:	f9 f0       	breq	.+62     	; 0xb38 <_ZN11TaskManager8runTasksEv+0x58>
 afa:	ec 01       	movw	r28, r24
 afc:	6c 01       	movw	r12, r24
 afe:	7c 01       	movw	r14, r24
 b00:	ba e0       	ldi	r27, 0x0A	; 10
 b02:	eb 0e       	add	r14, r27
 b04:	f1 1c       	adc	r15, r1
 b06:	00 e0       	ldi	r16, 0x00	; 0
 b08:	10 e0       	ldi	r17, 0x00	; 0
		
		//Generate random number for seeing if task should run
		this->generateRandomNumber();
 b0a:	ce 01       	movw	r24, r28
 b0c:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11TaskManager20generateRandomNumberEv>
		if( taskPriority[i] <= randNum ){
 b10:	f6 01       	movw	r30, r12
 b12:	91 91       	ld	r25, Z+
 b14:	6f 01       	movw	r12, r30
 b16:	89 a1       	ldd	r24, Y+33	; 0x21
 b18:	89 17       	cp	r24, r25
 b1a:	20 f0       	brcs	.+8      	; 0xb24 <_ZN11TaskManager8runTasksEv+0x44>
			
			//Run the task
			(*tasks[i]) (); 
 b1c:	d7 01       	movw	r26, r14
 b1e:	ed 91       	ld	r30, X+
 b20:	fc 91       	ld	r31, X
 b22:	09 95       	icall
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
	for( int i=0; i < loadedTasks ; i++){
 b24:	0f 5f       	subi	r16, 0xFF	; 255
 b26:	1f 4f       	sbci	r17, 0xFF	; 255
 b28:	b2 e0       	ldi	r27, 0x02	; 2
 b2a:	eb 0e       	add	r14, r27
 b2c:	f1 1c       	adc	r15, r1
 b2e:	28 a1       	ldd	r18, Y+32	; 0x20
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	02 17       	cp	r16, r18
 b34:	13 07       	cpc	r17, r19
 b36:	4c f3       	brlt	.-46     	; 0xb0a <_ZN11TaskManager8runTasksEv+0x2a>
			(*tasks[i]) (); 
		}
		
	}
	
}
 b38:	df 91       	pop	r29
 b3a:	cf 91       	pop	r28
 b3c:	1f 91       	pop	r17
 b3e:	0f 91       	pop	r16
 b40:	ff 90       	pop	r15
 b42:	ef 90       	pop	r14
 b44:	df 90       	pop	r13
 b46:	cf 90       	pop	r12
 b48:	08 95       	ret

00000b4a <_ZN5TimerC1Ev>:
	fixedTime = this->millis();
}

void Timer::resumeTimer( void )
{
	step = fixedTime;
 b4a:	fc 01       	movw	r30, r24
 b4c:	10 82       	st	Z, r1
 b4e:	11 82       	std	Z+1, r1	; 0x01
 b50:	12 82       	std	Z+2, r1	; 0x02
 b52:	13 82       	std	Z+3, r1	; 0x03
 b54:	14 82       	std	Z+4, r1	; 0x04
 b56:	15 82       	std	Z+5, r1	; 0x05
 b58:	16 82       	std	Z+6, r1	; 0x06
 b5a:	17 82       	std	Z+7, r1	; 0x07
 b5c:	08 95       	ret

00000b5e <_ZN5Timer14incrementTimerEv>:
 b5e:	fc 01       	movw	r30, r24
 b60:	40 81       	ld	r20, Z
 b62:	51 81       	ldd	r21, Z+1	; 0x01
 b64:	62 81       	ldd	r22, Z+2	; 0x02
 b66:	73 81       	ldd	r23, Z+3	; 0x03
 b68:	4f 5f       	subi	r20, 0xFF	; 255
 b6a:	5f 4f       	sbci	r21, 0xFF	; 255
 b6c:	6f 4f       	sbci	r22, 0xFF	; 255
 b6e:	7f 4f       	sbci	r23, 0xFF	; 255
 b70:	40 83       	st	Z, r20
 b72:	51 83       	std	Z+1, r21	; 0x01
 b74:	62 83       	std	Z+2, r22	; 0x02
 b76:	73 83       	std	Z+3, r23	; 0x03
 b78:	08 95       	ret

00000b7a <_ZN5Timer5resetEv>:
 b7a:	fc 01       	movw	r30, r24
 b7c:	10 82       	st	Z, r1
 b7e:	11 82       	std	Z+1, r1	; 0x01
 b80:	12 82       	std	Z+2, r1	; 0x02
 b82:	13 82       	std	Z+3, r1	; 0x03
 b84:	08 95       	ret

00000b86 <_ZN5Timer14elapsed_millisEm>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
 b86:	0f 93       	push	r16
 b88:	1f 93       	push	r17
	return (step - comparison);	
 b8a:	fc 01       	movw	r30, r24
 b8c:	80 81       	ld	r24, Z
 b8e:	91 81       	ldd	r25, Z+1	; 0x01
 b90:	a2 81       	ldd	r26, Z+2	; 0x02
 b92:	b3 81       	ldd	r27, Z+3	; 0x03
 b94:	8c 01       	movw	r16, r24
 b96:	9d 01       	movw	r18, r26
 b98:	04 1b       	sub	r16, r20
 b9a:	15 0b       	sbc	r17, r21
 b9c:	26 0b       	sbc	r18, r22
 b9e:	37 0b       	sbc	r19, r23
 ba0:	c9 01       	movw	r24, r18
 ba2:	b8 01       	movw	r22, r16
}
 ba4:	1f 91       	pop	r17
 ba6:	0f 91       	pop	r16
 ba8:	08 95       	ret

00000baa <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return step;
 baa:	fc 01       	movw	r30, r24
 bac:	60 81       	ld	r22, Z
 bae:	71 81       	ldd	r23, Z+1	; 0x01
 bb0:	82 81       	ldd	r24, Z+2	; 0x02
 bb2:	93 81       	ldd	r25, Z+3	; 0x03
}
 bb4:	08 95       	ret

00000bb6 <_ZN5Timer8wait_1usEv>:
	//Variable to find the difference between a current value
	//of a timer and a previous value
	uint8_t difference = 0;
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
 bb6:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
		difference = TCNT2 - timerValue;
 bba:	e2 eb       	ldi	r30, 0xB2	; 178
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	80 81       	ld	r24, Z
 bc0:	89 1b       	sub	r24, r25
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
 bc2:	80 31       	cpi	r24, 0x10	; 16
 bc4:	e0 f3       	brcs	.-8      	; 0xbbe <_ZN5Timer8wait_1usEv+0x8>
		difference = TCNT2 - timerValue;
	}
}
 bc6:	08 95       	ret

00000bc8 <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 bc8:	08 95       	ret

00000bca <__udivmodhi4>:
 bca:	aa 1b       	sub	r26, r26
 bcc:	bb 1b       	sub	r27, r27
 bce:	51 e1       	ldi	r21, 0x11	; 17
 bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <__udivmodhi4_ep>

00000bd2 <__udivmodhi4_loop>:
 bd2:	aa 1f       	adc	r26, r26
 bd4:	bb 1f       	adc	r27, r27
 bd6:	a6 17       	cp	r26, r22
 bd8:	b7 07       	cpc	r27, r23
 bda:	10 f0       	brcs	.+4      	; 0xbe0 <__udivmodhi4_ep>
 bdc:	a6 1b       	sub	r26, r22
 bde:	b7 0b       	sbc	r27, r23

00000be0 <__udivmodhi4_ep>:
 be0:	88 1f       	adc	r24, r24
 be2:	99 1f       	adc	r25, r25
 be4:	5a 95       	dec	r21
 be6:	a9 f7       	brne	.-22     	; 0xbd2 <__udivmodhi4_loop>
 be8:	80 95       	com	r24
 bea:	90 95       	com	r25
 bec:	bc 01       	movw	r22, r24
 bee:	cd 01       	movw	r24, r26
 bf0:	08 95       	ret

00000bf2 <__divmodhi4>:
 bf2:	97 fb       	bst	r25, 7
 bf4:	07 2e       	mov	r0, r23
 bf6:	16 f4       	brtc	.+4      	; 0xbfc <__divmodhi4+0xa>
 bf8:	00 94       	com	r0
 bfa:	07 d0       	rcall	.+14     	; 0xc0a <__divmodhi4_neg1>
 bfc:	77 fd       	sbrc	r23, 7
 bfe:	09 d0       	rcall	.+18     	; 0xc12 <__divmodhi4_neg2>
 c00:	0e 94 e5 05 	call	0xbca	; 0xbca <__udivmodhi4>
 c04:	07 fc       	sbrc	r0, 7
 c06:	05 d0       	rcall	.+10     	; 0xc12 <__divmodhi4_neg2>
 c08:	3e f4       	brtc	.+14     	; 0xc18 <__divmodhi4_exit>

00000c0a <__divmodhi4_neg1>:
 c0a:	90 95       	com	r25
 c0c:	81 95       	neg	r24
 c0e:	9f 4f       	sbci	r25, 0xFF	; 255
 c10:	08 95       	ret

00000c12 <__divmodhi4_neg2>:
 c12:	70 95       	com	r23
 c14:	61 95       	neg	r22
 c16:	7f 4f       	sbci	r23, 0xFF	; 255

00000c18 <__divmodhi4_exit>:
 c18:	08 95       	ret

00000c1a <__tablejump2__>:
 c1a:	ee 0f       	add	r30, r30
 c1c:	ff 1f       	adc	r31, r31
 c1e:	05 90       	lpm	r0, Z+
 c20:	f4 91       	lpm	r31, Z
 c22:	e0 2d       	mov	r30, r0
 c24:	09 94       	ijmp

00000c26 <malloc>:
 c26:	cf 93       	push	r28
 c28:	df 93       	push	r29
 c2a:	82 30       	cpi	r24, 0x02	; 2
 c2c:	91 05       	cpc	r25, r1
 c2e:	10 f4       	brcc	.+4      	; 0xc34 <malloc+0xe>
 c30:	82 e0       	ldi	r24, 0x02	; 2
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <__flp>
 c38:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <__flp+0x1>
 c3c:	20 e0       	ldi	r18, 0x00	; 0
 c3e:	30 e0       	ldi	r19, 0x00	; 0
 c40:	c0 e0       	ldi	r28, 0x00	; 0
 c42:	d0 e0       	ldi	r29, 0x00	; 0
 c44:	30 97       	sbiw	r30, 0x00	; 0
 c46:	11 f1       	breq	.+68     	; 0xc8c <malloc+0x66>
 c48:	40 81       	ld	r20, Z
 c4a:	51 81       	ldd	r21, Z+1	; 0x01
 c4c:	48 17       	cp	r20, r24
 c4e:	59 07       	cpc	r21, r25
 c50:	c0 f0       	brcs	.+48     	; 0xc82 <malloc+0x5c>
 c52:	48 17       	cp	r20, r24
 c54:	59 07       	cpc	r21, r25
 c56:	61 f4       	brne	.+24     	; 0xc70 <malloc+0x4a>
 c58:	82 81       	ldd	r24, Z+2	; 0x02
 c5a:	93 81       	ldd	r25, Z+3	; 0x03
 c5c:	20 97       	sbiw	r28, 0x00	; 0
 c5e:	19 f0       	breq	.+6      	; 0xc66 <malloc+0x40>
 c60:	9b 83       	std	Y+3, r25	; 0x03
 c62:	8a 83       	std	Y+2, r24	; 0x02
 c64:	2b c0       	rjmp	.+86     	; 0xcbc <malloc+0x96>
 c66:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <__flp+0x1>
 c6a:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <__flp>
 c6e:	26 c0       	rjmp	.+76     	; 0xcbc <malloc+0x96>
 c70:	21 15       	cp	r18, r1
 c72:	31 05       	cpc	r19, r1
 c74:	19 f0       	breq	.+6      	; 0xc7c <malloc+0x56>
 c76:	42 17       	cp	r20, r18
 c78:	53 07       	cpc	r21, r19
 c7a:	18 f4       	brcc	.+6      	; 0xc82 <malloc+0x5c>
 c7c:	9a 01       	movw	r18, r20
 c7e:	be 01       	movw	r22, r28
 c80:	df 01       	movw	r26, r30
 c82:	ef 01       	movw	r28, r30
 c84:	02 80       	ldd	r0, Z+2	; 0x02
 c86:	f3 81       	ldd	r31, Z+3	; 0x03
 c88:	e0 2d       	mov	r30, r0
 c8a:	dc cf       	rjmp	.-72     	; 0xc44 <malloc+0x1e>
 c8c:	21 15       	cp	r18, r1
 c8e:	31 05       	cpc	r19, r1
 c90:	09 f1       	breq	.+66     	; 0xcd4 <malloc+0xae>
 c92:	28 1b       	sub	r18, r24
 c94:	39 0b       	sbc	r19, r25
 c96:	24 30       	cpi	r18, 0x04	; 4
 c98:	31 05       	cpc	r19, r1
 c9a:	90 f4       	brcc	.+36     	; 0xcc0 <malloc+0x9a>
 c9c:	12 96       	adiw	r26, 0x02	; 2
 c9e:	8d 91       	ld	r24, X+
 ca0:	9c 91       	ld	r25, X
 ca2:	13 97       	sbiw	r26, 0x03	; 3
 ca4:	61 15       	cp	r22, r1
 ca6:	71 05       	cpc	r23, r1
 ca8:	21 f0       	breq	.+8      	; 0xcb2 <malloc+0x8c>
 caa:	fb 01       	movw	r30, r22
 cac:	93 83       	std	Z+3, r25	; 0x03
 cae:	82 83       	std	Z+2, r24	; 0x02
 cb0:	04 c0       	rjmp	.+8      	; 0xcba <malloc+0x94>
 cb2:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <__flp+0x1>
 cb6:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <__flp>
 cba:	fd 01       	movw	r30, r26
 cbc:	32 96       	adiw	r30, 0x02	; 2
 cbe:	44 c0       	rjmp	.+136    	; 0xd48 <malloc+0x122>
 cc0:	fd 01       	movw	r30, r26
 cc2:	e2 0f       	add	r30, r18
 cc4:	f3 1f       	adc	r31, r19
 cc6:	81 93       	st	Z+, r24
 cc8:	91 93       	st	Z+, r25
 cca:	22 50       	subi	r18, 0x02	; 2
 ccc:	31 09       	sbc	r19, r1
 cce:	2d 93       	st	X+, r18
 cd0:	3c 93       	st	X, r19
 cd2:	3a c0       	rjmp	.+116    	; 0xd48 <malloc+0x122>
 cd4:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <__brkval>
 cd8:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <__brkval+0x1>
 cdc:	23 2b       	or	r18, r19
 cde:	41 f4       	brne	.+16     	; 0xcf0 <malloc+0xca>
 ce0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 ce4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 ce8:	30 93 76 02 	sts	0x0276, r19	; 0x800276 <__brkval+0x1>
 cec:	20 93 75 02 	sts	0x0275, r18	; 0x800275 <__brkval>
 cf0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 cf4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 cf8:	21 15       	cp	r18, r1
 cfa:	31 05       	cpc	r19, r1
 cfc:	41 f4       	brne	.+16     	; 0xd0e <malloc+0xe8>
 cfe:	2d b7       	in	r18, 0x3d	; 61
 d00:	3e b7       	in	r19, 0x3e	; 62
 d02:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 d06:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 d0a:	24 1b       	sub	r18, r20
 d0c:	35 0b       	sbc	r19, r21
 d0e:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <__brkval>
 d12:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <__brkval+0x1>
 d16:	e2 17       	cp	r30, r18
 d18:	f3 07       	cpc	r31, r19
 d1a:	a0 f4       	brcc	.+40     	; 0xd44 <malloc+0x11e>
 d1c:	2e 1b       	sub	r18, r30
 d1e:	3f 0b       	sbc	r19, r31
 d20:	28 17       	cp	r18, r24
 d22:	39 07       	cpc	r19, r25
 d24:	78 f0       	brcs	.+30     	; 0xd44 <malloc+0x11e>
 d26:	ac 01       	movw	r20, r24
 d28:	4e 5f       	subi	r20, 0xFE	; 254
 d2a:	5f 4f       	sbci	r21, 0xFF	; 255
 d2c:	24 17       	cp	r18, r20
 d2e:	35 07       	cpc	r19, r21
 d30:	48 f0       	brcs	.+18     	; 0xd44 <malloc+0x11e>
 d32:	4e 0f       	add	r20, r30
 d34:	5f 1f       	adc	r21, r31
 d36:	50 93 76 02 	sts	0x0276, r21	; 0x800276 <__brkval+0x1>
 d3a:	40 93 75 02 	sts	0x0275, r20	; 0x800275 <__brkval>
 d3e:	81 93       	st	Z+, r24
 d40:	91 93       	st	Z+, r25
 d42:	02 c0       	rjmp	.+4      	; 0xd48 <malloc+0x122>
 d44:	e0 e0       	ldi	r30, 0x00	; 0
 d46:	f0 e0       	ldi	r31, 0x00	; 0
 d48:	cf 01       	movw	r24, r30
 d4a:	df 91       	pop	r29
 d4c:	cf 91       	pop	r28
 d4e:	08 95       	ret

00000d50 <free>:
 d50:	0f 93       	push	r16
 d52:	1f 93       	push	r17
 d54:	cf 93       	push	r28
 d56:	df 93       	push	r29
 d58:	00 97       	sbiw	r24, 0x00	; 0
 d5a:	09 f4       	brne	.+2      	; 0xd5e <free+0xe>
 d5c:	8c c0       	rjmp	.+280    	; 0xe76 <free+0x126>
 d5e:	fc 01       	movw	r30, r24
 d60:	32 97       	sbiw	r30, 0x02	; 2
 d62:	13 82       	std	Z+3, r1	; 0x03
 d64:	12 82       	std	Z+2, r1	; 0x02
 d66:	00 91 77 02 	lds	r16, 0x0277	; 0x800277 <__flp>
 d6a:	10 91 78 02 	lds	r17, 0x0278	; 0x800278 <__flp+0x1>
 d6e:	01 15       	cp	r16, r1
 d70:	11 05       	cpc	r17, r1
 d72:	81 f4       	brne	.+32     	; 0xd94 <free+0x44>
 d74:	20 81       	ld	r18, Z
 d76:	31 81       	ldd	r19, Z+1	; 0x01
 d78:	82 0f       	add	r24, r18
 d7a:	93 1f       	adc	r25, r19
 d7c:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <__brkval>
 d80:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <__brkval+0x1>
 d84:	28 17       	cp	r18, r24
 d86:	39 07       	cpc	r19, r25
 d88:	79 f5       	brne	.+94     	; 0xde8 <free+0x98>
 d8a:	f0 93 76 02 	sts	0x0276, r31	; 0x800276 <__brkval+0x1>
 d8e:	e0 93 75 02 	sts	0x0275, r30	; 0x800275 <__brkval>
 d92:	71 c0       	rjmp	.+226    	; 0xe76 <free+0x126>
 d94:	d8 01       	movw	r26, r16
 d96:	40 e0       	ldi	r20, 0x00	; 0
 d98:	50 e0       	ldi	r21, 0x00	; 0
 d9a:	ae 17       	cp	r26, r30
 d9c:	bf 07       	cpc	r27, r31
 d9e:	50 f4       	brcc	.+20     	; 0xdb4 <free+0x64>
 da0:	12 96       	adiw	r26, 0x02	; 2
 da2:	2d 91       	ld	r18, X+
 da4:	3c 91       	ld	r19, X
 da6:	13 97       	sbiw	r26, 0x03	; 3
 da8:	ad 01       	movw	r20, r26
 daa:	21 15       	cp	r18, r1
 dac:	31 05       	cpc	r19, r1
 dae:	09 f1       	breq	.+66     	; 0xdf2 <free+0xa2>
 db0:	d9 01       	movw	r26, r18
 db2:	f3 cf       	rjmp	.-26     	; 0xd9a <free+0x4a>
 db4:	9d 01       	movw	r18, r26
 db6:	da 01       	movw	r26, r20
 db8:	33 83       	std	Z+3, r19	; 0x03
 dba:	22 83       	std	Z+2, r18	; 0x02
 dbc:	60 81       	ld	r22, Z
 dbe:	71 81       	ldd	r23, Z+1	; 0x01
 dc0:	86 0f       	add	r24, r22
 dc2:	97 1f       	adc	r25, r23
 dc4:	82 17       	cp	r24, r18
 dc6:	93 07       	cpc	r25, r19
 dc8:	69 f4       	brne	.+26     	; 0xde4 <free+0x94>
 dca:	ec 01       	movw	r28, r24
 dcc:	28 81       	ld	r18, Y
 dce:	39 81       	ldd	r19, Y+1	; 0x01
 dd0:	26 0f       	add	r18, r22
 dd2:	37 1f       	adc	r19, r23
 dd4:	2e 5f       	subi	r18, 0xFE	; 254
 dd6:	3f 4f       	sbci	r19, 0xFF	; 255
 dd8:	31 83       	std	Z+1, r19	; 0x01
 dda:	20 83       	st	Z, r18
 ddc:	8a 81       	ldd	r24, Y+2	; 0x02
 dde:	9b 81       	ldd	r25, Y+3	; 0x03
 de0:	93 83       	std	Z+3, r25	; 0x03
 de2:	82 83       	std	Z+2, r24	; 0x02
 de4:	45 2b       	or	r20, r21
 de6:	29 f4       	brne	.+10     	; 0xdf2 <free+0xa2>
 de8:	f0 93 78 02 	sts	0x0278, r31	; 0x800278 <__flp+0x1>
 dec:	e0 93 77 02 	sts	0x0277, r30	; 0x800277 <__flp>
 df0:	42 c0       	rjmp	.+132    	; 0xe76 <free+0x126>
 df2:	13 96       	adiw	r26, 0x03	; 3
 df4:	fc 93       	st	X, r31
 df6:	ee 93       	st	-X, r30
 df8:	12 97       	sbiw	r26, 0x02	; 2
 dfa:	ed 01       	movw	r28, r26
 dfc:	49 91       	ld	r20, Y+
 dfe:	59 91       	ld	r21, Y+
 e00:	9e 01       	movw	r18, r28
 e02:	24 0f       	add	r18, r20
 e04:	35 1f       	adc	r19, r21
 e06:	e2 17       	cp	r30, r18
 e08:	f3 07       	cpc	r31, r19
 e0a:	71 f4       	brne	.+28     	; 0xe28 <free+0xd8>
 e0c:	80 81       	ld	r24, Z
 e0e:	91 81       	ldd	r25, Z+1	; 0x01
 e10:	84 0f       	add	r24, r20
 e12:	95 1f       	adc	r25, r21
 e14:	02 96       	adiw	r24, 0x02	; 2
 e16:	11 96       	adiw	r26, 0x01	; 1
 e18:	9c 93       	st	X, r25
 e1a:	8e 93       	st	-X, r24
 e1c:	82 81       	ldd	r24, Z+2	; 0x02
 e1e:	93 81       	ldd	r25, Z+3	; 0x03
 e20:	13 96       	adiw	r26, 0x03	; 3
 e22:	9c 93       	st	X, r25
 e24:	8e 93       	st	-X, r24
 e26:	12 97       	sbiw	r26, 0x02	; 2
 e28:	e0 e0       	ldi	r30, 0x00	; 0
 e2a:	f0 e0       	ldi	r31, 0x00	; 0
 e2c:	d8 01       	movw	r26, r16
 e2e:	12 96       	adiw	r26, 0x02	; 2
 e30:	8d 91       	ld	r24, X+
 e32:	9c 91       	ld	r25, X
 e34:	13 97       	sbiw	r26, 0x03	; 3
 e36:	00 97       	sbiw	r24, 0x00	; 0
 e38:	19 f0       	breq	.+6      	; 0xe40 <free+0xf0>
 e3a:	f8 01       	movw	r30, r16
 e3c:	8c 01       	movw	r16, r24
 e3e:	f6 cf       	rjmp	.-20     	; 0xe2c <free+0xdc>
 e40:	8d 91       	ld	r24, X+
 e42:	9c 91       	ld	r25, X
 e44:	98 01       	movw	r18, r16
 e46:	2e 5f       	subi	r18, 0xFE	; 254
 e48:	3f 4f       	sbci	r19, 0xFF	; 255
 e4a:	82 0f       	add	r24, r18
 e4c:	93 1f       	adc	r25, r19
 e4e:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <__brkval>
 e52:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <__brkval+0x1>
 e56:	28 17       	cp	r18, r24
 e58:	39 07       	cpc	r19, r25
 e5a:	69 f4       	brne	.+26     	; 0xe76 <free+0x126>
 e5c:	30 97       	sbiw	r30, 0x00	; 0
 e5e:	29 f4       	brne	.+10     	; 0xe6a <free+0x11a>
 e60:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__flp+0x1>
 e64:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__flp>
 e68:	02 c0       	rjmp	.+4      	; 0xe6e <free+0x11e>
 e6a:	13 82       	std	Z+3, r1	; 0x03
 e6c:	12 82       	std	Z+2, r1	; 0x02
 e6e:	10 93 76 02 	sts	0x0276, r17	; 0x800276 <__brkval+0x1>
 e72:	00 93 75 02 	sts	0x0275, r16	; 0x800275 <__brkval>
 e76:	df 91       	pop	r29
 e78:	cf 91       	pop	r28
 e7a:	1f 91       	pop	r17
 e7c:	0f 91       	pop	r16
 e7e:	08 95       	ret

00000e80 <__do_global_dtors>:
 e80:	10 e0       	ldi	r17, 0x00	; 0
 e82:	c5 e3       	ldi	r28, 0x35	; 53
 e84:	d0 e0       	ldi	r29, 0x00	; 0
 e86:	04 c0       	rjmp	.+8      	; 0xe90 <__do_global_dtors+0x10>
 e88:	fe 01       	movw	r30, r28
 e8a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__tablejump2__>
 e8e:	21 96       	adiw	r28, 0x01	; 1
 e90:	c6 33       	cpi	r28, 0x36	; 54
 e92:	d1 07       	cpc	r29, r17
 e94:	c9 f7       	brne	.-14     	; 0xe88 <__do_global_dtors+0x8>
 e96:	f8 94       	cli

00000e98 <__stop_program>:
 e98:	ff cf       	rjmp	.-2      	; 0xe98 <__stop_program>
