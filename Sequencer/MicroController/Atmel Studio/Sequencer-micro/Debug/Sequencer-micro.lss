
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000e32  00000ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005e  00800112  00800112  00000ed8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006bcf  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000244c  00000000  00000000  00007f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d81  00000000  00000000  0000a35f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000894  00000000  00000000  0000c0e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000125b  00000000  00000000  0000c974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014a2  00000000  00000000  0000dbcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000f071  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_11>
  30:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_12>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	f2 01       	movw	r30, r4

0000006a <__ctors_end>:
  6a:	24 02       	muls	r18, r20

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e2 e3       	ldi	r30, 0x32	; 50
  80:	fe e0       	ldi	r31, 0x0E	; 14
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a2 31       	cpi	r26, 0x12	; 18
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a2 e1       	ldi	r26, 0x12	; 18
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a0 37       	cpi	r26, 0x70	; 112
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  b8:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_ZN8SevenSegC1EhR5Timer>:
	//Shift in the Byte
	this->shiftBits();
	
	//latch output
	this->latch();
}
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
  ce:	16 2f       	mov	r17, r22
  d0:	7a 01       	movw	r14, r20
  d2:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN18ShiftRegister_SIPOC1Ev>
  d6:	8b e0       	ldi	r24, 0x0B	; 11
  d8:	e6 e0       	ldi	r30, 0x06	; 6
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	de 01       	movw	r26, r28
  de:	1f 96       	adiw	r26, 0x0f	; 15
  e0:	01 90       	ld	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	8a 95       	dec	r24
  e6:	e1 f7       	brne	.-8      	; 0xe0 <_ZN8SevenSegC1EhR5Timer+0x20>
  e8:	1d 86       	std	Y+13, r1	; 0x0d
  ea:	1c 86       	std	Y+12, r1	; 0x0c
  ec:	1d 8e       	std	Y+29, r1	; 0x1d
  ee:	b7 01       	movw	r22, r14
  f0:	ce 01       	movw	r24, r28
  f2:	0e 94 22 03 	call	0x644	; 0x644 <_ZN13ShiftRegister17getTimerReferenceER5Timer>
  f6:	1e 87       	std	Y+14, r17	; 0x0e
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	8a 87       	std	Y+10, r24	; 0x0a
  fc:	8b 87       	std	Y+11, r24	; 0x0b
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 41 02 	call	0x482	; 0x482 <_Znwj>
 106:	8c 01       	movw	r16, r24
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	45 e2       	ldi	r20, 0x25	; 37
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	62 e0       	ldi	r22, 0x02	; 2
 110:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN3PinC1EhPVhh>
 114:	19 83       	std	Y+1, r17	; 0x01
 116:	08 83       	st	Y, r16
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 41 02 	call	0x482	; 0x482 <_Znwj>
 120:	8c 01       	movw	r16, r24
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	45 e2       	ldi	r20, 0x25	; 37
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN3PinC1EhPVhh>
 12e:	1b 83       	std	Y+3, r17	; 0x03
 130:	0a 83       	std	Y+2, r16	; 0x02
 132:	87 e0       	ldi	r24, 0x07	; 7
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 41 02 	call	0x482	; 0x482 <_Znwj>
 13a:	8c 01       	movw	r16, r24
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	45 e2       	ldi	r20, 0x25	; 37
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN3PinC1EhPVhh>
 148:	1d 83       	std	Y+5, r17	; 0x05
 14a:	0c 83       	std	Y+4, r16	; 0x04
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	08 95       	ret

0000015a <_ZN8SevenSeg3runEv>:
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	fc 01       	movw	r30, r24
 166:	23 85       	ldd	r18, Z+11	; 0x0b
 168:	21 30       	cpi	r18, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <_ZN8SevenSeg3runEv+0x14>
 16c:	4e c0       	rjmp	.+156    	; 0x20a <_ZN8SevenSeg3runEv+0xb0>
 16e:	ec 01       	movw	r28, r24
 170:	12 86       	std	Z+10, r1	; 0x0a
 172:	15 8d       	ldd	r17, Z+29	; 0x1d
 174:	e4 84       	ldd	r14, Z+12	; 0x0c
 176:	f5 84       	ldd	r15, Z+13	; 0x0d
 178:	81 2f       	mov	r24, r17
 17a:	0e 94 44 02 	call	0x488	; 0x488 <_Z5pow10h>
 17e:	bc 01       	movw	r22, r24
 180:	fe 01       	movw	r30, r28
 182:	e1 0f       	add	r30, r17
 184:	f1 1d       	adc	r31, r1
 186:	c7 01       	movw	r24, r14
 188:	0e 94 80 05 	call	0xb00	; 0xb00 <__udivmodhi4>
 18c:	ab 01       	movw	r20, r22
 18e:	9b 01       	movw	r18, r22
 190:	ad ec       	ldi	r26, 0xCD	; 205
 192:	bc ec       	ldi	r27, 0xCC	; 204
 194:	0e 94 ca 05 	call	0xb94	; 0xb94 <__umulhisi3>
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	9c 01       	movw	r18, r24
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	82 0f       	add	r24, r18
 1b8:	93 1f       	adc	r25, r19
 1ba:	48 1b       	sub	r20, r24
 1bc:	59 0b       	sbc	r21, r25
 1be:	42 8f       	std	Z+26, r20	; 0x1a
 1c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	fe 01       	movw	r30, r28
 1c6:	e8 0f       	add	r30, r24
 1c8:	f9 1f       	adc	r31, r25
 1ca:	22 8d       	ldd	r18, Z+26	; 0x1a
 1cc:	2a 30       	cpi	r18, 0x0A	; 10
 1ce:	28 f0       	brcs	.+10     	; 0x1da <_ZN8SevenSeg3runEv+0x80>
 1d0:	2a e0       	ldi	r18, 0x0A	; 10
 1d2:	fe 01       	movw	r30, r28
 1d4:	e8 0f       	add	r30, r24
 1d6:	f9 1f       	adc	r31, r25
 1d8:	22 8f       	std	Z+26, r18	; 0x1a
 1da:	fe 01       	movw	r30, r28
 1dc:	e8 0f       	add	r30, r24
 1de:	f9 1f       	adc	r31, r25
 1e0:	82 8d       	ldd	r24, Z+26	; 0x1a
 1e2:	fe 01       	movw	r30, r28
 1e4:	e8 0f       	add	r30, r24
 1e6:	f1 1d       	adc	r31, r1
 1e8:	67 85       	ldd	r22, Z+15	; 0x0f
 1ea:	ce 01       	movw	r24, r28
 1ec:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN18ShiftRegister_SIPO8loadByteEh>
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 30 03 	call	0x660	; 0x660 <_ZN18ShiftRegister_SIPO9shiftBitsEv>
 1f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	10 f4       	brcc	.+4      	; 0x202 <_ZN8SevenSeg3runEv+0xa8>
 1fe:	8d 8f       	std	Y+29, r24	; 0x1d
 200:	04 c0       	rjmp	.+8      	; 0x20a <_ZN8SevenSeg3runEv+0xb0>
 202:	1d 8e       	std	Y+29, r1	; 0x1d
 204:	1b 86       	std	Y+11, r1	; 0x0b
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	8a 87       	std	Y+10, r24	; 0x0a
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	08 95       	ret

00000216 <_ZN8SevenSegD1Ev>:

// default destructor
SevenSeg::~SevenSeg()
 216:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_ZN18ShiftRegister_SIPOD1Ev>
 21a:	08 95       	ret

0000021c <__vector_14>:

void disableShifting( void )
{
	//TIMSK2 is the TC2 Interrupt Mask Register
	//We will disable interrupt on compare match with OCR2A
	TIMSK2 &= ~(1 << OCIE2A);
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	4f 93       	push	r20
 22c:	5f 93       	push	r21
 22e:	6f 93       	push	r22
 230:	7f 93       	push	r23
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
 23e:	84 e6       	ldi	r24, 0x64	; 100
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_ZN5Timer14incrementTimerEv>
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__vector_12>:
 268:	78 94       	sei
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <_Z20setUpTimerInterruptsv>:
 27e:	ee e6       	ldi	r30, 0x6E	; 110
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	82 60       	ori	r24, 0x02	; 2
 286:	80 83       	st	Z, r24
 288:	89 e1       	ldi	r24, 0x19	; 25
 28a:	87 bd       	out	0x27, r24	; 39
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	94 bd       	out	0x24, r25	; 36
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	85 bd       	out	0x25, r24	; 37
 294:	ef e6       	ldi	r30, 0x6F	; 111
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	86 60       	ori	r24, 0x06	; 6
 29c:	80 83       	st	Z, r24
 29e:	20 e4       	ldi	r18, 0x40	; 64
 2a0:	36 e0       	ldi	r19, 0x06	; 6
 2a2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2a6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2b2:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 2b6:	89 e0       	ldi	r24, 0x09	; 9
 2b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 2c2:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 2cc:	78 94       	sei
 2ce:	08 95       	ret

000002d0 <_Z25disableTimerOneInterruptsv>:
}

void disableTimerOneInterrupts( void )
{
	TIMSK1 &= ~((1 << OCIE1A) | (1 << OCIE2B));
 2d0:	ef e6       	ldi	r30, 0x6F	; 111
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	89 7f       	andi	r24, 0xF9	; 249
 2d8:	80 83       	st	Z, r24
 2da:	08 95       	ret

000002dc <__vector_11>:
ISR( TIMER1_COMPB_vect, ISR_NOBLOCK)
{
}

ISR( TIMER1_COMPA_vect, ISR_NOBLOCK )
{
 2dc:	78 94       	sei
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	disableTimerOneInterrupts();
 300:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z25disableTimerOneInterruptsv>
}
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	bf 91       	pop	r27
 30a:	af 91       	pop	r26
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	7f 91       	pop	r23
 312:	6f 91       	pop	r22
 314:	5f 91       	pop	r21
 316:	4f 91       	pop	r20
 318:	3f 91       	pop	r19
 31a:	2f 91       	pop	r18
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <_Z9latchTaskv>:
//Task for triggering
void triggerTask( void ){
	trigger.run();
}
//Task for counting
void counterTask( void ){
 326:	84 e4       	ldi	r24, 0x44	; 68
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN5Latch3runEv>
 32e:	08 95       	ret

00000330 <_Z23sevenSegmentDisplayTaskv>:
 330:	86 e4       	ldi	r24, 0x46	; 70
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN8SevenSeg3runEv>
 338:	08 95       	ret

0000033a <_Z11triggerTaskv>:
 33a:	82 e1       	ldi	r24, 0x12	; 18
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN7Trigger3runEv>
 342:	08 95       	ret

00000344 <_Z10blinkyTaskv>:
 344:	8b e1       	ldi	r24, 0x1B	; 27
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN6Blinky3runEv>
 34c:	08 95       	ret

0000034e <_Z12BPMInputTaskv>:
 34e:	83 e3       	ldi	r24, 0x33	; 51
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 91 03 	call	0x722	; 0x722 <_ZN8BPMInput3runEv>
 356:	08 95       	ret

00000358 <_Z12PrintBPMTaskv>:
 358:	89 e2       	ldi	r24, 0x29	; 41
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 75 04 	call	0x8ea	; 0x8ea <_ZN8PrintBPM3runEv>
 360:	08 95       	ret

00000362 <main>:
void PrintBPMTask( void ){
	printBPM.run();
}

int main(void)
{	
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	66 97       	sbiw	r28, 0x16	; 22
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61

	//Setup interrupts to get the timer to work
	setUpTimerInterrupts();
 376:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z20setUpTimerInterruptsv>
	
	//Initialize task manager
	TaskManager taskManager( timer );
 37a:	64 e6       	ldi	r22, 0x64	; 100
 37c:	71 e0       	ldi	r23, 0x01	; 1
 37e:	ce 01       	movw	r24, r28
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN11TaskManagerC1ER5Timer>
	
	//Add tasks with priority 0-250. 0 is real time. 251 never runs.
	taskManager.addTask( latchTask , 64);
 386:	40 e4       	ldi	r20, 0x40	; 64
 388:	63 e9       	ldi	r22, 0x93	; 147
 38a:	71 e0       	ldi	r23, 0x01	; 1
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( sevenSegmentDisplayTask, 128);
 394:	40 e8       	ldi	r20, 0x80	; 128
 396:	68 e9       	ldi	r22, 0x98	; 152
 398:	71 e0       	ldi	r23, 0x01	; 1
 39a:	ce 01       	movw	r24, r28
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( triggerTask,  4);
 3a2:	44 e0       	ldi	r20, 0x04	; 4
 3a4:	6d e9       	ldi	r22, 0x9D	; 157
 3a6:	71 e0       	ldi	r23, 0x01	; 1
 3a8:	ce 01       	movw	r24, r28
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	//taskManager.addTask( counterTask, 128);
	taskManager.addTask( BPMInputTask, 128 );
 3b0:	40 e8       	ldi	r20, 0x80	; 128
 3b2:	67 ea       	ldi	r22, 0xA7	; 167
 3b4:	71 e0       	ldi	r23, 0x01	; 1
 3b6:	ce 01       	movw	r24, r28
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( PrintBPMTask, 128 );
 3be:	40 e8       	ldi	r20, 0x80	; 128
 3c0:	6c ea       	ldi	r22, 0xAC	; 172
 3c2:	71 e0       	ldi	r23, 0x01	; 1
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( blinkyTask, 128);
 3cc:	40 e8       	ldi	r20, 0x80	; 128
 3ce:	62 ea       	ldi	r22, 0xA2	; 162
 3d0:	71 e0       	ldi	r23, 0x01	; 1
 3d2:	ce 01       	movw	r24, r28
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN11TaskManager7addTaskEPFvvEh>
	
    while (1) 
    {
		taskManager.runTasks();
 3da:	ce 01       	movw	r24, r28
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN11TaskManager8runTasksEv>
 3e2:	fb cf       	rjmp	.-10     	; 0x3da <main+0x78>

000003e4 <_GLOBAL__sub_I_timer>:
 * Author : Koltin Kosik-Harvey
 */
#include "Tasks/setupTasks.h"

//Define a pointer to a timer object.
Timer timer;
 3e4:	84 e6       	ldi	r24, 0x64	; 100
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN5TimerC1Ev>

//Define a pointer to a seven segment display object.
SevenSeg sevenSegmentDisplay(NUM_DISPLAYS, timer);
 3ec:	44 e6       	ldi	r20, 0x64	; 100
 3ee:	51 e0       	ldi	r21, 0x01	; 1
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	86 e4       	ldi	r24, 0x46	; 70
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN8SevenSegC1EhR5Timer>
//Pointer to the counter object
//Task counts to 100 then resets.
//Counter counter;

//Pointer to latching task. Controls latching output on shift registers
Latch latch( sevenSegmentDisplay );
 3fa:	66 e4       	ldi	r22, 0x46	; 70
 3fc:	71 e0       	ldi	r23, 0x01	; 1
 3fe:	84 e4       	ldi	r24, 0x44	; 68
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN5LatchC1ER8SevenSeg>

//Pointer to the BPMInput task. Polls the potentiometer and averages it
BPMInput bpmInput( timer );
 406:	64 e6       	ldi	r22, 0x64	; 100
 408:	71 e0       	ldi	r23, 0x01	; 1
 40a:	83 e3       	ldi	r24, 0x33	; 51
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN8BPMInputC1ER5Timer>

//Pointer to the PrintBPM task. Prints value of the recorded BPM
PrintBPM printBPM( timer, bpmInput, sevenSegmentDisplay );
 412:	26 e4       	ldi	r18, 0x46	; 70
 414:	31 e0       	ldi	r19, 0x01	; 1
 416:	43 e3       	ldi	r20, 0x33	; 51
 418:	51 e0       	ldi	r21, 0x01	; 1
 41a:	64 e6       	ldi	r22, 0x64	; 100
 41c:	71 e0       	ldi	r23, 0x01	; 1
 41e:	89 e2       	ldi	r24, 0x29	; 41
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 62 04 	call	0x8c4	; 0x8c4 <_ZN8PrintBPMC1ER5TimerR8BPMInputR8SevenSeg>

//Pointer to the blinky task
Blinky blinky( timer, bpmInput );
 426:	43 e3       	ldi	r20, 0x33	; 51
 428:	51 e0       	ldi	r21, 0x01	; 1
 42a:	64 e6       	ldi	r22, 0x64	; 100
 42c:	71 e0       	ldi	r23, 0x01	; 1
 42e:	8b e1       	ldi	r24, 0x1B	; 27
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN6BlinkyC1ER5TimerR8BPMInput>

//Pointer to trigger task
//Used for triggering the instruments in the sequencer
Trigger trigger( timer, blinky );
 436:	4b e1       	ldi	r20, 0x1B	; 27
 438:	51 e0       	ldi	r21, 0x01	; 1
 43a:	64 e6       	ldi	r22, 0x64	; 100
 43c:	71 e0       	ldi	r23, 0x01	; 1
 43e:	82 e1       	ldi	r24, 0x12	; 18
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN7TriggerC1ER5TimerR6Blinky>
 446:	08 95       	ret

00000448 <_GLOBAL__sub_D_timer>:
 448:	82 e1       	ldi	r24, 0x12	; 18
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN7TriggerD1Ev>

//Pointer to the PrintBPM task. Prints value of the recorded BPM
PrintBPM printBPM( timer, bpmInput, sevenSegmentDisplay );

//Pointer to the blinky task
Blinky blinky( timer, bpmInput );
 450:	8b e1       	ldi	r24, 0x1B	; 27
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN6BlinkyD1Ev>

//Pointer to the BPMInput task. Polls the potentiometer and averages it
BPMInput bpmInput( timer );

//Pointer to the PrintBPM task. Prints value of the recorded BPM
PrintBPM printBPM( timer, bpmInput, sevenSegmentDisplay );
 458:	89 e2       	ldi	r24, 0x29	; 41
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 a4 04 	call	0x948	; 0x948 <_ZN8PrintBPMD1Ev>

//Pointer to latching task. Controls latching output on shift registers
Latch latch( sevenSegmentDisplay );

//Pointer to the BPMInput task. Polls the potentiometer and averages it
BPMInput bpmInput( timer );
 460:	83 e3       	ldi	r24, 0x33	; 51
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN8BPMInputD1Ev>
//Pointer to the counter object
//Task counts to 100 then resets.
//Counter counter;

//Pointer to latching task. Controls latching output on shift registers
Latch latch( sevenSegmentDisplay );
 468:	84 e4       	ldi	r24, 0x44	; 68
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN5LatchD1Ev>

//Define a pointer to a timer object.
Timer timer;

//Define a pointer to a seven segment display object.
SevenSeg sevenSegmentDisplay(NUM_DISPLAYS, timer);
 470:	86 e4       	ldi	r24, 0x46	; 70
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN8SevenSegD1Ev>
 * Author : Koltin Kosik-Harvey
 */
#include "Tasks/setupTasks.h"

//Define a pointer to a timer object.
Timer timer;
 478:	84 e6       	ldi	r24, 0x64	; 100
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN5TimerD1Ev>
 480:	08 95       	ret

00000482 <_Znwj>:
	 return malloc(size);
 }

 void operator delete[](void * ptr)
 {
	 free(ptr);
 482:	0e 94 df 05 	call	0xbbe	; 0xbbe <malloc>
 486:	08 95       	ret

00000488 <_Z5pow10h>:
 }
 
 uint16_t pow10( uint8_t exponent )
 {
	 if (exponent == 0){
 488:	88 23       	and	r24, r24
 48a:	f1 f0       	breq	.+60     	; 0x4c8 <_Z5pow10h+0x40>
		 return 1;
	 }
	 uint16_t output = 1;
	 for(int i=0; i < exponent ; i++){
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	18 16       	cp	r1, r24
 490:	19 06       	cpc	r1, r25
 492:	ac f4       	brge	.+42     	; 0x4be <_Z5pow10h+0x36>
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	30 e0       	ldi	r19, 0x00	; 0
		 output = output * 10;
 49c:	b9 01       	movw	r22, r18
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	22 0f       	add	r18, r18
 4a8:	33 1f       	adc	r19, r19
 4aa:	22 0f       	add	r18, r18
 4ac:	33 1f       	adc	r19, r19
 4ae:	26 0f       	add	r18, r22
 4b0:	37 1f       	adc	r19, r23
 {
	 if (exponent == 0){
		 return 1;
	 }
	 uint16_t output = 1;
	 for(int i=0; i < exponent ; i++){
 4b2:	4f 5f       	subi	r20, 0xFF	; 255
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255
 4b6:	48 17       	cp	r20, r24
 4b8:	59 07       	cpc	r21, r25
 4ba:	81 f7       	brne	.-32     	; 0x49c <_Z5pow10h+0x14>
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <_Z5pow10h+0x3a>
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
		 output = output * 10;
	 }
	 return output;
 4c2:	82 2f       	mov	r24, r18
 4c4:	93 2f       	mov	r25, r19
 4c6:	08 95       	ret
 }
 
 uint16_t pow10( uint8_t exponent )
 {
	 if (exponent == 0){
		 return 1;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
	 uint16_t output = 1;
	 for(int i=0; i < exponent ; i++){
		 output = output * 10;
	 }
	 return output;
 4cc:	08 95       	ret

000004ce <_ZN9AnalogPinC1Eh>:
{
	//Ensure ADSC is low.
	while ( this->if_done_conv() == false ){};
	ADCSRA |= (1 << ADIF); // Clear ADC Interrupt Flag	
	return ADCH;
}
 4ce:	fc 01       	movw	r30, r24
 4d0:	60 83       	st	Z, r22
 4d2:	ee e7       	ldi	r30, 0x7E	; 126
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	20 81       	ld	r18, Z
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <_ZN9AnalogPinC1Eh+0x14>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <_ZN9AnalogPinC1Eh+0x10>
 4e6:	82 2b       	or	r24, r18
 4e8:	80 83       	st	Z, r24
 4ea:	ec e7       	ldi	r30, 0x7C	; 124
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	80 64       	ori	r24, 0x40	; 64
 4f2:	80 83       	st	Z, r24
 4f4:	ea e7       	ldi	r30, 0x7A	; 122
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	80 68       	ori	r24, 0x80	; 128
 4fc:	80 83       	st	Z, r24
 4fe:	80 81       	ld	r24, Z
 500:	87 60       	ori	r24, 0x07	; 7
 502:	80 83       	st	Z, r24
 504:	08 95       	ret

00000506 <_ZN9AnalogPin10conv_beginEv>:
 506:	dc 01       	movw	r26, r24
 508:	ec e7       	ldi	r30, 0x7C	; 124
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	90 81       	ld	r25, Z
 50e:	90 7f       	andi	r25, 0xF0	; 240
 510:	90 83       	st	Z, r25
 512:	90 81       	ld	r25, Z
 514:	8c 91       	ld	r24, X
 516:	89 2b       	or	r24, r25
 518:	80 83       	st	Z, r24
 51a:	ea e7       	ldi	r30, 0x7A	; 122
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	80 64       	ori	r24, 0x40	; 64
 522:	80 83       	st	Z, r24
 524:	08 95       	ret

00000526 <_ZN9AnalogPin12if_done_convEv>:
 526:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 52a:	86 fb       	bst	r24, 6
 52c:	88 27       	eor	r24, r24
 52e:	80 f9       	bld	r24, 0
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	89 27       	eor	r24, r25
 534:	08 95       	ret

00000536 <_ZN9AnalogPin10read_10BitEv>:

//Reads ADC with 10 bit precision (slower)
uint16_t AnalogPin::read_10Bit( void )
{
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	ec 01       	movw	r28, r24
	//Ensure ADSC is low.
	while ( this->if_done_conv() == false ){};	
 53c:	ce 01       	movw	r24, r28
 53e:	0e 94 93 02 	call	0x526	; 0x526 <_ZN9AnalogPin12if_done_convEv>
 542:	88 23       	and	r24, r24
 544:	d9 f3       	breq	.-10     	; 0x53c <_ZN9AnalogPin10read_10BitEv+0x6>
	ADCSRA |= (1 << ADIF); // Clear ADC Interrupt Flag
 546:	ea e7       	ldi	r30, 0x7A	; 122
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	80 61       	ori	r24, 0x10	; 16
 54e:	80 83       	st	Z, r24
	return ADC;
 550:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 554:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <_ZN3Pin17setDirectionInputEv>:
//ANDs the pinNumber mask with the input pin register
//ie 00010000 & 11110000 = 00010000
uint8_t Pin::read( void )
{
	return ( pinNumber & *pin_register );
}
 55e:	dc 01       	movw	r26, r24
 560:	ed 91       	ld	r30, X+
 562:	fc 91       	ld	r31, X
 564:	11 97       	sbiw	r26, 0x01	; 1
 566:	90 81       	ld	r25, Z
 568:	16 96       	adiw	r26, 0x06	; 6
 56a:	8c 91       	ld	r24, X
 56c:	80 95       	com	r24
 56e:	89 23       	and	r24, r25
 570:	80 83       	st	Z, r24
 572:	08 95       	ret

00000574 <_ZN3Pin7setHighEv>:
	}
}

//Sets the pin high
void Pin::setHigh( void )
{
 574:	dc 01       	movw	r26, r24
	//set the pin high
	*port_register |= pinNumber;
 576:	12 96       	adiw	r26, 0x02	; 2
 578:	ed 91       	ld	r30, X+
 57a:	fc 91       	ld	r31, X
 57c:	13 97       	sbiw	r26, 0x03	; 3
 57e:	90 81       	ld	r25, Z
 580:	16 96       	adiw	r26, 0x06	; 6
 582:	8c 91       	ld	r24, X
 584:	89 2b       	or	r24, r25
 586:	80 83       	st	Z, r24
 588:	08 95       	ret

0000058a <_ZN3Pin6setLowEv>:
}

//Sets the pin low
void Pin::setLow( void )
{
 58a:	dc 01       	movw	r26, r24
	*port_register &= ~pinNumber;
 58c:	12 96       	adiw	r26, 0x02	; 2
 58e:	ed 91       	ld	r30, X+
 590:	fc 91       	ld	r31, X
 592:	13 97       	sbiw	r26, 0x03	; 3
 594:	90 81       	ld	r25, Z
 596:	16 96       	adiw	r26, 0x06	; 6
 598:	8c 91       	ld	r24, X
 59a:	80 95       	com	r24
 59c:	89 23       	and	r24, r25
 59e:	80 83       	st	Z, r24
 5a0:	08 95       	ret

000005a2 <_ZN3Pin18setDirectionOutputEv>:
{	
	*data_direction_reg &= ~pinNumber;
}

void Pin::setDirectionOutput( void )
{
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	ec 01       	movw	r28, r24
	//Set the pin to low
	this->setLow();
 5a8:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN3Pin6setLowEv>

	//Set data direction to output for the pin
	*data_direction_reg |= pinNumber;
 5ac:	e8 81       	ld	r30, Y
 5ae:	f9 81       	ldd	r31, Y+1	; 0x01
 5b0:	90 81       	ld	r25, Z
 5b2:	8e 81       	ldd	r24, Y+6	; 0x06
 5b4:	89 2b       	or	r24, r25
 5b6:	80 83       	st	Z, r24
}
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <_ZN3PinC1EhPVhh>:
*/

#include "Pin.h"

// default constructor
Pin::Pin(uint8_t PIN_NUMBER, volatile uint8_t * PortRegister, uint8_t DIRECTION)
 5be:	fc 01       	movw	r30, r24
{
	pin_register = PortRegister - 2;
 5c0:	ca 01       	movw	r24, r20
 5c2:	02 97       	sbiw	r24, 0x02	; 2
 5c4:	95 83       	std	Z+5, r25	; 0x05
 5c6:	84 83       	std	Z+4, r24	; 0x04
	data_direction_reg = PortRegister - 1;
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	91 83       	std	Z+1, r25	; 0x01
 5cc:	80 83       	st	Z, r24
	port_register = PortRegister;
 5ce:	53 83       	std	Z+3, r21	; 0x03
 5d0:	42 83       	std	Z+2, r20	; 0x02
	
	//Stores pin number as a mask. Makes it easier for operations like setting the pin value
	pinNumber = (1 << PIN_NUMBER);
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <_ZN3PinC1EhPVhh+0x1a>
 5d6:	88 0f       	add	r24, r24
 5d8:	6a 95       	dec	r22
 5da:	ea f7       	brpl	.-6      	; 0x5d6 <_ZN3PinC1EhPVhh+0x18>
 5dc:	86 83       	std	Z+6, r24	; 0x06

	if ( DIRECTION == OUTPUT )
 5de:	21 30       	cpi	r18, 0x01	; 1
 5e0:	21 f4       	brne	.+8      	; 0x5ea <_ZN3PinC1EhPVhh+0x2c>
	{
		this->setDirectionOutput();
 5e2:	cf 01       	movw	r24, r30
 5e4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_ZN3Pin18setDirectionOutputEv>
 5e8:	08 95       	ret
	} else {
		this->setDirectionInput();
 5ea:	cf 01       	movw	r24, r30
 5ec:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN3Pin17setDirectionInputEv>
 5f0:	08 95       	ret

000005f2 <_ZN13ShiftRegisterC1Ev>:

ShiftRegister::ShiftRegister( Pin * shift, Pin * latch, Pin * serial )
{
	shiftPin = shift;
	latchPin = latch;
	serialPin = serial;
 5f2:	08 95       	ret

000005f4 <_ZN13ShiftRegister11singleShiftEv>:
}

void ShiftRegister::singleShift( void )
{
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	ec 01       	movw	r28, r24
	//Shift single bit in.
	shiftPin->setHigh();
 5fa:	88 81       	ld	r24, Y
 5fc:	99 81       	ldd	r25, Y+1	; 0x01
 5fe:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN3Pin7setHighEv>
	//wait
	timer->wait_1us();
 602:	8e 81       	ldd	r24, Y+6	; 0x06
 604:	9f 81       	ldd	r25, Y+7	; 0x07
 606:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Timer8wait_1usEv>
	//Set shift high
	shiftPin->setLow();
 60a:	88 81       	ld	r24, Y
 60c:	99 81       	ldd	r25, Y+1	; 0x01
 60e:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN3Pin6setLowEv>
	//wait
	timer->wait_1us();
 612:	8e 81       	ldd	r24, Y+6	; 0x06
 614:	9f 81       	ldd	r25, Y+7	; 0x07
 616:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Timer8wait_1usEv>
}
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <_ZN13ShiftRegister5latchEv>:

void ShiftRegister::latch( void )
{
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	ec 01       	movw	r28, r24
	//Latch output
	latchPin->setHigh();
 626:	8a 81       	ldd	r24, Y+2	; 0x02
 628:	9b 81       	ldd	r25, Y+3	; 0x03
 62a:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN3Pin7setHighEv>
	//wait
	timer->wait_1us();
 62e:	8e 81       	ldd	r24, Y+6	; 0x06
 630:	9f 81       	ldd	r25, Y+7	; 0x07
 632:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Timer8wait_1usEv>
	//Set latch high
	latchPin->setLow();
 636:	8a 81       	ldd	r24, Y+2	; 0x02
 638:	9b 81       	ldd	r25, Y+3	; 0x03
 63a:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN3Pin6setLowEv>

}
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <_ZN13ShiftRegister17getTimerReferenceER5Timer>:

void ShiftRegister::getTimerReference( Timer & ptr )
{
	timer = &ptr;
 644:	fc 01       	movw	r30, r24
 646:	77 83       	std	Z+7, r23	; 0x07
 648:	66 83       	std	Z+6, r22	; 0x06
 64a:	08 95       	ret

0000064c <_ZN13ShiftRegisterD1Ev>:
} //getTimerReference

// default destructor
ShiftRegister::~ShiftRegister()
 64c:	08 95       	ret

0000064e <_ZN18ShiftRegister_SIPOC1Ev>:
//Constructs object with pinout
ShiftRegister_SIPO::ShiftRegister_SIPO( Pin * shift, Pin * latch, Pin * serial ) : ShiftRegister( shift, latch, serial )
{
	//Start off with output byte 0
	output_byte = 0;
}
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	ec 01       	movw	r28, r24
 654:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN13ShiftRegisterC1Ev>
 658:	19 86       	std	Y+9, r1	; 0x09
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <_ZN18ShiftRegister_SIPO9shiftBitsEv>:

//Shifts in a bit into the shift register.
void ShiftRegister_SIPO::shiftBits( void )
{		
 660:	0f 93       	push	r16
 662:	1f 93       	push	r17
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	ec 01       	movw	r28, r24
	//Starting shifting with shift/serial/latch at 0
	latchPin->setLow();
 66a:	8a 81       	ldd	r24, Y+2	; 0x02
 66c:	9b 81       	ldd	r25, Y+3	; 0x03
 66e:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN3Pin6setLowEv>
	shiftPin->setLow();
 672:	88 81       	ld	r24, Y
 674:	99 81       	ldd	r25, Y+1	; 0x01
 676:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN3Pin6setLowEv>
	serialPin->setLow();
 67a:	8c 81       	ldd	r24, Y+4	; 0x04
 67c:	9d 81       	ldd	r25, Y+5	; 0x05
 67e:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN3Pin6setLowEv>

	//Wait 1us
	timer->wait_1us();
 682:	8e 81       	ldd	r24, Y+6	; 0x06
 684:	9f 81       	ldd	r25, Y+7	; 0x07
 686:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Timer8wait_1usEv>
		
	for ( int i=0; i < 8; i++){
 68a:	00 e0       	ldi	r16, 0x00	; 0
 68c:	10 e0       	ldi	r17, 0x00	; 0
			
		//Load serial pin with bit
			
		//If the bit needs to be set to 1...
		if( output_byte & (1 << i) ){
 68e:	29 85       	ldd	r18, Y+9	; 0x09
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	00 2e       	mov	r0, r16
 694:	02 c0       	rjmp	.+4      	; 0x69a <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x3a>
 696:	35 95       	asr	r19
 698:	27 95       	ror	r18
 69a:	0a 94       	dec	r0
 69c:	e2 f7       	brpl	.-8      	; 0x696 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x36>
 69e:	20 ff       	sbrs	r18, 0
 6a0:	05 c0       	rjmp	.+10     	; 0x6ac <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x4c>

			serialPin->setHigh();
 6a2:	8c 81       	ldd	r24, Y+4	; 0x04
 6a4:	9d 81       	ldd	r25, Y+5	; 0x05
 6a6:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN3Pin7setHighEv>
 6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x54>
				
		//Else set to 0
		} else {
			
			serialPin->setLow();
 6ac:	8c 81       	ldd	r24, Y+4	; 0x04
 6ae:	9d 81       	ldd	r25, Y+5	; 0x05
 6b0:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN3Pin6setLowEv>
		}
			
		timer->wait_1us();
 6b4:	8e 81       	ldd	r24, Y+6	; 0x06
 6b6:	9f 81       	ldd	r25, Y+7	; 0x07
 6b8:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Timer8wait_1usEv>
			
		this->singleShift();
 6bc:	ce 01       	movw	r24, r28
 6be:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN13ShiftRegister11singleShiftEv>
	serialPin->setLow();

	//Wait 1us
	timer->wait_1us();
		
	for ( int i=0; i < 8; i++){
 6c2:	0f 5f       	subi	r16, 0xFF	; 255
 6c4:	1f 4f       	sbci	r17, 0xFF	; 255
 6c6:	08 30       	cpi	r16, 0x08	; 8
 6c8:	11 05       	cpc	r17, r1
 6ca:	09 f7       	brne	.-62     	; 0x68e <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x2e>
		timer->wait_1us();
			
		this->singleShift();
	}
	
} //ShiftBits
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	08 95       	ret

000006d6 <_ZN18ShiftRegister_SIPO8loadByteEh>:

void ShiftRegister_SIPO::loadByte( uint8_t byteToLoad )
{
	output_byte = byteToLoad;
 6d6:	fc 01       	movw	r30, r24
 6d8:	61 87       	std	Z+9, r22	; 0x09
 6da:	08 95       	ret

000006dc <_ZN18ShiftRegister_SIPOD1Ev>:
}

// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
 6dc:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN13ShiftRegisterD1Ev>
 6e0:	08 95       	ret

000006e2 <_ZN8BPMInputC1ER5Timer>:
*/


#include "BPMInput.h"

BPMInput::BPMInput( Timer & timerPtr ) : AnalogPin ( BPM_INPUT_PIN )
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	ec 01       	movw	r28, r24
 6ec:	8b 01       	movw	r16, r22
 6ee:	63 e0       	ldi	r22, 0x03	; 3
 6f0:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN9AnalogPinC1Eh>
{
	//Store reference to timer pointer
	timer = &timerPtr;
 6f4:	1f 83       	std	Y+7, r17	; 0x07
 6f6:	0e 83       	std	Y+6, r16	; 0x06
	
	//Initialize Conversion Started flag
	conversionFinished = false;
 6f8:	19 82       	std	Y+1, r1	; 0x01
	
	//Initialize time stamp
	timeStamp = timer->millis();
 6fa:	c8 01       	movw	r24, r16
 6fc:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 700:	68 87       	std	Y+8, r22	; 0x08
 702:	79 87       	std	Y+9, r23	; 0x09
 704:	8a 87       	std	Y+10, r24	; 0x0a
 706:	9b 87       	std	Y+11, r25	; 0x0b
	
	//Initialize iteration counter
	iteration = 0;
 708:	18 8a       	std	Y+16, r1	; 0x10
	
	//Initialize sum for averaging 
	sum = 0;
 70a:	1c 86       	std	Y+12, r1	; 0x0c
 70c:	1d 86       	std	Y+13, r1	; 0x0d
 70e:	1e 86       	std	Y+14, r1	; 0x0e
 710:	1f 86       	std	Y+15, r1	; 0x0f
	
	//Begin first conversion
	this->conv_begin();
 712:	ce 01       	movw	r24, r28
 714:	0e 94 83 02 	call	0x506	; 0x506 <_ZN9AnalogPin10conv_beginEv>
	
} //BPMInput
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	0f 91       	pop	r16
 720:	08 95       	ret

00000722 <_ZN8BPMInput3runEv>:

void BPMInput::run( void )
{
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	ec 01       	movw	r28, r24
	if ( timer->elapsed_millis(timeStamp) > BPM_PIN_POLLING_TIME ){
 728:	48 85       	ldd	r20, Y+8	; 0x08
 72a:	59 85       	ldd	r21, Y+9	; 0x09
 72c:	6a 85       	ldd	r22, Y+10	; 0x0a
 72e:	7b 85       	ldd	r23, Y+11	; 0x0b
 730:	8e 81       	ldd	r24, Y+6	; 0x06
 732:	9f 81       	ldd	r25, Y+7	; 0x07
 734:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5Timer14elapsed_millisEm>
 738:	63 33       	cpi	r22, 0x33	; 51
 73a:	71 05       	cpc	r23, r1
 73c:	81 05       	cpc	r24, r1
 73e:	91 05       	cpc	r25, r1
 740:	f0 f1       	brcs	.+124    	; 0x7be <_ZN8BPMInput3runEv+0x9c>
		
		//Check if previous ADC conversion is complete.
		if ( this->if_done_conv()  ){
 742:	ce 01       	movw	r24, r28
 744:	0e 94 93 02 	call	0x526	; 0x526 <_ZN9AnalogPin12if_done_convEv>
 748:	88 23       	and	r24, r24
 74a:	c9 f1       	breq	.+114    	; 0x7be <_ZN8BPMInput3runEv+0x9c>
			
			//Read a sample of the ADC
			sum += this->read_10Bit();
 74c:	ce 01       	movw	r24, r28
 74e:	0e 94 9b 02 	call	0x536	; 0x536 <_ZN9AnalogPin10read_10BitEv>
 752:	4c 85       	ldd	r20, Y+12	; 0x0c
 754:	5d 85       	ldd	r21, Y+13	; 0x0d
 756:	6e 85       	ldd	r22, Y+14	; 0x0e
 758:	7f 85       	ldd	r23, Y+15	; 0x0f
 75a:	48 0f       	add	r20, r24
 75c:	59 1f       	adc	r21, r25
 75e:	61 1d       	adc	r22, r1
 760:	71 1d       	adc	r23, r1
 762:	4c 87       	std	Y+12, r20	; 0x0c
 764:	5d 87       	std	Y+13, r21	; 0x0d
 766:	6e 87       	std	Y+14, r22	; 0x0e
 768:	7f 87       	std	Y+15, r23	; 0x0f
			
			//Begin conversion for next iteration
			this->conv_begin();
 76a:	ce 01       	movw	r24, r28
 76c:	0e 94 83 02 	call	0x506	; 0x506 <_ZN9AnalogPin10conv_beginEv>
			
			//Increment the iteration count
			iteration++;
 770:	88 89       	ldd	r24, Y+16	; 0x10
 772:	8f 5f       	subi	r24, 0xFF	; 255
 774:	88 8b       	std	Y+16, r24	; 0x10
			
			//Check if we take the required amount of samples for averaging
			if ( iteration >= SAMPLES ){
 776:	80 31       	cpi	r24, 0x10	; 16
 778:	d0 f0       	brcs	.+52     	; 0x7ae <_ZN8BPMInput3runEv+0x8c>
				
				//Value is the average however this would leave with a value of 1024 as MAX
				value = (sum >> SAMPLES_LOG2);
 77a:	8c 85       	ldd	r24, Y+12	; 0x0c
 77c:	9d 85       	ldd	r25, Y+13	; 0x0d
 77e:	ae 85       	ldd	r26, Y+14	; 0x0e
 780:	bf 85       	ldd	r27, Y+15	; 0x0f
				
				//Convert value to a range between 0-256 essential devide by four
				value = value >> 2;
 782:	68 94       	set
 784:	15 f8       	bld	r1, 5
 786:	b6 95       	lsr	r27
 788:	a7 95       	ror	r26
 78a:	97 95       	ror	r25
 78c:	87 95       	ror	r24
 78e:	16 94       	lsr	r1
 790:	d1 f7       	brne	.-12     	; 0x786 <_ZN8BPMInput3runEv+0x64>
				
				//Add the offset
				value = value + BPM_OFFSET;
 792:	4e 96       	adiw	r24, 0x1e	; 30
 794:	a1 1d       	adc	r26, r1
 796:	b1 1d       	adc	r27, r1
 798:	8a 83       	std	Y+2, r24	; 0x02
 79a:	9b 83       	std	Y+3, r25	; 0x03
 79c:	ac 83       	std	Y+4, r26	; 0x04
 79e:	bd 83       	std	Y+5, r27	; 0x05
	
				//Reset sum
				sum = 0;
 7a0:	1c 86       	std	Y+12, r1	; 0x0c
 7a2:	1d 86       	std	Y+13, r1	; 0x0d
 7a4:	1e 86       	std	Y+14, r1	; 0x0e
 7a6:	1f 86       	std	Y+15, r1	; 0x0f
				
				//Reset iteration count
				iteration = 0;	
 7a8:	18 8a       	std	Y+16, r1	; 0x10
				
				//Indicate the conversion is done
				conversionFinished = true;
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	89 83       	std	Y+1, r24	; 0x01
			}
			
			//Reset the time stamp
			timeStamp = timer->millis();
 7ae:	8e 81       	ldd	r24, Y+6	; 0x06
 7b0:	9f 81       	ldd	r25, Y+7	; 0x07
 7b2:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 7b6:	68 87       	std	Y+8, r22	; 0x08
 7b8:	79 87       	std	Y+9, r23	; 0x09
 7ba:	8a 87       	std	Y+10, r24	; 0x0a
 7bc:	9b 87       	std	Y+11, r25	; 0x0b
		}
	}
}
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	08 95       	ret

000007c4 <_ZN8BPMInputD1Ev>:


// default destructor
BPMInput::~BPMInput()
 7c4:	08 95       	ret

000007c6 <_ZN6BlinkyC1ER5TimerR8BPMInput>:


#include "Blinky.h"

//Initialize the pins. 
Blinky::Blinky( Timer & timerPtr, BPMInput & bpmInputRef )
 7c6:	0f 93       	push	r16
 7c8:	1f 93       	push	r17
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	ec 01       	movw	r28, r24
{
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
 7d0:	50 9a       	sbi	0x0a, 0	; 10
		
	//Used for the "Status LED"
	DDRD |= (1 << PORTD1);
 7d2:	51 9a       	sbi	0x0a, 1	; 10
	
	//Used for Task - "Blinky". Indicates next value of LED
	LEDValueNext = 1;
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	8a 83       	std	Y+2, r24	; 0x02
	
	//initialize time stamp to zero
	timeStamp = 0;
 7d8:	18 86       	std	Y+8, r1	; 0x08
 7da:	19 86       	std	Y+9, r1	; 0x09
 7dc:	1a 86       	std	Y+10, r1	; 0x0a
 7de:	1b 86       	std	Y+11, r1	; 0x0b
	
	//Get reference to the timer
	timer = &timerPtr;
 7e0:	7d 83       	std	Y+5, r23	; 0x05
 7e2:	6c 83       	std	Y+4, r22	; 0x04
	
	//Get reference to the BPM input
	bpmInput = &bpmInputRef;
 7e4:	5f 83       	std	Y+7, r21	; 0x07
 7e6:	4e 83       	std	Y+6, r20	; 0x06
	
	blinkyPin = new Pin(0, &PORTD, OUTPUT);
 7e8:	87 e0       	ldi	r24, 0x07	; 7
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 41 02 	call	0x482	; 0x482 <_Znwj>
 7f0:	8c 01       	movw	r16, r24
 7f2:	21 e0       	ldi	r18, 0x01	; 1
 7f4:	4b e2       	ldi	r20, 0x2B	; 43
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN3PinC1EhPVhh>
 7fe:	1d 87       	std	Y+13, r17	; 0x0d
 800:	0c 87       	std	Y+12, r16	; 0x0c
	
	//initialize pulse width
	pulseWidth = 5000;
 802:	88 e8       	ldi	r24, 0x88	; 136
 804:	93 e1       	ldi	r25, 0x13	; 19
 806:	99 83       	std	Y+1, r25	; 0x01
 808:	88 83       	st	Y, r24
	
	//init flag
	justSetHigh = false;
 80a:	1b 82       	std	Y+3, r1	; 0x03
	
} //Blinky
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	08 95       	ret

00000816 <_ZN6Blinky3runEv>:

void Blinky::run()
{
 816:	0f 93       	push	r16
 818:	1f 93       	push	r17
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	ec 01       	movw	r28, r24
	if ( timer->elapsed_millis( timeStamp ) > pulseWidth ) {
 820:	48 85       	ldd	r20, Y+8	; 0x08
 822:	59 85       	ldd	r21, Y+9	; 0x09
 824:	6a 85       	ldd	r22, Y+10	; 0x0a
 826:	7b 85       	ldd	r23, Y+11	; 0x0b
 828:	8c 81       	ldd	r24, Y+4	; 0x04
 82a:	9d 81       	ldd	r25, Y+5	; 0x05
 82c:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5Timer14elapsed_millisEm>
 830:	28 81       	ld	r18, Y
 832:	39 81       	ldd	r19, Y+1	; 0x01
 834:	89 01       	movw	r16, r18
 836:	20 e0       	ldi	r18, 0x00	; 0
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	06 17       	cp	r16, r22
 83c:	17 07       	cpc	r17, r23
 83e:	28 07       	cpc	r18, r24
 840:	39 07       	cpc	r19, r25
 842:	40 f5       	brcc	.+80     	; 0x894 <_ZN6Blinky3runEv+0x7e>
		
		//Update time stamp
		timeStamp = timer->millis();
 844:	8c 81       	ldd	r24, Y+4	; 0x04
 846:	9d 81       	ldd	r25, Y+5	; 0x05
 848:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 84c:	68 87       	std	Y+8, r22	; 0x08
 84e:	79 87       	std	Y+9, r23	; 0x09
 850:	8a 87       	std	Y+10, r24	; 0x0a
 852:	9b 87       	std	Y+11, r25	; 0x0b
		
		if( LEDValueNext == 1 ){
 854:	8a 81       	ldd	r24, Y+2	; 0x02
 856:	81 30       	cpi	r24, 0x01	; 1
 858:	31 f4       	brne	.+12     	; 0x866 <_ZN6Blinky3runEv+0x50>
			//Set Test LED to OFF
			blinkyPin->setHigh();	
 85a:	8c 85       	ldd	r24, Y+12	; 0x0c
 85c:	9d 85       	ldd	r25, Y+13	; 0x0d
 85e:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN3Pin7setHighEv>
			LEDValueNext = 0;
 862:	1a 82       	std	Y+2, r1	; 0x02
 864:	07 c0       	rjmp	.+14     	; 0x874 <_ZN6Blinky3runEv+0x5e>
			
			} else {
			//Set Test LED to ON
			blinkyPin->setLow();
 866:	8c 85       	ldd	r24, Y+12	; 0x0c
 868:	9d 85       	ldd	r25, Y+13	; 0x0d
 86a:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN3Pin6setLowEv>
			
			justSetHigh = true;
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	8b 83       	std	Y+3, r24	; 0x03
			
			LEDValueNext = 1;
 872:	8a 83       	std	Y+2, r24	; 0x02
		//Recalculate pulse rate. in units of 0.1ms 
		//Timer counter to 600000 per 0.1ms so if we have 60 BPM
		//The delay would be 600000/60 = 10000;
		//Then we need to devide by two, to have the clock go up and down.
		//Period would still be the 1/BPM.
		pulseWidth = 600000 / bpmInput->value;
 874:	ee 81       	ldd	r30, Y+6	; 0x06
 876:	ff 81       	ldd	r31, Y+7	; 0x07
 878:	22 81       	ldd	r18, Z+2	; 0x02
 87a:	33 81       	ldd	r19, Z+3	; 0x03
 87c:	44 81       	ldd	r20, Z+4	; 0x04
 87e:	55 81       	ldd	r21, Z+5	; 0x05
 880:	60 ec       	ldi	r22, 0xC0	; 192
 882:	77 e2       	ldi	r23, 0x27	; 39
 884:	89 e0       	ldi	r24, 0x09	; 9
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 a8 05 	call	0xb50	; 0xb50 <__udivmodsi4>
		pulseWidth = pulseWidth >> 1;
 88c:	36 95       	lsr	r19
 88e:	27 95       	ror	r18
 890:	39 83       	std	Y+1, r19	; 0x01
 892:	28 83       	st	Y, r18
		
	}
}
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	1f 91       	pop	r17
 89a:	0f 91       	pop	r16
 89c:	08 95       	ret

0000089e <_ZN6BlinkyD1Ev>:

// default destructor
Blinky::~Blinky()
 89e:	08 95       	ret

000008a0 <_ZN5LatchC1ER8SevenSeg>:
#include "Latch.h"

Latch::Latch( SevenSeg & sevenSegPtr )
{
	//Reference to the seven segment display
	sevenSegmentDisplay = &sevenSegPtr;
 8a0:	fc 01       	movw	r30, r24
 8a2:	71 83       	std	Z+1, r23	; 0x01
 8a4:	60 83       	st	Z, r22
 8a6:	08 95       	ret

000008a8 <_ZN5Latch3runEv>:
} //Latch

void Latch::run( void )
{
	if( sevenSegmentDisplay->shiftComplete == true){
 8a8:	dc 01       	movw	r26, r24
 8aa:	ed 91       	ld	r30, X+
 8ac:	fc 91       	ld	r31, X
 8ae:	11 97       	sbiw	r26, 0x01	; 1
 8b0:	22 85       	ldd	r18, Z+10	; 0x0a
 8b2:	21 30       	cpi	r18, 0x01	; 1
 8b4:	29 f4       	brne	.+10     	; 0x8c0 <_ZN5Latch3runEv+0x18>
		
		//Reset the shift complete flag
		sevenSegmentDisplay->shiftComplete = false;
 8b6:	12 86       	std	Z+10, r1	; 0x0a
		
		//Latch shift registers. Output should show on seven segment display
		sevenSegmentDisplay->latch();
 8b8:	8d 91       	ld	r24, X+
 8ba:	9c 91       	ld	r25, X
 8bc:	0e 94 10 03 	call	0x620	; 0x620 <_ZN13ShiftRegister5latchEv>
 8c0:	08 95       	ret

000008c2 <_ZN5LatchD1Ev>:
	}
}

// default destructor
Latch::~Latch()
 8c2:	08 95       	ret

000008c4 <_ZN8PrintBPMC1ER5TimerR8BPMInputR8SevenSeg>:


#include "PrintBPM.h"


PrintBPM::PrintBPM( Timer & timerPtr, BPMInput & BPMInputPtr, SevenSeg & sevenSegPtr)
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	ec 01       	movw	r28, r24
 8ca:	cb 01       	movw	r24, r22
{	
	//Get reference to timer object
	timer = &timerPtr;
 8cc:	7b 83       	std	Y+3, r23	; 0x03
 8ce:	6a 83       	std	Y+2, r22	; 0x02
	
	//Get reference to the BPM input object
	BPMInputRef = &BPMInputPtr;
 8d0:	59 83       	std	Y+1, r21	; 0x01
 8d2:	48 83       	st	Y, r20
	
	//Get reference to the seven segment display
	sevenSeg = &sevenSegPtr;
 8d4:	3d 83       	std	Y+5, r19	; 0x05
 8d6:	2c 83       	std	Y+4, r18	; 0x04
	
	//Initialize timeStamp
	timeStamp = timer->millis();
 8d8:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 8dc:	6e 83       	std	Y+6, r22	; 0x06
 8de:	7f 83       	std	Y+7, r23	; 0x07
 8e0:	88 87       	std	Y+8, r24	; 0x08
 8e2:	99 87       	std	Y+9, r25	; 0x09
	
} //PrintBPM
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	08 95       	ret

000008ea <_ZN8PrintBPM3runEv>:

void PrintBPM::run( void )
{
 8ea:	cf 93       	push	r28
 8ec:	df 93       	push	r29
 8ee:	ec 01       	movw	r28, r24
	if( timer->elapsed_millis(timeStamp) > BPM_MIN_UPDATE_TIME ){
 8f0:	4e 81       	ldd	r20, Y+6	; 0x06
 8f2:	5f 81       	ldd	r21, Y+7	; 0x07
 8f4:	68 85       	ldd	r22, Y+8	; 0x08
 8f6:	79 85       	ldd	r23, Y+9	; 0x09
 8f8:	8a 81       	ldd	r24, Y+2	; 0x02
 8fa:	9b 81       	ldd	r25, Y+3	; 0x03
 8fc:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5Timer14elapsed_millisEm>
 900:	69 3e       	cpi	r22, 0xE9	; 233
 902:	73 40       	sbci	r23, 0x03	; 3
 904:	81 05       	cpc	r24, r1
 906:	91 05       	cpc	r25, r1
 908:	e0 f0       	brcs	.+56     	; 0x942 <__stack+0x43>
		
		//See if the ADC conversion to get the BPM has been completed
		if ( BPMInputRef->conversionFinished == true ){
 90a:	e8 81       	ld	r30, Y
 90c:	f9 81       	ldd	r31, Y+1	; 0x01
 90e:	81 81       	ldd	r24, Z+1	; 0x01
 910:	81 30       	cpi	r24, 0x01	; 1
 912:	b9 f4       	brne	.+46     	; 0x942 <__stack+0x43>
				
			//Set the content for the seven segment to print
			sevenSeg->contentToPrint = BPMInputRef->value;
 914:	ac 81       	ldd	r26, Y+4	; 0x04
 916:	bd 81       	ldd	r27, Y+5	; 0x05
 918:	82 81       	ldd	r24, Z+2	; 0x02
 91a:	93 81       	ldd	r25, Z+3	; 0x03
 91c:	1d 96       	adiw	r26, 0x0d	; 13
 91e:	9c 93       	st	X, r25
 920:	8e 93       	st	-X, r24
 922:	1c 97       	sbiw	r26, 0x0c	; 12
				
			//Tell seven seg object to print new content
			sevenSeg->newContentToPrint = true;
 924:	ec 81       	ldd	r30, Y+4	; 0x04
 926:	fd 81       	ldd	r31, Y+5	; 0x05
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	83 87       	std	Z+11, r24	; 0x0b
				
			//Reset the BPM input "conversion finished" flag
			BPMInputRef->conversionFinished = false;
 92c:	e8 81       	ld	r30, Y
 92e:	f9 81       	ldd	r31, Y+1	; 0x01
 930:	11 82       	std	Z+1, r1	; 0x01
				
			//Get new time stamp
			timeStamp = timer->millis();
 932:	8a 81       	ldd	r24, Y+2	; 0x02
 934:	9b 81       	ldd	r25, Y+3	; 0x03
 936:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 93a:	6e 83       	std	Y+6, r22	; 0x06
 93c:	7f 83       	std	Y+7, r23	; 0x07
 93e:	88 87       	std	Y+8, r24	; 0x08
 940:	99 87       	std	Y+9, r25	; 0x09
		}
	}
}
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	08 95       	ret

00000948 <_ZN8PrintBPMD1Ev>:

// default destructor
PrintBPM::~PrintBPM()
 948:	08 95       	ret

0000094a <_ZN11TaskManagerC1ER5Timer>:


#include "TaskManager.h"

// default constructor
TaskManager::TaskManager( Timer & timerPtr )
 94a:	fc 01       	movw	r30, r24
{
	
	timer = &timerPtr;
 94c:	73 8b       	std	Z+19, r23	; 0x13
 94e:	62 8b       	std	Z+18, r22	; 0x12
	
	//At initialization there should be zero loaded tasks. 
	loadedTasks = 0;
 950:	14 8a       	std	Z+20, r1	; 0x14
	
	//Should be initialized to a prime number
	randNum = RANDOM_GEN_SEED;
 952:	87 e0       	ldi	r24, 0x07	; 7
 954:	85 8b       	std	Z+21, r24	; 0x15
 956:	08 95       	ret

00000958 <_ZN11TaskManager7addTaskEPFvvEh>:

//Add a task to the task list.
//Priority; Range between 0-250. Closer to 0, the more likely task will run. 0 is realtime
void TaskManager::addTask( void (*task) (void), uint8_t priority ){
	
	tasks[ loadedTasks ] = task;
 958:	fc 01       	movw	r30, r24
 95a:	24 89       	ldd	r18, Z+20	; 0x14
 95c:	a2 2f       	mov	r26, r18
 95e:	b0 e0       	ldi	r27, 0x00	; 0
 960:	fd 01       	movw	r30, r26
 962:	33 96       	adiw	r30, 0x03	; 3
 964:	ee 0f       	add	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	e8 0f       	add	r30, r24
 96a:	f9 1f       	adc	r31, r25
 96c:	71 83       	std	Z+1, r23	; 0x01
 96e:	60 83       	st	Z, r22
	
	taskPriority[ loadedTasks ] = priority;
 970:	a8 0f       	add	r26, r24
 972:	b9 1f       	adc	r27, r25
 974:	4c 93       	st	X, r20
	
	loadedTasks++;
 976:	2f 5f       	subi	r18, 0xFF	; 255
 978:	fc 01       	movw	r30, r24
 97a:	24 8b       	std	Z+20, r18	; 0x14
 97c:	08 95       	ret

0000097e <_ZN11TaskManager20generateRandomNumberEv>:
	}
	
}

void TaskManager::generateRandomNumber( void )
{
 97e:	fc 01       	movw	r30, r24
	randNum = (randNum*109+89)%251;
 980:	25 89       	ldd	r18, Z+21	; 0x15
 982:	8d e6       	ldi	r24, 0x6D	; 109
 984:	28 9f       	mul	r18, r24
 986:	90 01       	movw	r18, r0
 988:	11 24       	eor	r1, r1
 98a:	c9 01       	movw	r24, r18
 98c:	87 5a       	subi	r24, 0xA7	; 167
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	6b ef       	ldi	r22, 0xFB	; 251
 992:	70 e0       	ldi	r23, 0x00	; 0
 994:	0e 94 94 05 	call	0xb28	; 0xb28 <__divmodhi4>
 998:	85 8b       	std	Z+21, r24	; 0x15
 99a:	08 95       	ret

0000099c <_ZN11TaskManager8runTasksEv>:
	
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
 99c:	cf 92       	push	r12
 99e:	df 92       	push	r13
 9a0:	ef 92       	push	r14
 9a2:	ff 92       	push	r15
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
	for( int i=0; i < loadedTasks ; i++){
 9ac:	dc 01       	movw	r26, r24
 9ae:	54 96       	adiw	r26, 0x14	; 20
 9b0:	2c 91       	ld	r18, X
 9b2:	22 23       	and	r18, r18
 9b4:	f1 f0       	breq	.+60     	; 0x9f2 <_ZN11TaskManager8runTasksEv+0x56>
 9b6:	ec 01       	movw	r28, r24
 9b8:	6c 01       	movw	r12, r24
 9ba:	7c 01       	movw	r14, r24
 9bc:	00 e0       	ldi	r16, 0x00	; 0
 9be:	10 e0       	ldi	r17, 0x00	; 0
		
		//Generate random number for seeing if task should run
		this->generateRandomNumber();
 9c0:	ce 01       	movw	r24, r28
 9c2:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN11TaskManager20generateRandomNumberEv>
		if( taskPriority[i] <= randNum ){
 9c6:	f6 01       	movw	r30, r12
 9c8:	91 91       	ld	r25, Z+
 9ca:	6f 01       	movw	r12, r30
 9cc:	8d 89       	ldd	r24, Y+21	; 0x15
 9ce:	89 17       	cp	r24, r25
 9d0:	30 f0       	brcs	.+12     	; 0x9de <_ZN11TaskManager8runTasksEv+0x42>
			
			//Run the task
			(*tasks[i]) (); 
 9d2:	d7 01       	movw	r26, r14
 9d4:	16 96       	adiw	r26, 0x06	; 6
 9d6:	ed 91       	ld	r30, X+
 9d8:	fc 91       	ld	r31, X
 9da:	17 97       	sbiw	r26, 0x07	; 7
 9dc:	09 95       	icall
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
	for( int i=0; i < loadedTasks ; i++){
 9de:	0f 5f       	subi	r16, 0xFF	; 255
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	b2 e0       	ldi	r27, 0x02	; 2
 9e4:	eb 0e       	add	r14, r27
 9e6:	f1 1c       	adc	r15, r1
 9e8:	2c 89       	ldd	r18, Y+20	; 0x14
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	02 17       	cp	r16, r18
 9ee:	13 07       	cpc	r17, r19
 9f0:	3c f3       	brlt	.-50     	; 0x9c0 <_ZN11TaskManager8runTasksEv+0x24>
			(*tasks[i]) (); 
		}
		
	}
	
}
 9f2:	df 91       	pop	r29
 9f4:	cf 91       	pop	r28
 9f6:	1f 91       	pop	r17
 9f8:	0f 91       	pop	r16
 9fa:	ff 90       	pop	r15
 9fc:	ef 90       	pop	r14
 9fe:	df 90       	pop	r13
 a00:	cf 90       	pop	r12
 a02:	08 95       	ret

00000a04 <_ZN7TriggerC1ER5TimerR6Blinky>:


#include "Trigger.h"

// default constructor
Trigger::Trigger( Timer & timerPtr, Blinky & blinkyRef )
 a04:	cf 93       	push	r28
 a06:	df 93       	push	r29
 a08:	ec 01       	movw	r28, r24
 a0a:	cb 01       	movw	r24, r22
{
	//Initialize the output pin.
	DDRD |= (1 << PORTD2);
 a0c:	52 9a       	sbi	0x0a, 2	; 10
	
	//Used for marking a point in time.
	timeStamp = 0;
 a0e:	1b 82       	std	Y+3, r1	; 0x03
 a10:	1c 82       	std	Y+4, r1	; 0x04
 a12:	1d 82       	std	Y+5, r1	; 0x05
 a14:	1e 82       	std	Y+6, r1	; 0x06

	//Get reference to the timer
	timer = &timerPtr;
 a16:	7a 83       	std	Y+2, r23	; 0x02
 a18:	69 83       	std	Y+1, r22	; 0x01
	
	//Reference to blinky
	blinky = &blinkyRef;
 a1a:	58 87       	std	Y+8, r21	; 0x08
 a1c:	4f 83       	std	Y+7, r20	; 0x07
		
	//Initialize the time stamp
	//Timer->millis returns the number of 0.1ms since epoche
	timeStamp = timer->millis();
 a1e:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 a22:	6b 83       	std	Y+3, r22	; 0x03
 a24:	7c 83       	std	Y+4, r23	; 0x04
 a26:	8d 83       	std	Y+5, r24	; 0x05
 a28:	9e 83       	std	Y+6, r25	; 0x06
	
	//Intialize first run flag
	triggerSetHigh = true;
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	88 83       	st	Y, r24
	
} //Trigger
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	08 95       	ret

00000a34 <_ZN7Trigger3runEv>:

//Runs the trigger task.
void Trigger::run(){
 a34:	cf 93       	push	r28
 a36:	df 93       	push	r29
 a38:	ec 01       	movw	r28, r24
	
	if( blinky->justSetHigh == true ){
 a3a:	ef 81       	ldd	r30, Y+7	; 0x07
 a3c:	f8 85       	ldd	r31, Y+8	; 0x08
 a3e:	83 81       	ldd	r24, Z+3	; 0x03
 a40:	81 30       	cpi	r24, 0x01	; 1
 a42:	71 f4       	brne	.+28     	; 0xa60 <_ZN7Trigger3runEv+0x2c>

		//Get time stamp
		timeStamp = timer->millis();
 a44:	89 81       	ldd	r24, Y+1	; 0x01
 a46:	9a 81       	ldd	r25, Y+2	; 0x02
 a48:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN5Timer6millisEv>
 a4c:	6b 83       	std	Y+3, r22	; 0x03
 a4e:	7c 83       	std	Y+4, r23	; 0x04
 a50:	8d 83       	std	Y+5, r24	; 0x05
 a52:	9e 83       	std	Y+6, r25	; 0x06
		
		//Set pin high
		PORTD |= ( 1 << PORTD2 );
 a54:	5a 9a       	sbi	0x0b, 2	; 11
		
		triggerSetHigh = true;
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	88 83       	st	Y, r24
		
		blinky->justSetHigh = false;
 a5a:	ef 81       	ldd	r30, Y+7	; 0x07
 a5c:	f8 85       	ldd	r31, Y+8	; 0x08
 a5e:	13 82       	std	Z+3, r1	; 0x03
	}
	if ( triggerSetHigh == true ){
 a60:	88 81       	ld	r24, Y
 a62:	81 30       	cpi	r24, 0x01	; 1
 a64:	79 f4       	brne	.+30     	; 0xa84 <_ZN7Trigger3runEv+0x50>
		//Wait for 1ms or Trigger high duration
		if( timer->elapsed_millis(timeStamp) >= TRIGGER_HIGH ){
 a66:	4b 81       	ldd	r20, Y+3	; 0x03
 a68:	5c 81       	ldd	r21, Y+4	; 0x04
 a6a:	6d 81       	ldd	r22, Y+5	; 0x05
 a6c:	7e 81       	ldd	r23, Y+6	; 0x06
 a6e:	89 81       	ldd	r24, Y+1	; 0x01
 a70:	9a 81       	ldd	r25, Y+2	; 0x02
 a72:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5Timer14elapsed_millisEm>
 a76:	6a 30       	cpi	r22, 0x0A	; 10
 a78:	71 05       	cpc	r23, r1
 a7a:	81 05       	cpc	r24, r1
 a7c:	91 05       	cpc	r25, r1
 a7e:	10 f0       	brcs	.+4      	; 0xa84 <_ZN7Trigger3runEv+0x50>
			//Set pin low.
			PORTD &= ~(1 << PORTD2);
 a80:	5a 98       	cbi	0x0b, 2	; 11
				
			triggerSetHigh = false;
 a82:	18 82       	st	Y, r1
		}
	}
}
 a84:	df 91       	pop	r29
 a86:	cf 91       	pop	r28
 a88:	08 95       	ret

00000a8a <_ZN7TriggerD1Ev>:

// default destructor
Trigger::~Trigger()
 a8a:	08 95       	ret

00000a8c <_ZN5TimerC1Ev>:
	fixedTime = this->millis();
}

void Timer::resumeTimer( void )
{
	step = fixedTime;
 a8c:	fc 01       	movw	r30, r24
 a8e:	10 82       	st	Z, r1
 a90:	11 82       	std	Z+1, r1	; 0x01
 a92:	12 82       	std	Z+2, r1	; 0x02
 a94:	13 82       	std	Z+3, r1	; 0x03
 a96:	14 82       	std	Z+4, r1	; 0x04
 a98:	15 82       	std	Z+5, r1	; 0x05
 a9a:	16 82       	std	Z+6, r1	; 0x06
 a9c:	17 82       	std	Z+7, r1	; 0x07
 a9e:	08 95       	ret

00000aa0 <_ZN5Timer14incrementTimerEv>:
 aa0:	fc 01       	movw	r30, r24
 aa2:	40 81       	ld	r20, Z
 aa4:	51 81       	ldd	r21, Z+1	; 0x01
 aa6:	62 81       	ldd	r22, Z+2	; 0x02
 aa8:	73 81       	ldd	r23, Z+3	; 0x03
 aaa:	4f 5f       	subi	r20, 0xFF	; 255
 aac:	5f 4f       	sbci	r21, 0xFF	; 255
 aae:	6f 4f       	sbci	r22, 0xFF	; 255
 ab0:	7f 4f       	sbci	r23, 0xFF	; 255
 ab2:	40 83       	st	Z, r20
 ab4:	51 83       	std	Z+1, r21	; 0x01
 ab6:	62 83       	std	Z+2, r22	; 0x02
 ab8:	73 83       	std	Z+3, r23	; 0x03
 aba:	08 95       	ret

00000abc <_ZN5Timer14elapsed_millisEm>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
 abc:	0f 93       	push	r16
 abe:	1f 93       	push	r17
	return (step - comparison);	
 ac0:	fc 01       	movw	r30, r24
 ac2:	80 81       	ld	r24, Z
 ac4:	91 81       	ldd	r25, Z+1	; 0x01
 ac6:	a2 81       	ldd	r26, Z+2	; 0x02
 ac8:	b3 81       	ldd	r27, Z+3	; 0x03
 aca:	8c 01       	movw	r16, r24
 acc:	9d 01       	movw	r18, r26
 ace:	04 1b       	sub	r16, r20
 ad0:	15 0b       	sbc	r17, r21
 ad2:	26 0b       	sbc	r18, r22
 ad4:	37 0b       	sbc	r19, r23
 ad6:	c9 01       	movw	r24, r18
 ad8:	b8 01       	movw	r22, r16
}
 ada:	1f 91       	pop	r17
 adc:	0f 91       	pop	r16
 ade:	08 95       	ret

00000ae0 <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return step;
 ae0:	fc 01       	movw	r30, r24
 ae2:	60 81       	ld	r22, Z
 ae4:	71 81       	ldd	r23, Z+1	; 0x01
 ae6:	82 81       	ldd	r24, Z+2	; 0x02
 ae8:	93 81       	ldd	r25, Z+3	; 0x03
}
 aea:	08 95       	ret

00000aec <_ZN5Timer8wait_1usEv>:
	//Variable to find the difference between a current value
	//of a timer and a previous value
	uint8_t difference = 0;
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
 aec:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
		difference = TCNT2 - timerValue;
 af0:	e2 eb       	ldi	r30, 0xB2	; 178
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	80 81       	ld	r24, Z
 af6:	89 1b       	sub	r24, r25
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
 af8:	80 31       	cpi	r24, 0x10	; 16
 afa:	e0 f3       	brcs	.-8      	; 0xaf4 <_ZN5Timer8wait_1usEv+0x8>
		difference = TCNT2 - timerValue;
	}
}
 afc:	08 95       	ret

00000afe <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 afe:	08 95       	ret

00000b00 <__udivmodhi4>:
 b00:	aa 1b       	sub	r26, r26
 b02:	bb 1b       	sub	r27, r27
 b04:	51 e1       	ldi	r21, 0x11	; 17
 b06:	07 c0       	rjmp	.+14     	; 0xb16 <__udivmodhi4_ep>

00000b08 <__udivmodhi4_loop>:
 b08:	aa 1f       	adc	r26, r26
 b0a:	bb 1f       	adc	r27, r27
 b0c:	a6 17       	cp	r26, r22
 b0e:	b7 07       	cpc	r27, r23
 b10:	10 f0       	brcs	.+4      	; 0xb16 <__udivmodhi4_ep>
 b12:	a6 1b       	sub	r26, r22
 b14:	b7 0b       	sbc	r27, r23

00000b16 <__udivmodhi4_ep>:
 b16:	88 1f       	adc	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	5a 95       	dec	r21
 b1c:	a9 f7       	brne	.-22     	; 0xb08 <__udivmodhi4_loop>
 b1e:	80 95       	com	r24
 b20:	90 95       	com	r25
 b22:	bc 01       	movw	r22, r24
 b24:	cd 01       	movw	r24, r26
 b26:	08 95       	ret

00000b28 <__divmodhi4>:
 b28:	97 fb       	bst	r25, 7
 b2a:	07 2e       	mov	r0, r23
 b2c:	16 f4       	brtc	.+4      	; 0xb32 <__divmodhi4+0xa>
 b2e:	00 94       	com	r0
 b30:	07 d0       	rcall	.+14     	; 0xb40 <__divmodhi4_neg1>
 b32:	77 fd       	sbrc	r23, 7
 b34:	09 d0       	rcall	.+18     	; 0xb48 <__divmodhi4_neg2>
 b36:	0e 94 80 05 	call	0xb00	; 0xb00 <__udivmodhi4>
 b3a:	07 fc       	sbrc	r0, 7
 b3c:	05 d0       	rcall	.+10     	; 0xb48 <__divmodhi4_neg2>
 b3e:	3e f4       	brtc	.+14     	; 0xb4e <__divmodhi4_exit>

00000b40 <__divmodhi4_neg1>:
 b40:	90 95       	com	r25
 b42:	81 95       	neg	r24
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	08 95       	ret

00000b48 <__divmodhi4_neg2>:
 b48:	70 95       	com	r23
 b4a:	61 95       	neg	r22
 b4c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b4e <__divmodhi4_exit>:
 b4e:	08 95       	ret

00000b50 <__udivmodsi4>:
 b50:	a1 e2       	ldi	r26, 0x21	; 33
 b52:	1a 2e       	mov	r1, r26
 b54:	aa 1b       	sub	r26, r26
 b56:	bb 1b       	sub	r27, r27
 b58:	fd 01       	movw	r30, r26
 b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__udivmodsi4_ep>

00000b5c <__udivmodsi4_loop>:
 b5c:	aa 1f       	adc	r26, r26
 b5e:	bb 1f       	adc	r27, r27
 b60:	ee 1f       	adc	r30, r30
 b62:	ff 1f       	adc	r31, r31
 b64:	a2 17       	cp	r26, r18
 b66:	b3 07       	cpc	r27, r19
 b68:	e4 07       	cpc	r30, r20
 b6a:	f5 07       	cpc	r31, r21
 b6c:	20 f0       	brcs	.+8      	; 0xb76 <__udivmodsi4_ep>
 b6e:	a2 1b       	sub	r26, r18
 b70:	b3 0b       	sbc	r27, r19
 b72:	e4 0b       	sbc	r30, r20
 b74:	f5 0b       	sbc	r31, r21

00000b76 <__udivmodsi4_ep>:
 b76:	66 1f       	adc	r22, r22
 b78:	77 1f       	adc	r23, r23
 b7a:	88 1f       	adc	r24, r24
 b7c:	99 1f       	adc	r25, r25
 b7e:	1a 94       	dec	r1
 b80:	69 f7       	brne	.-38     	; 0xb5c <__udivmodsi4_loop>
 b82:	60 95       	com	r22
 b84:	70 95       	com	r23
 b86:	80 95       	com	r24
 b88:	90 95       	com	r25
 b8a:	9b 01       	movw	r18, r22
 b8c:	ac 01       	movw	r20, r24
 b8e:	bd 01       	movw	r22, r26
 b90:	cf 01       	movw	r24, r30
 b92:	08 95       	ret

00000b94 <__umulhisi3>:
 b94:	a2 9f       	mul	r26, r18
 b96:	b0 01       	movw	r22, r0
 b98:	b3 9f       	mul	r27, r19
 b9a:	c0 01       	movw	r24, r0
 b9c:	a3 9f       	mul	r26, r19
 b9e:	70 0d       	add	r23, r0
 ba0:	81 1d       	adc	r24, r1
 ba2:	11 24       	eor	r1, r1
 ba4:	91 1d       	adc	r25, r1
 ba6:	b2 9f       	mul	r27, r18
 ba8:	70 0d       	add	r23, r0
 baa:	81 1d       	adc	r24, r1
 bac:	11 24       	eor	r1, r1
 bae:	91 1d       	adc	r25, r1
 bb0:	08 95       	ret

00000bb2 <__tablejump2__>:
 bb2:	ee 0f       	add	r30, r30
 bb4:	ff 1f       	adc	r31, r31
 bb6:	05 90       	lpm	r0, Z+
 bb8:	f4 91       	lpm	r31, Z
 bba:	e0 2d       	mov	r30, r0
 bbc:	09 94       	ijmp

00000bbe <malloc>:
 bbe:	cf 93       	push	r28
 bc0:	df 93       	push	r29
 bc2:	82 30       	cpi	r24, 0x02	; 2
 bc4:	91 05       	cpc	r25, r1
 bc6:	10 f4       	brcc	.+4      	; 0xbcc <malloc+0xe>
 bc8:	82 e0       	ldi	r24, 0x02	; 2
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <__flp>
 bd0:	f0 91 6f 01 	lds	r31, 0x016F	; 0x80016f <__flp+0x1>
 bd4:	20 e0       	ldi	r18, 0x00	; 0
 bd6:	30 e0       	ldi	r19, 0x00	; 0
 bd8:	c0 e0       	ldi	r28, 0x00	; 0
 bda:	d0 e0       	ldi	r29, 0x00	; 0
 bdc:	30 97       	sbiw	r30, 0x00	; 0
 bde:	11 f1       	breq	.+68     	; 0xc24 <malloc+0x66>
 be0:	40 81       	ld	r20, Z
 be2:	51 81       	ldd	r21, Z+1	; 0x01
 be4:	48 17       	cp	r20, r24
 be6:	59 07       	cpc	r21, r25
 be8:	c0 f0       	brcs	.+48     	; 0xc1a <malloc+0x5c>
 bea:	48 17       	cp	r20, r24
 bec:	59 07       	cpc	r21, r25
 bee:	61 f4       	brne	.+24     	; 0xc08 <malloc+0x4a>
 bf0:	82 81       	ldd	r24, Z+2	; 0x02
 bf2:	93 81       	ldd	r25, Z+3	; 0x03
 bf4:	20 97       	sbiw	r28, 0x00	; 0
 bf6:	19 f0       	breq	.+6      	; 0xbfe <malloc+0x40>
 bf8:	9b 83       	std	Y+3, r25	; 0x03
 bfa:	8a 83       	std	Y+2, r24	; 0x02
 bfc:	2b c0       	rjmp	.+86     	; 0xc54 <malloc+0x96>
 bfe:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <__flp+0x1>
 c02:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__flp>
 c06:	26 c0       	rjmp	.+76     	; 0xc54 <malloc+0x96>
 c08:	21 15       	cp	r18, r1
 c0a:	31 05       	cpc	r19, r1
 c0c:	19 f0       	breq	.+6      	; 0xc14 <malloc+0x56>
 c0e:	42 17       	cp	r20, r18
 c10:	53 07       	cpc	r21, r19
 c12:	18 f4       	brcc	.+6      	; 0xc1a <malloc+0x5c>
 c14:	9a 01       	movw	r18, r20
 c16:	be 01       	movw	r22, r28
 c18:	df 01       	movw	r26, r30
 c1a:	ef 01       	movw	r28, r30
 c1c:	02 80       	ldd	r0, Z+2	; 0x02
 c1e:	f3 81       	ldd	r31, Z+3	; 0x03
 c20:	e0 2d       	mov	r30, r0
 c22:	dc cf       	rjmp	.-72     	; 0xbdc <malloc+0x1e>
 c24:	21 15       	cp	r18, r1
 c26:	31 05       	cpc	r19, r1
 c28:	09 f1       	breq	.+66     	; 0xc6c <malloc+0xae>
 c2a:	28 1b       	sub	r18, r24
 c2c:	39 0b       	sbc	r19, r25
 c2e:	24 30       	cpi	r18, 0x04	; 4
 c30:	31 05       	cpc	r19, r1
 c32:	90 f4       	brcc	.+36     	; 0xc58 <malloc+0x9a>
 c34:	12 96       	adiw	r26, 0x02	; 2
 c36:	8d 91       	ld	r24, X+
 c38:	9c 91       	ld	r25, X
 c3a:	13 97       	sbiw	r26, 0x03	; 3
 c3c:	61 15       	cp	r22, r1
 c3e:	71 05       	cpc	r23, r1
 c40:	21 f0       	breq	.+8      	; 0xc4a <malloc+0x8c>
 c42:	fb 01       	movw	r30, r22
 c44:	93 83       	std	Z+3, r25	; 0x03
 c46:	82 83       	std	Z+2, r24	; 0x02
 c48:	04 c0       	rjmp	.+8      	; 0xc52 <malloc+0x94>
 c4a:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <__flp+0x1>
 c4e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__flp>
 c52:	fd 01       	movw	r30, r26
 c54:	32 96       	adiw	r30, 0x02	; 2
 c56:	44 c0       	rjmp	.+136    	; 0xce0 <malloc+0x122>
 c58:	fd 01       	movw	r30, r26
 c5a:	e2 0f       	add	r30, r18
 c5c:	f3 1f       	adc	r31, r19
 c5e:	81 93       	st	Z+, r24
 c60:	91 93       	st	Z+, r25
 c62:	22 50       	subi	r18, 0x02	; 2
 c64:	31 09       	sbc	r19, r1
 c66:	2d 93       	st	X+, r18
 c68:	3c 93       	st	X, r19
 c6a:	3a c0       	rjmp	.+116    	; 0xce0 <malloc+0x122>
 c6c:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <__brkval>
 c70:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <__brkval+0x1>
 c74:	23 2b       	or	r18, r19
 c76:	41 f4       	brne	.+16     	; 0xc88 <malloc+0xca>
 c78:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c7c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c80:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <__brkval+0x1>
 c84:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <__brkval>
 c88:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c8c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c90:	21 15       	cp	r18, r1
 c92:	31 05       	cpc	r19, r1
 c94:	41 f4       	brne	.+16     	; 0xca6 <malloc+0xe8>
 c96:	2d b7       	in	r18, 0x3d	; 61
 c98:	3e b7       	in	r19, 0x3e	; 62
 c9a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c9e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 ca2:	24 1b       	sub	r18, r20
 ca4:	35 0b       	sbc	r19, r21
 ca6:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <__brkval>
 caa:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <__brkval+0x1>
 cae:	e2 17       	cp	r30, r18
 cb0:	f3 07       	cpc	r31, r19
 cb2:	a0 f4       	brcc	.+40     	; 0xcdc <malloc+0x11e>
 cb4:	2e 1b       	sub	r18, r30
 cb6:	3f 0b       	sbc	r19, r31
 cb8:	28 17       	cp	r18, r24
 cba:	39 07       	cpc	r19, r25
 cbc:	78 f0       	brcs	.+30     	; 0xcdc <malloc+0x11e>
 cbe:	ac 01       	movw	r20, r24
 cc0:	4e 5f       	subi	r20, 0xFE	; 254
 cc2:	5f 4f       	sbci	r21, 0xFF	; 255
 cc4:	24 17       	cp	r18, r20
 cc6:	35 07       	cpc	r19, r21
 cc8:	48 f0       	brcs	.+18     	; 0xcdc <malloc+0x11e>
 cca:	4e 0f       	add	r20, r30
 ccc:	5f 1f       	adc	r21, r31
 cce:	50 93 6d 01 	sts	0x016D, r21	; 0x80016d <__brkval+0x1>
 cd2:	40 93 6c 01 	sts	0x016C, r20	; 0x80016c <__brkval>
 cd6:	81 93       	st	Z+, r24
 cd8:	91 93       	st	Z+, r25
 cda:	02 c0       	rjmp	.+4      	; 0xce0 <malloc+0x122>
 cdc:	e0 e0       	ldi	r30, 0x00	; 0
 cde:	f0 e0       	ldi	r31, 0x00	; 0
 ce0:	cf 01       	movw	r24, r30
 ce2:	df 91       	pop	r29
 ce4:	cf 91       	pop	r28
 ce6:	08 95       	ret

00000ce8 <free>:
 ce8:	0f 93       	push	r16
 cea:	1f 93       	push	r17
 cec:	cf 93       	push	r28
 cee:	df 93       	push	r29
 cf0:	00 97       	sbiw	r24, 0x00	; 0
 cf2:	09 f4       	brne	.+2      	; 0xcf6 <free+0xe>
 cf4:	8c c0       	rjmp	.+280    	; 0xe0e <free+0x126>
 cf6:	fc 01       	movw	r30, r24
 cf8:	32 97       	sbiw	r30, 0x02	; 2
 cfa:	13 82       	std	Z+3, r1	; 0x03
 cfc:	12 82       	std	Z+2, r1	; 0x02
 cfe:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <__flp>
 d02:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <__flp+0x1>
 d06:	01 15       	cp	r16, r1
 d08:	11 05       	cpc	r17, r1
 d0a:	81 f4       	brne	.+32     	; 0xd2c <free+0x44>
 d0c:	20 81       	ld	r18, Z
 d0e:	31 81       	ldd	r19, Z+1	; 0x01
 d10:	82 0f       	add	r24, r18
 d12:	93 1f       	adc	r25, r19
 d14:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <__brkval>
 d18:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <__brkval+0x1>
 d1c:	28 17       	cp	r18, r24
 d1e:	39 07       	cpc	r19, r25
 d20:	79 f5       	brne	.+94     	; 0xd80 <free+0x98>
 d22:	f0 93 6d 01 	sts	0x016D, r31	; 0x80016d <__brkval+0x1>
 d26:	e0 93 6c 01 	sts	0x016C, r30	; 0x80016c <__brkval>
 d2a:	71 c0       	rjmp	.+226    	; 0xe0e <free+0x126>
 d2c:	d8 01       	movw	r26, r16
 d2e:	40 e0       	ldi	r20, 0x00	; 0
 d30:	50 e0       	ldi	r21, 0x00	; 0
 d32:	ae 17       	cp	r26, r30
 d34:	bf 07       	cpc	r27, r31
 d36:	50 f4       	brcc	.+20     	; 0xd4c <free+0x64>
 d38:	12 96       	adiw	r26, 0x02	; 2
 d3a:	2d 91       	ld	r18, X+
 d3c:	3c 91       	ld	r19, X
 d3e:	13 97       	sbiw	r26, 0x03	; 3
 d40:	ad 01       	movw	r20, r26
 d42:	21 15       	cp	r18, r1
 d44:	31 05       	cpc	r19, r1
 d46:	09 f1       	breq	.+66     	; 0xd8a <free+0xa2>
 d48:	d9 01       	movw	r26, r18
 d4a:	f3 cf       	rjmp	.-26     	; 0xd32 <free+0x4a>
 d4c:	9d 01       	movw	r18, r26
 d4e:	da 01       	movw	r26, r20
 d50:	33 83       	std	Z+3, r19	; 0x03
 d52:	22 83       	std	Z+2, r18	; 0x02
 d54:	60 81       	ld	r22, Z
 d56:	71 81       	ldd	r23, Z+1	; 0x01
 d58:	86 0f       	add	r24, r22
 d5a:	97 1f       	adc	r25, r23
 d5c:	82 17       	cp	r24, r18
 d5e:	93 07       	cpc	r25, r19
 d60:	69 f4       	brne	.+26     	; 0xd7c <free+0x94>
 d62:	ec 01       	movw	r28, r24
 d64:	28 81       	ld	r18, Y
 d66:	39 81       	ldd	r19, Y+1	; 0x01
 d68:	26 0f       	add	r18, r22
 d6a:	37 1f       	adc	r19, r23
 d6c:	2e 5f       	subi	r18, 0xFE	; 254
 d6e:	3f 4f       	sbci	r19, 0xFF	; 255
 d70:	31 83       	std	Z+1, r19	; 0x01
 d72:	20 83       	st	Z, r18
 d74:	8a 81       	ldd	r24, Y+2	; 0x02
 d76:	9b 81       	ldd	r25, Y+3	; 0x03
 d78:	93 83       	std	Z+3, r25	; 0x03
 d7a:	82 83       	std	Z+2, r24	; 0x02
 d7c:	45 2b       	or	r20, r21
 d7e:	29 f4       	brne	.+10     	; 0xd8a <free+0xa2>
 d80:	f0 93 6f 01 	sts	0x016F, r31	; 0x80016f <__flp+0x1>
 d84:	e0 93 6e 01 	sts	0x016E, r30	; 0x80016e <__flp>
 d88:	42 c0       	rjmp	.+132    	; 0xe0e <free+0x126>
 d8a:	13 96       	adiw	r26, 0x03	; 3
 d8c:	fc 93       	st	X, r31
 d8e:	ee 93       	st	-X, r30
 d90:	12 97       	sbiw	r26, 0x02	; 2
 d92:	ed 01       	movw	r28, r26
 d94:	49 91       	ld	r20, Y+
 d96:	59 91       	ld	r21, Y+
 d98:	9e 01       	movw	r18, r28
 d9a:	24 0f       	add	r18, r20
 d9c:	35 1f       	adc	r19, r21
 d9e:	e2 17       	cp	r30, r18
 da0:	f3 07       	cpc	r31, r19
 da2:	71 f4       	brne	.+28     	; 0xdc0 <free+0xd8>
 da4:	80 81       	ld	r24, Z
 da6:	91 81       	ldd	r25, Z+1	; 0x01
 da8:	84 0f       	add	r24, r20
 daa:	95 1f       	adc	r25, r21
 dac:	02 96       	adiw	r24, 0x02	; 2
 dae:	11 96       	adiw	r26, 0x01	; 1
 db0:	9c 93       	st	X, r25
 db2:	8e 93       	st	-X, r24
 db4:	82 81       	ldd	r24, Z+2	; 0x02
 db6:	93 81       	ldd	r25, Z+3	; 0x03
 db8:	13 96       	adiw	r26, 0x03	; 3
 dba:	9c 93       	st	X, r25
 dbc:	8e 93       	st	-X, r24
 dbe:	12 97       	sbiw	r26, 0x02	; 2
 dc0:	e0 e0       	ldi	r30, 0x00	; 0
 dc2:	f0 e0       	ldi	r31, 0x00	; 0
 dc4:	d8 01       	movw	r26, r16
 dc6:	12 96       	adiw	r26, 0x02	; 2
 dc8:	8d 91       	ld	r24, X+
 dca:	9c 91       	ld	r25, X
 dcc:	13 97       	sbiw	r26, 0x03	; 3
 dce:	00 97       	sbiw	r24, 0x00	; 0
 dd0:	19 f0       	breq	.+6      	; 0xdd8 <free+0xf0>
 dd2:	f8 01       	movw	r30, r16
 dd4:	8c 01       	movw	r16, r24
 dd6:	f6 cf       	rjmp	.-20     	; 0xdc4 <free+0xdc>
 dd8:	8d 91       	ld	r24, X+
 dda:	9c 91       	ld	r25, X
 ddc:	98 01       	movw	r18, r16
 dde:	2e 5f       	subi	r18, 0xFE	; 254
 de0:	3f 4f       	sbci	r19, 0xFF	; 255
 de2:	82 0f       	add	r24, r18
 de4:	93 1f       	adc	r25, r19
 de6:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <__brkval>
 dea:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <__brkval+0x1>
 dee:	28 17       	cp	r18, r24
 df0:	39 07       	cpc	r19, r25
 df2:	69 f4       	brne	.+26     	; 0xe0e <free+0x126>
 df4:	30 97       	sbiw	r30, 0x00	; 0
 df6:	29 f4       	brne	.+10     	; 0xe02 <free+0x11a>
 df8:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <__flp+0x1>
 dfc:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__flp>
 e00:	02 c0       	rjmp	.+4      	; 0xe06 <free+0x11e>
 e02:	13 82       	std	Z+3, r1	; 0x03
 e04:	12 82       	std	Z+2, r1	; 0x02
 e06:	10 93 6d 01 	sts	0x016D, r17	; 0x80016d <__brkval+0x1>
 e0a:	00 93 6c 01 	sts	0x016C, r16	; 0x80016c <__brkval>
 e0e:	df 91       	pop	r29
 e10:	cf 91       	pop	r28
 e12:	1f 91       	pop	r17
 e14:	0f 91       	pop	r16
 e16:	08 95       	ret

00000e18 <__do_global_dtors>:
 e18:	10 e0       	ldi	r17, 0x00	; 0
 e1a:	c5 e3       	ldi	r28, 0x35	; 53
 e1c:	d0 e0       	ldi	r29, 0x00	; 0
 e1e:	04 c0       	rjmp	.+8      	; 0xe28 <__do_global_dtors+0x10>
 e20:	fe 01       	movw	r30, r28
 e22:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__tablejump2__>
 e26:	21 96       	adiw	r28, 0x01	; 1
 e28:	c6 33       	cpi	r28, 0x36	; 54
 e2a:	d1 07       	cpc	r29, r17
 e2c:	c9 f7       	brne	.-14     	; 0xe20 <__do_global_dtors+0x8>
 e2e:	f8 94       	cli

00000e30 <__stop_program>:
 e30:	ff cf       	rjmp	.-2      	; 0xe30 <__stop_program>
