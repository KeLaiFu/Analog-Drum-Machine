
Sequencer_DrumMachine.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000009be  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  00800106  00800106  00000a58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003083  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001351  00000000  00000000  00003d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012c0  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  0000633c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000100f  00000000  00000000  00006794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a7  00000000  00000000  000077a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00008b4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_16>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	ce 00       	.word	0x00ce	; ????

000000ba <__ctors_end>:
  ba:	fb 00       	.word	0x00fb	; ????

000000bc <__dtors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a6 e0       	ldi	r26, 0x06	; 6
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a1 38       	cpi	r26, 0x81	; 129
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee eb       	ldi	r30, 0xBE	; 190
  e0:	f9 e0       	ldi	r31, 0x09	; 9
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 30       	cpi	r26, 0x06	; 6
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_global_ctors>:
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	cd e5       	ldi	r28, 0x5D	; 93
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
  f6:	21 97       	sbiw	r28, 0x01	; 1
  f8:	fe 01       	movw	r30, r28
  fa:	0e 94 8f 03 	call	0x71e	; 0x71e <__tablejump2__>
  fe:	cc 35       	cpi	r28, 0x5C	; 92
 100:	d1 07       	cpc	r29, r17
 102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
 104:	0e 94 0c 02 	call	0x418	; 0x418 <main>
 108:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__do_global_dtors>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_Z14elapsed_millisRm>:
 */ 

 #include "helperFunctions.h"

 uint32_t elapsed_millis( uint32_t & timeStamp )
 {
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
	return millis() - timeStamp;
 11a:	0e 94 65 02 	call	0x4ca	; 0x4ca <millis>
 11e:	08 81       	ld	r16, Y
 120:	19 81       	ldd	r17, Y+1	; 0x01
 122:	2a 81       	ldd	r18, Y+2	; 0x02
 124:	3b 81       	ldd	r19, Y+3	; 0x03
 126:	60 1b       	sub	r22, r16
 128:	71 0b       	sbc	r23, r17
 12a:	82 0b       	sbc	r24, r18
 12c:	93 0b       	sbc	r25, r19
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <setup>:
public:
	_ShiftIn() : dataWidth(chipCount * 8), pulseWidth(5), lastState(0), currentState(0) {}
	
	// setup all pins
	void begin(int pload, int data, int clock) {
		pinMode(ploadPin = pload, OUTPUT);
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <InputSR>
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
		//pinMode(clockEnablePin = clockEN, OUTPUT);
		pinMode(dataPin = data, INPUT);
 144:	85 e0       	ldi	r24, 0x05	; 5
 146:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <InputSR+0x1>
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
		pinMode(clockPin = clock, OUTPUT);
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <InputSR+0x2>
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>

    //Initialize input shift register
	InputSR.begin(INPUT_SR_LATCH_PIN, INPUT_SR_SERIAL_PIN, INPUT_SR_CLOCK_PIN);

	//Initialize trigger
	Trigger_init();
 15c:	0e 94 97 01 	call	0x32e	; 0x32e <_Z12Trigger_initv>

	//Initialize counter
	seqIO.counter = 0;
 160:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end+0x3e>
	//Initialize loopBack
	seqIO.loopBack = MAX_TIME_POINTS_DEFAULT;
 164:	80 e1       	ldi	r24, 0x10	; 16
 166:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <__data_end+0x3f>
	//Initialize bpm and delay bpm
	seqIO.bpm = BPM_DEFAULT;
 16a:	88 e7       	ldi	r24, 0x78	; 120
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x41>
 172:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end+0x40>
	seqIO.bpmDelay = 60000/seqIO.bpm;
 176:	84 ef       	ldi	r24, 0xF4	; 244
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x43>
 17e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end+0x42>
 182:	e4 e2       	ldi	r30, 0x24	; 36
 184:	f1 e0       	ldi	r31, 0x01	; 1

	//Initialize programedValues
	for(uint8_t i=0; i <= MAX_TIME_POINTS; i++){
		seqIO.programmedValues[i] = (uint16_t) 0xFFFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	81 93       	st	Z+, r24
 18c:	91 93       	st	Z+, r25
	//Initialize bpm and delay bpm
	seqIO.bpm = BPM_DEFAULT;
	seqIO.bpmDelay = 60000/seqIO.bpm;

	//Initialize programedValues
	for(uint8_t i=0; i <= MAX_TIME_POINTS; i++){
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	e6 34       	cpi	r30, 0x46	; 70
 192:	f2 07       	cpc	r31, r18
 194:	d1 f7       	brne	.-12     	; 0x18a <setup+0x52>
		seqIO.programmedValues[i] = (uint16_t) 0xFFFF;
	}

}
 196:	08 95       	ret

00000198 <loop>:

void loop() {

	//Check timer to see if instrument should trigger
	//If it should trigger it will trigger.
	checkTimer_Trigger();
 198:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <_Z18checkTimer_Triggerv>

0000019c <_GLOBAL__sub_I_OutputSR>:

 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17

/*End of auto generated code by Atmel studio */

#include "defines-config.h"

ShiftRegister74HC595 OutputSR(NUM_SHIFT_REGISTERS_OUTPUT, OUTPUT_SR_SERIAL_PIN,
 1a0:	09 e0       	ldi	r16, 0x09	; 9
 1a2:	10 e0       	ldi	r17, 0x00	; 0
 1a4:	2a e0       	ldi	r18, 0x0A	; 10
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	48 e0       	ldi	r20, 0x08	; 8
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	68 e0       	ldi	r22, 0x08	; 8
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	82 e6       	ldi	r24, 0x62	; 98
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN20ShiftRegister74HC595C1Eiiii>
OUTPUT_SR_CLOCK_PIN, OUTPUT_SR_LATCH_PIN);
ShiftRegister74HC595 InstrumentTrigger(NUM_SHIFT_REGISTERS_TRIGGER,
 1b8:	03 e0       	ldi	r16, 0x03	; 3
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	24 e0       	ldi	r18, 0x04	; 4
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	42 e0       	ldi	r20, 0x02	; 2
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	88 e5       	ldi	r24, 0x58	; 88
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN20ShiftRegister74HC595C1Eiiii>
	uint8_t pulseWidth;

	ShiftType lastState;
	ShiftType currentState;
public:
	_ShiftIn() : dataWidth(chipCount * 8), pulseWidth(5), lastState(0), currentState(0) {}
 1d0:	ea e4       	ldi	r30, 0x4A	; 74
 1d2:	f1 e0       	ldi	r31, 0x01	; 1
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	94 83       	std	Z+4, r25	; 0x04
 1da:	83 83       	std	Z+3, r24	; 0x03
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	85 83       	std	Z+5, r24	; 0x05
 1e0:	16 82       	std	Z+6, r1	; 0x06
 1e2:	17 82       	std	Z+7, r1	; 0x07
 1e4:	10 86       	std	Z+8, r1	; 0x08
 1e6:	11 86       	std	Z+9, r1	; 0x09
 1e8:	12 86       	std	Z+10, r1	; 0x0a
 1ea:	13 86       	std	Z+11, r1	; 0x0b
 1ec:	14 86       	std	Z+12, r1	; 0x0c
 1ee:	15 86       	std	Z+13, r1	; 0x0d

	//Check timer to see if instrument should trigger
	//If it should trigger it will trigger.
	checkTimer_Trigger();

 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	08 95       	ret

000001f6 <_GLOBAL__sub_D_OutputSR>:

#include "defines-config.h"

ShiftRegister74HC595 OutputSR(NUM_SHIFT_REGISTERS_OUTPUT, OUTPUT_SR_SERIAL_PIN,
OUTPUT_SR_CLOCK_PIN, OUTPUT_SR_LATCH_PIN);
ShiftRegister74HC595 InstrumentTrigger(NUM_SHIFT_REGISTERS_TRIGGER,
 1f6:	88 e5       	ldi	r24, 0x58	; 88
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 03 01 	call	0x206	; 0x206 <_ZN20ShiftRegister74HC595D1Ev>

/*End of auto generated code by Atmel studio */

#include "defines-config.h"

ShiftRegister74HC595 OutputSR(NUM_SHIFT_REGISTERS_OUTPUT, OUTPUT_SR_SERIAL_PIN,
 1fe:	82 e6       	ldi	r24, 0x62	; 98
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0c 94 03 01 	jmp	0x206	; 0x206 <_ZN20ShiftRegister74HC595D1Ev>

00000206 <_ZN20ShiftRegister74HC595D1Ev>:
void ShiftRegister74HC595::setAllHigh()
{
    for (int i = 0; i < _numberOfShiftRegisters; i++) {
        _digitalValues[i] = 255;
    }
    updateRegisters();
 206:	fc 01       	movw	r30, r24
 208:	80 85       	ldd	r24, Z+8	; 0x08
 20a:	91 85       	ldd	r25, Z+9	; 0x09
 20c:	0c 94 2a 04 	jmp	0x854	; 0x854 <free>

00000210 <_ZN20ShiftRegister74HC59515updateRegistersEv>:
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	08 81       	ld	r16, Y
 21c:	19 81       	ldd	r17, Y+1	; 0x01
 21e:	01 50       	subi	r16, 0x01	; 1
 220:	11 09       	sbc	r17, r1
 222:	17 fd       	sbrc	r17, 7
 224:	0b c0       	rjmp	.+22     	; 0x23c <_ZN20ShiftRegister74HC59515updateRegistersEv+0x2c>
 226:	e8 85       	ldd	r30, Y+8	; 0x08
 228:	f9 85       	ldd	r31, Y+9	; 0x09
 22a:	e0 0f       	add	r30, r16
 22c:	f1 1f       	adc	r31, r17
 22e:	20 81       	ld	r18, Z
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	6a 81       	ldd	r22, Y+2	; 0x02
 234:	8c 81       	ldd	r24, Y+4	; 0x04
 236:	0e 94 4c 03 	call	0x698	; 0x698 <shiftOut>
 23a:	f1 cf       	rjmp	.-30     	; 0x21e <_ZN20ShiftRegister74HC59515updateRegistersEv+0xe>
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	8e 81       	ldd	r24, Y+6	; 0x06
 240:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	8e 81       	ldd	r24, Y+6	; 0x06
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	0c 94 1c 03 	jmp	0x638	; 0x638 <digitalWrite>

00000254 <_ZN20ShiftRegister74HC595C1Eiiii>:
 254:	af 92       	push	r10
 256:	bf 92       	push	r11
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	1f 92       	push	r1
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	5c 01       	movw	r10, r24
 26e:	7b 01       	movw	r14, r22
 270:	d4 2e       	mov	r13, r20
 272:	fc 01       	movw	r30, r24
 274:	71 83       	std	Z+1, r23	; 0x01
 276:	60 83       	st	Z, r22
 278:	22 83       	std	Z+2, r18	; 0x02
 27a:	33 83       	std	Z+3, r19	; 0x03
 27c:	44 83       	std	Z+4, r20	; 0x04
 27e:	55 83       	std	Z+5, r21	; 0x05
 280:	06 83       	std	Z+6, r16	; 0x06
 282:	17 83       	std	Z+7, r17	; 0x07
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	82 2f       	mov	r24, r18
 288:	29 83       	std	Y+1, r18	; 0x01
 28a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	8d 2d       	mov	r24, r13
 292:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	80 2f       	mov	r24, r16
 29a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pinMode>
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	29 81       	ldd	r18, Y+1	; 0x01
 2a2:	82 2f       	mov	r24, r18
 2a4:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	8d 2d       	mov	r24, r13
 2ac:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	80 2f       	mov	r24, r16
 2b4:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
 2b8:	c7 01       	movw	r24, r14
 2ba:	0e 94 95 03 	call	0x72a	; 0x72a <malloc>
 2be:	f5 01       	movw	r30, r10
 2c0:	91 87       	std	Z+9, r25	; 0x09
 2c2:	80 87       	std	Z+8, r24	; 0x08
 2c4:	a7 01       	movw	r20, r14
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	0e 94 cb 04 	call	0x996	; 0x996 <memset>
 2ce:	c5 01       	movw	r24, r10
 2d0:	0f 90       	pop	r0
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	bf 90       	pop	r11
 2e2:	af 90       	pop	r10
 2e4:	0c 94 08 01 	jmp	0x210	; 0x210 <_ZN20ShiftRegister74HC59515updateRegistersEv>

000002e8 <_ZN20ShiftRegister74HC5956setAllEPKh>:
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24
 2ee:	48 81       	ld	r20, Y
 2f0:	59 81       	ldd	r21, Y+1	; 0x01
 2f2:	88 85       	ldd	r24, Y+8	; 0x08
 2f4:	99 85       	ldd	r25, Y+9	; 0x09
 2f6:	0e 94 c2 04 	call	0x984	; 0x984 <memcpy>
 2fa:	ce 01       	movw	r24, r28
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	0c 94 08 01 	jmp	0x210	; 0x210 <_ZN20ShiftRegister74HC59515updateRegistersEv>

00000304 <_ZN20ShiftRegister74HC5959setAllLowEv>:


// Sets all pins of all shift registers to LOW (0).
void ShiftRegister74HC595::setAllLow()
{
    for (int i = 0; i < _numberOfShiftRegisters; i++) {
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	fc 01       	movw	r30, r24
 30a:	40 81       	ld	r20, Z
 30c:	51 81       	ldd	r21, Z+1	; 0x01
 30e:	24 17       	cp	r18, r20
 310:	35 07       	cpc	r19, r21
 312:	5c f4       	brge	.+22     	; 0x32a <_ZN20ShiftRegister74HC5959setAllLowEv+0x26>
        _digitalValues[i] = 0;
 314:	dc 01       	movw	r26, r24
 316:	18 96       	adiw	r26, 0x08	; 8
 318:	ed 91       	ld	r30, X+
 31a:	fc 91       	ld	r31, X
 31c:	19 97       	sbiw	r26, 0x09	; 9
 31e:	e2 0f       	add	r30, r18
 320:	f3 1f       	adc	r31, r19
 322:	10 82       	st	Z, r1


// Sets all pins of all shift registers to LOW (0).
void ShiftRegister74HC595::setAllLow()
{
    for (int i = 0; i < _numberOfShiftRegisters; i++) {
 324:	2f 5f       	subi	r18, 0xFF	; 255
 326:	3f 4f       	sbci	r19, 0xFF	; 255
 328:	ef cf       	rjmp	.-34     	; 0x308 <_ZN20ShiftRegister74HC5959setAllLowEv+0x4>
        _digitalValues[i] = 0;
    }
    updateRegisters();
 32a:	0c 94 08 01 	jmp	0x210	; 0x210 <_ZN20ShiftRegister74HC59515updateRegistersEv>

0000032e <_Z12Trigger_initv>:
 Trigger trigger;

 //initialize
 void Trigger_init(void)
 {
	trigger.playNext = 0;
 32e:	ec e6       	ldi	r30, 0x6C	; 108
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	11 82       	std	Z+1, r1	; 0x01
 334:	10 82       	st	Z, r1
	trigger.timeStamp = 0;
 336:	12 82       	std	Z+2, r1	; 0x02
 338:	13 82       	std	Z+3, r1	; 0x03
 33a:	14 82       	std	Z+4, r1	; 0x04
 33c:	15 82       	std	Z+5, r1	; 0x05
 33e:	08 95       	ret

00000340 <_Z11genPlayNextv>:
//generate the play next register
void genPlayNext(void)
{
	//Play next will just be the programmed values at whatever the counter is
	//at
	trigger.playNext = seqIO.programmedValues[ seqIO.counter ];
 340:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end+0x3e>
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	ec 5d       	subi	r30, 0xDC	; 220
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	80 81       	ld	r24, Z
 350:	91 81       	ldd	r25, Z+1	; 0x01
 352:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <trigger+0x1>
 356:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <trigger>
 35a:	08 95       	ret

0000035c <_Z18triggerInstrumentsv>:
}

//triggers instruments
//Blocks
void triggerInstruments(void)
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	00 d0       	rcall	.+0      	; 0x362 <_Z18triggerInstrumentsv+0x6>
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
	uint8_t outputBuff[2] = {0};
 366:	1a 82       	std	Y+2, r1	; 0x02
 368:	19 82       	std	Y+1, r1	; 0x01

	genPlayNext();
 36a:	0e 94 a0 01 	call	0x340	; 0x340 <_Z11genPlayNextv>

	outputBuff[1] |= trigger.playNext >> 8;
 36e:	ec e6       	ldi	r30, 0x6C	; 108
 370:	f1 e0       	ldi	r31, 0x01	; 1
 372:	80 81       	ld	r24, Z
 374:	91 81       	ldd	r25, Z+1	; 0x01
 376:	2a 81       	ldd	r18, Y+2	; 0x02
 378:	92 2b       	or	r25, r18
 37a:	9a 83       	std	Y+2, r25	; 0x02
	outputBuff[0] |= trigger.playNext;
 37c:	99 81       	ldd	r25, Y+1	; 0x01
 37e:	89 2b       	or	r24, r25
 380:	89 83       	std	Y+1, r24	; 0x01

	InstrumentTrigger.setAll(outputBuff);
 382:	be 01       	movw	r22, r28
 384:	6f 5f       	subi	r22, 0xFF	; 255
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	88 e5       	ldi	r24, 0x58	; 88
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_ZN20ShiftRegister74HC5956setAllEPKh>
	InstrumentTrigger.updateRegisters();
 390:	88 e5       	ldi	r24, 0x58	; 88
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 08 01 	call	0x210	; 0x210 <_ZN20ShiftRegister74HC59515updateRegistersEv>

	//Delay 1ms
	delayMicroseconds(1000 + TRIGGER_OFFSET);
 398:	80 e9       	ldi	r24, 0x90	; 144
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <delayMicroseconds>

	InstrumentTrigger.setAllLow();
 3a0:	88 e5       	ldi	r24, 0x58	; 88
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 82 01 	call	0x304	; 0x304 <_ZN20ShiftRegister74HC5959setAllLowEv>
	InstrumentTrigger.updateRegisters();
 3a8:	88 e5       	ldi	r24, 0x58	; 88
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 08 01 	call	0x210	; 0x210 <_ZN20ShiftRegister74HC59515updateRegistersEv>
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <_Z18checkTimer_Triggerv>:
	trigger.playNext = seqIO.programmedValues[ seqIO.counter ];
}

//Check timer to see if instrument should trigger
void checkTimer_Trigger(void)
{
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
	if( elapsed_millis(trigger.timeStamp) >= seqIO.bpmDelay ){
 3be:	8e e6       	ldi	r24, 0x6E	; 110
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 88 00 	call	0x110	; 0x110 <_Z14elapsed_millisRm>
 3c6:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__data_end+0x42>
 3ca:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__data_end+0x43>
 3ce:	89 01       	movw	r16, r18
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	60 17       	cp	r22, r16
 3d6:	71 07       	cpc	r23, r17
 3d8:	82 07       	cpc	r24, r18
 3da:	93 07       	cpc	r25, r19
 3dc:	c8 f0       	brcs	.+50     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		trigger.timeStamp = millis();
 3de:	0e 94 65 02 	call	0x4ca	; 0x4ca <millis>
 3e2:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <trigger+0x2>
 3e6:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <trigger+0x3>
 3ea:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <trigger+0x4>
 3ee:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <trigger+0x5>
		
		//Increment counter
		seqIO.counter++;
 3f2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end+0x3e>
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0x3e>
		if(seqIO.counter >= seqIO.loopBack){
 3fc:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x3f>
 400:	89 17       	cp	r24, r25
 402:	10 f0       	brcs	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			seqIO.counter = 0;	
 404:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end+0x3e>
		}

		triggerInstruments();
	}
}
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
		seqIO.counter++;
		if(seqIO.counter >= seqIO.loopBack){
			seqIO.counter = 0;	
		}

		triggerInstruments();
 40c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_Z18triggerInstrumentsv>
	}
}
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 416:	08 95       	ret

00000418 <main>:

int main(void)
{
	init();
 418:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <init>

	initVariant();
 41c:	0e 94 0b 02 	call	0x416	; 0x416 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 420:	0e 94 9c 00 	call	0x138	; 0x138 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 424:	c0 e0       	ldi	r28, 0x00	; 0
 426:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 428:	0e 94 cc 00 	call	0x198	; 0x198 <loop>
		if (serialEventRun) serialEventRun();
 42c:	20 97       	sbiw	r28, 0x00	; 0
 42e:	e1 f3       	breq	.-8      	; 0x428 <main+0x10>
 430:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 434:	f9 cf       	rjmp	.-14     	; 0x428 <main+0x10>

00000436 <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	2f 93       	push	r18
 442:	3f 93       	push	r19
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
 448:	af 93       	push	r26
 44a:	bf 93       	push	r27
 44c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timer0_millis>
 450:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timer0_millis+0x1>
 454:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timer0_millis+0x2>
 458:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timer0_millis+0x3>
 45c:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <timer0_fract>
 460:	23 e0       	ldi	r18, 0x03	; 3
 462:	23 0f       	add	r18, r19
 464:	2d 37       	cpi	r18, 0x7D	; 125
 466:	20 f4       	brcc	.+8      	; 0x470 <__vector_16+0x3a>
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	a1 1d       	adc	r26, r1
 46c:	b1 1d       	adc	r27, r1
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__vector_16+0x44>
 470:	26 e8       	ldi	r18, 0x86	; 134
 472:	23 0f       	add	r18, r19
 474:	02 96       	adiw	r24, 0x02	; 2
 476:	a1 1d       	adc	r26, r1
 478:	b1 1d       	adc	r27, r1
 47a:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <timer0_fract>
 47e:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timer0_millis>
 482:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timer0_millis+0x1>
 486:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timer0_millis+0x2>
 48a:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timer0_millis+0x3>
 48e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timer0_overflow_count>
 492:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timer0_overflow_count+0x1>
 496:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timer0_overflow_count+0x2>
 49a:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timer0_overflow_count+0x3>
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	a1 1d       	adc	r26, r1
 4a2:	b1 1d       	adc	r27, r1
 4a4:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timer0_overflow_count>
 4a8:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timer0_overflow_count+0x1>
 4ac:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timer0_overflow_count+0x2>
 4b0:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timer0_overflow_count+0x3>
 4b4:	bf 91       	pop	r27
 4b6:	af 91       	pop	r26
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <millis>:
 4ca:	2f b7       	in	r18, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <timer0_millis>
 4d2:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <timer0_millis+0x1>
 4d6:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <timer0_millis+0x2>
 4da:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <timer0_millis+0x3>
 4de:	2f bf       	out	0x3f, r18	; 63
 4e0:	08 95       	ret

000004e2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	91 05       	cpc	r25, r1
 4e6:	38 f0       	brcs	.+14     	; 0x4f6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
 4f0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <delayMicroseconds+0x10>
 4f6:	08 95       	ret

000004f8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 4f8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 4fa:	84 b5       	in	r24, 0x24	; 36
 4fc:	82 60       	ori	r24, 0x02	; 2
 4fe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 500:	84 b5       	in	r24, 0x24	; 36
 502:	81 60       	ori	r24, 0x01	; 1
 504:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 506:	85 b5       	in	r24, 0x25	; 37
 508:	82 60       	ori	r24, 0x02	; 2
 50a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 50c:	85 b5       	in	r24, 0x25	; 37
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 512:	ee e6       	ldi	r30, 0x6E	; 110
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	81 60       	ori	r24, 0x01	; 1
 51a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 51c:	e1 e8       	ldi	r30, 0x81	; 129
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 522:	80 81       	ld	r24, Z
 524:	82 60       	ori	r24, 0x02	; 2
 526:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 528:	80 81       	ld	r24, Z
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 52e:	e0 e8       	ldi	r30, 0x80	; 128
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	81 60       	ori	r24, 0x01	; 1
 536:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 538:	e1 eb       	ldi	r30, 0xB1	; 177
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	84 60       	ori	r24, 0x04	; 4
 540:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 542:	e0 eb       	ldi	r30, 0xB0	; 176
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	81 60       	ori	r24, 0x01	; 1
 54a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 54c:	ea e7       	ldi	r30, 0x7A	; 122
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	84 60       	ori	r24, 0x04	; 4
 554:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 556:	80 81       	ld	r24, Z
 558:	82 60       	ori	r24, 0x02	; 2
 55a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 55c:	80 81       	ld	r24, Z
 55e:	81 60       	ori	r24, 0x01	; 1
 560:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 562:	80 81       	ld	r24, Z
 564:	80 68       	ori	r24, 0x80	; 128
 566:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 568:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 56c:	08 95       	ret

0000056e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 56e:	83 30       	cpi	r24, 0x03	; 3
 570:	81 f0       	breq	.+32     	; 0x592 <turnOffPWM+0x24>
 572:	28 f4       	brcc	.+10     	; 0x57e <turnOffPWM+0x10>
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	99 f0       	breq	.+38     	; 0x59e <turnOffPWM+0x30>
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	a1 f0       	breq	.+40     	; 0x5a4 <turnOffPWM+0x36>
 57c:	08 95       	ret
 57e:	87 30       	cpi	r24, 0x07	; 7
 580:	a9 f0       	breq	.+42     	; 0x5ac <turnOffPWM+0x3e>
 582:	88 30       	cpi	r24, 0x08	; 8
 584:	b9 f0       	breq	.+46     	; 0x5b4 <turnOffPWM+0x46>
 586:	84 30       	cpi	r24, 0x04	; 4
 588:	d1 f4       	brne	.+52     	; 0x5be <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 58a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 58e:	8f 7d       	andi	r24, 0xDF	; 223
 590:	03 c0       	rjmp	.+6      	; 0x598 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 592:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 596:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 598:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 59c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 59e:	84 b5       	in	r24, 0x24	; 36
 5a0:	8f 77       	andi	r24, 0x7F	; 127
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 5a4:	84 b5       	in	r24, 0x24	; 36
 5a6:	8f 7d       	andi	r24, 0xDF	; 223
 5a8:	84 bd       	out	0x24, r24	; 36
 5aa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 5ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5b0:	8f 77       	andi	r24, 0x7F	; 127
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 5b4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5b8:	8f 7d       	andi	r24, 0xDF	; 223
 5ba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5be:	08 95       	ret

000005c0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	fc 01       	movw	r30, r24
 5c8:	e4 58       	subi	r30, 0x84	; 132
 5ca:	ff 4f       	sbci	r31, 0xFF	; 255
 5cc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 5ce:	fc 01       	movw	r30, r24
 5d0:	e0 57       	subi	r30, 0x70	; 112
 5d2:	ff 4f       	sbci	r31, 0xFF	; 255
 5d4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 5d6:	88 23       	and	r24, r24
 5d8:	61 f1       	breq	.+88     	; 0x632 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	fc 01       	movw	r30, r24
 5e2:	e2 55       	subi	r30, 0x52	; 82
 5e4:	ff 4f       	sbci	r31, 0xFF	; 255
 5e6:	c5 91       	lpm	r28, Z+
 5e8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 5ea:	fc 01       	movw	r30, r24
 5ec:	ec 55       	subi	r30, 0x5C	; 92
 5ee:	ff 4f       	sbci	r31, 0xFF	; 255
 5f0:	a5 91       	lpm	r26, Z+
 5f2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 5f4:	61 11       	cpse	r22, r1
 5f6:	09 c0       	rjmp	.+18     	; 0x60a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 5f8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 5fa:	f8 94       	cli
		*reg &= ~bit;
 5fc:	88 81       	ld	r24, Y
 5fe:	20 95       	com	r18
 600:	82 23       	and	r24, r18
 602:	88 83       	st	Y, r24
		*out &= ~bit;
 604:	ec 91       	ld	r30, X
 606:	2e 23       	and	r18, r30
 608:	0b c0       	rjmp	.+22     	; 0x620 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 60a:	62 30       	cpi	r22, 0x02	; 2
 60c:	61 f4       	brne	.+24     	; 0x626 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 60e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 610:	f8 94       	cli
		*reg &= ~bit;
 612:	38 81       	ld	r19, Y
 614:	82 2f       	mov	r24, r18
 616:	80 95       	com	r24
 618:	83 23       	and	r24, r19
 61a:	88 83       	st	Y, r24
		*out |= bit;
 61c:	ec 91       	ld	r30, X
 61e:	2e 2b       	or	r18, r30
 620:	2c 93       	st	X, r18
		SREG = oldSREG;
 622:	9f bf       	out	0x3f, r25	; 63
 624:	06 c0       	rjmp	.+12     	; 0x632 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 626:	8f b7       	in	r24, 0x3f	; 63
                cli();
 628:	f8 94       	cli
		*reg |= bit;
 62a:	e8 81       	ld	r30, Y
 62c:	2e 2b       	or	r18, r30
 62e:	28 83       	st	Y, r18
		SREG = oldSREG;
 630:	8f bf       	out	0x3f, r24	; 63
	}
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 63e:	28 2f       	mov	r18, r24
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	f9 01       	movw	r30, r18
 644:	e8 59       	subi	r30, 0x98	; 152
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 64a:	f9 01       	movw	r30, r18
 64c:	e4 58       	subi	r30, 0x84	; 132
 64e:	ff 4f       	sbci	r31, 0xFF	; 255
 650:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 652:	f9 01       	movw	r30, r18
 654:	e0 57       	subi	r30, 0x70	; 112
 656:	ff 4f       	sbci	r31, 0xFF	; 255
 658:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 65a:	cc 23       	and	r28, r28
 65c:	c9 f0       	breq	.+50     	; 0x690 <digitalWrite+0x58>
 65e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 660:	81 11       	cpse	r24, r1
 662:	0e 94 b7 02 	call	0x56e	; 0x56e <turnOffPWM>

	out = portOutputRegister(port);
 666:	ec 2f       	mov	r30, r28
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	ec 55       	subi	r30, 0x5C	; 92
 670:	ff 4f       	sbci	r31, 0xFF	; 255
 672:	a5 91       	lpm	r26, Z+
 674:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 676:	8f b7       	in	r24, 0x3f	; 63
	cli();
 678:	f8 94       	cli

	if (val == LOW) {
 67a:	11 11       	cpse	r17, r1
 67c:	05 c0       	rjmp	.+10     	; 0x688 <digitalWrite+0x50>
		*out &= ~bit;
 67e:	9c 91       	ld	r25, X
 680:	ed 2f       	mov	r30, r29
 682:	e0 95       	com	r30
 684:	e9 23       	and	r30, r25
 686:	02 c0       	rjmp	.+4      	; 0x68c <digitalWrite+0x54>
	} else {
		*out |= bit;
 688:	ec 91       	ld	r30, X
 68a:	ed 2b       	or	r30, r29
 68c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 68e:	8f bf       	out	0x3f, r24	; 63
}
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	08 95       	ret

00000698 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 698:	bf 92       	push	r11
 69a:	cf 92       	push	r12
 69c:	df 92       	push	r13
 69e:	ef 92       	push	r14
 6a0:	ff 92       	push	r15
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	c8 2e       	mov	r12, r24
 6ac:	d6 2e       	mov	r13, r22
 6ae:	b4 2e       	mov	r11, r20
 6b0:	c7 e0       	ldi	r28, 0x07	; 7
 6b2:	d0 e0       	ldi	r29, 0x00	; 0
 6b4:	02 2f       	mov	r16, r18
 6b6:	10 e0       	ldi	r17, 0x00	; 0
 6b8:	87 e0       	ldi	r24, 0x07	; 7
 6ba:	e8 2e       	mov	r14, r24
 6bc:	f1 2c       	mov	r15, r1
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
 6be:	b1 10       	cpse	r11, r1
 6c0:	05 c0       	rjmp	.+10     	; 0x6cc <shiftOut+0x34>
 6c2:	c7 01       	movw	r24, r14
 6c4:	8c 1b       	sub	r24, r28
 6c6:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
 6c8:	98 01       	movw	r18, r16
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 6cc:	98 01       	movw	r18, r16
 6ce:	8c 2f       	mov	r24, r28
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <shiftOut+0x3e>
 6d2:	35 95       	asr	r19
 6d4:	27 95       	ror	r18
 6d6:	8a 95       	dec	r24
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <shiftOut+0x3a>
 6da:	b9 01       	movw	r22, r18
 6dc:	61 70       	andi	r22, 0x01	; 1
 6de:	77 27       	eor	r23, r23
 6e0:	8c 2d       	mov	r24, r12
 6e2:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	8d 2d       	mov	r24, r13
 6ea:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
		delayMicroseconds(1);
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <delayMicroseconds>
		digitalWrite(clockPin, LOW);
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	8d 2d       	mov	r24, r13
 6fa:	0e 94 1c 03 	call	0x638	; 0x638 <digitalWrite>
		delayMicroseconds(1);		
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 71 02 	call	0x4e2	; 0x4e2 <delayMicroseconds>
 706:	21 97       	sbiw	r28, 0x01	; 1
 708:	d0 f6       	brcc	.-76     	; 0x6be <shiftOut+0x26>
	}
}
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	ff 90       	pop	r15
 714:	ef 90       	pop	r14
 716:	df 90       	pop	r13
 718:	cf 90       	pop	r12
 71a:	bf 90       	pop	r11
 71c:	08 95       	ret

0000071e <__tablejump2__>:
 71e:	ee 0f       	add	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	05 90       	lpm	r0, Z+
 724:	f4 91       	lpm	r31, Z
 726:	e0 2d       	mov	r30, r0
 728:	09 94       	ijmp

0000072a <malloc>:
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
 72e:	82 30       	cpi	r24, 0x02	; 2
 730:	91 05       	cpc	r25, r1
 732:	10 f4       	brcc	.+4      	; 0x738 <malloc+0xe>
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <__flp>
 73c:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <__flp+0x1>
 740:	20 e0       	ldi	r18, 0x00	; 0
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	c0 e0       	ldi	r28, 0x00	; 0
 746:	d0 e0       	ldi	r29, 0x00	; 0
 748:	30 97       	sbiw	r30, 0x00	; 0
 74a:	11 f1       	breq	.+68     	; 0x790 <malloc+0x66>
 74c:	40 81       	ld	r20, Z
 74e:	51 81       	ldd	r21, Z+1	; 0x01
 750:	48 17       	cp	r20, r24
 752:	59 07       	cpc	r21, r25
 754:	c0 f0       	brcs	.+48     	; 0x786 <malloc+0x5c>
 756:	48 17       	cp	r20, r24
 758:	59 07       	cpc	r21, r25
 75a:	61 f4       	brne	.+24     	; 0x774 <malloc+0x4a>
 75c:	82 81       	ldd	r24, Z+2	; 0x02
 75e:	93 81       	ldd	r25, Z+3	; 0x03
 760:	20 97       	sbiw	r28, 0x00	; 0
 762:	19 f0       	breq	.+6      	; 0x76a <malloc+0x40>
 764:	9b 83       	std	Y+3, r25	; 0x03
 766:	8a 83       	std	Y+2, r24	; 0x02
 768:	2b c0       	rjmp	.+86     	; 0x7c0 <malloc+0x96>
 76a:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <__flp+0x1>
 76e:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <__flp>
 772:	26 c0       	rjmp	.+76     	; 0x7c0 <malloc+0x96>
 774:	21 15       	cp	r18, r1
 776:	31 05       	cpc	r19, r1
 778:	19 f0       	breq	.+6      	; 0x780 <malloc+0x56>
 77a:	42 17       	cp	r20, r18
 77c:	53 07       	cpc	r21, r19
 77e:	18 f4       	brcc	.+6      	; 0x786 <malloc+0x5c>
 780:	9a 01       	movw	r18, r20
 782:	be 01       	movw	r22, r28
 784:	df 01       	movw	r26, r30
 786:	ef 01       	movw	r28, r30
 788:	02 80       	ldd	r0, Z+2	; 0x02
 78a:	f3 81       	ldd	r31, Z+3	; 0x03
 78c:	e0 2d       	mov	r30, r0
 78e:	dc cf       	rjmp	.-72     	; 0x748 <malloc+0x1e>
 790:	21 15       	cp	r18, r1
 792:	31 05       	cpc	r19, r1
 794:	09 f1       	breq	.+66     	; 0x7d8 <malloc+0xae>
 796:	28 1b       	sub	r18, r24
 798:	39 0b       	sbc	r19, r25
 79a:	24 30       	cpi	r18, 0x04	; 4
 79c:	31 05       	cpc	r19, r1
 79e:	90 f4       	brcc	.+36     	; 0x7c4 <malloc+0x9a>
 7a0:	12 96       	adiw	r26, 0x02	; 2
 7a2:	8d 91       	ld	r24, X+
 7a4:	9c 91       	ld	r25, X
 7a6:	13 97       	sbiw	r26, 0x03	; 3
 7a8:	61 15       	cp	r22, r1
 7aa:	71 05       	cpc	r23, r1
 7ac:	21 f0       	breq	.+8      	; 0x7b6 <malloc+0x8c>
 7ae:	fb 01       	movw	r30, r22
 7b0:	93 83       	std	Z+3, r25	; 0x03
 7b2:	82 83       	std	Z+2, r24	; 0x02
 7b4:	04 c0       	rjmp	.+8      	; 0x7be <malloc+0x94>
 7b6:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <__flp+0x1>
 7ba:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <__flp>
 7be:	fd 01       	movw	r30, r26
 7c0:	32 96       	adiw	r30, 0x02	; 2
 7c2:	44 c0       	rjmp	.+136    	; 0x84c <malloc+0x122>
 7c4:	fd 01       	movw	r30, r26
 7c6:	e2 0f       	add	r30, r18
 7c8:	f3 1f       	adc	r31, r19
 7ca:	81 93       	st	Z+, r24
 7cc:	91 93       	st	Z+, r25
 7ce:	22 50       	subi	r18, 0x02	; 2
 7d0:	31 09       	sbc	r19, r1
 7d2:	2d 93       	st	X+, r18
 7d4:	3c 93       	st	X, r19
 7d6:	3a c0       	rjmp	.+116    	; 0x84c <malloc+0x122>
 7d8:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <__brkval>
 7dc:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <__brkval+0x1>
 7e0:	23 2b       	or	r18, r19
 7e2:	41 f4       	brne	.+16     	; 0x7f4 <malloc+0xca>
 7e4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7e8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7ec:	30 93 7e 01 	sts	0x017E, r19	; 0x80017e <__brkval+0x1>
 7f0:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <__brkval>
 7f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 7f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 7fc:	21 15       	cp	r18, r1
 7fe:	31 05       	cpc	r19, r1
 800:	41 f4       	brne	.+16     	; 0x812 <malloc+0xe8>
 802:	2d b7       	in	r18, 0x3d	; 61
 804:	3e b7       	in	r19, 0x3e	; 62
 806:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 80a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 80e:	24 1b       	sub	r18, r20
 810:	35 0b       	sbc	r19, r21
 812:	e0 91 7d 01 	lds	r30, 0x017D	; 0x80017d <__brkval>
 816:	f0 91 7e 01 	lds	r31, 0x017E	; 0x80017e <__brkval+0x1>
 81a:	e2 17       	cp	r30, r18
 81c:	f3 07       	cpc	r31, r19
 81e:	a0 f4       	brcc	.+40     	; 0x848 <malloc+0x11e>
 820:	2e 1b       	sub	r18, r30
 822:	3f 0b       	sbc	r19, r31
 824:	28 17       	cp	r18, r24
 826:	39 07       	cpc	r19, r25
 828:	78 f0       	brcs	.+30     	; 0x848 <malloc+0x11e>
 82a:	ac 01       	movw	r20, r24
 82c:	4e 5f       	subi	r20, 0xFE	; 254
 82e:	5f 4f       	sbci	r21, 0xFF	; 255
 830:	24 17       	cp	r18, r20
 832:	35 07       	cpc	r19, r21
 834:	48 f0       	brcs	.+18     	; 0x848 <malloc+0x11e>
 836:	4e 0f       	add	r20, r30
 838:	5f 1f       	adc	r21, r31
 83a:	50 93 7e 01 	sts	0x017E, r21	; 0x80017e <__brkval+0x1>
 83e:	40 93 7d 01 	sts	0x017D, r20	; 0x80017d <__brkval>
 842:	81 93       	st	Z+, r24
 844:	91 93       	st	Z+, r25
 846:	02 c0       	rjmp	.+4      	; 0x84c <malloc+0x122>
 848:	e0 e0       	ldi	r30, 0x00	; 0
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	cf 01       	movw	r24, r30
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	08 95       	ret

00000854 <free>:
 854:	0f 93       	push	r16
 856:	1f 93       	push	r17
 858:	cf 93       	push	r28
 85a:	df 93       	push	r29
 85c:	00 97       	sbiw	r24, 0x00	; 0
 85e:	09 f4       	brne	.+2      	; 0x862 <free+0xe>
 860:	8c c0       	rjmp	.+280    	; 0x97a <__stack+0x7b>
 862:	fc 01       	movw	r30, r24
 864:	32 97       	sbiw	r30, 0x02	; 2
 866:	13 82       	std	Z+3, r1	; 0x03
 868:	12 82       	std	Z+2, r1	; 0x02
 86a:	00 91 7f 01 	lds	r16, 0x017F	; 0x80017f <__flp>
 86e:	10 91 80 01 	lds	r17, 0x0180	; 0x800180 <__flp+0x1>
 872:	01 15       	cp	r16, r1
 874:	11 05       	cpc	r17, r1
 876:	81 f4       	brne	.+32     	; 0x898 <free+0x44>
 878:	20 81       	ld	r18, Z
 87a:	31 81       	ldd	r19, Z+1	; 0x01
 87c:	82 0f       	add	r24, r18
 87e:	93 1f       	adc	r25, r19
 880:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <__brkval>
 884:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <__brkval+0x1>
 888:	28 17       	cp	r18, r24
 88a:	39 07       	cpc	r19, r25
 88c:	79 f5       	brne	.+94     	; 0x8ec <free+0x98>
 88e:	f0 93 7e 01 	sts	0x017E, r31	; 0x80017e <__brkval+0x1>
 892:	e0 93 7d 01 	sts	0x017D, r30	; 0x80017d <__brkval>
 896:	71 c0       	rjmp	.+226    	; 0x97a <__stack+0x7b>
 898:	d8 01       	movw	r26, r16
 89a:	40 e0       	ldi	r20, 0x00	; 0
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	ae 17       	cp	r26, r30
 8a0:	bf 07       	cpc	r27, r31
 8a2:	50 f4       	brcc	.+20     	; 0x8b8 <free+0x64>
 8a4:	12 96       	adiw	r26, 0x02	; 2
 8a6:	2d 91       	ld	r18, X+
 8a8:	3c 91       	ld	r19, X
 8aa:	13 97       	sbiw	r26, 0x03	; 3
 8ac:	ad 01       	movw	r20, r26
 8ae:	21 15       	cp	r18, r1
 8b0:	31 05       	cpc	r19, r1
 8b2:	09 f1       	breq	.+66     	; 0x8f6 <free+0xa2>
 8b4:	d9 01       	movw	r26, r18
 8b6:	f3 cf       	rjmp	.-26     	; 0x89e <free+0x4a>
 8b8:	9d 01       	movw	r18, r26
 8ba:	da 01       	movw	r26, r20
 8bc:	33 83       	std	Z+3, r19	; 0x03
 8be:	22 83       	std	Z+2, r18	; 0x02
 8c0:	60 81       	ld	r22, Z
 8c2:	71 81       	ldd	r23, Z+1	; 0x01
 8c4:	86 0f       	add	r24, r22
 8c6:	97 1f       	adc	r25, r23
 8c8:	82 17       	cp	r24, r18
 8ca:	93 07       	cpc	r25, r19
 8cc:	69 f4       	brne	.+26     	; 0x8e8 <free+0x94>
 8ce:	ec 01       	movw	r28, r24
 8d0:	28 81       	ld	r18, Y
 8d2:	39 81       	ldd	r19, Y+1	; 0x01
 8d4:	26 0f       	add	r18, r22
 8d6:	37 1f       	adc	r19, r23
 8d8:	2e 5f       	subi	r18, 0xFE	; 254
 8da:	3f 4f       	sbci	r19, 0xFF	; 255
 8dc:	31 83       	std	Z+1, r19	; 0x01
 8de:	20 83       	st	Z, r18
 8e0:	8a 81       	ldd	r24, Y+2	; 0x02
 8e2:	9b 81       	ldd	r25, Y+3	; 0x03
 8e4:	93 83       	std	Z+3, r25	; 0x03
 8e6:	82 83       	std	Z+2, r24	; 0x02
 8e8:	45 2b       	or	r20, r21
 8ea:	29 f4       	brne	.+10     	; 0x8f6 <free+0xa2>
 8ec:	f0 93 80 01 	sts	0x0180, r31	; 0x800180 <__flp+0x1>
 8f0:	e0 93 7f 01 	sts	0x017F, r30	; 0x80017f <__flp>
 8f4:	42 c0       	rjmp	.+132    	; 0x97a <__stack+0x7b>
 8f6:	13 96       	adiw	r26, 0x03	; 3
 8f8:	fc 93       	st	X, r31
 8fa:	ee 93       	st	-X, r30
 8fc:	12 97       	sbiw	r26, 0x02	; 2
 8fe:	ed 01       	movw	r28, r26
 900:	49 91       	ld	r20, Y+
 902:	59 91       	ld	r21, Y+
 904:	9e 01       	movw	r18, r28
 906:	24 0f       	add	r18, r20
 908:	35 1f       	adc	r19, r21
 90a:	e2 17       	cp	r30, r18
 90c:	f3 07       	cpc	r31, r19
 90e:	71 f4       	brne	.+28     	; 0x92c <__stack+0x2d>
 910:	80 81       	ld	r24, Z
 912:	91 81       	ldd	r25, Z+1	; 0x01
 914:	84 0f       	add	r24, r20
 916:	95 1f       	adc	r25, r21
 918:	02 96       	adiw	r24, 0x02	; 2
 91a:	11 96       	adiw	r26, 0x01	; 1
 91c:	9c 93       	st	X, r25
 91e:	8e 93       	st	-X, r24
 920:	82 81       	ldd	r24, Z+2	; 0x02
 922:	93 81       	ldd	r25, Z+3	; 0x03
 924:	13 96       	adiw	r26, 0x03	; 3
 926:	9c 93       	st	X, r25
 928:	8e 93       	st	-X, r24
 92a:	12 97       	sbiw	r26, 0x02	; 2
 92c:	e0 e0       	ldi	r30, 0x00	; 0
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	d8 01       	movw	r26, r16
 932:	12 96       	adiw	r26, 0x02	; 2
 934:	8d 91       	ld	r24, X+
 936:	9c 91       	ld	r25, X
 938:	13 97       	sbiw	r26, 0x03	; 3
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	19 f0       	breq	.+6      	; 0x944 <__stack+0x45>
 93e:	f8 01       	movw	r30, r16
 940:	8c 01       	movw	r16, r24
 942:	f6 cf       	rjmp	.-20     	; 0x930 <__stack+0x31>
 944:	8d 91       	ld	r24, X+
 946:	9c 91       	ld	r25, X
 948:	98 01       	movw	r18, r16
 94a:	2e 5f       	subi	r18, 0xFE	; 254
 94c:	3f 4f       	sbci	r19, 0xFF	; 255
 94e:	82 0f       	add	r24, r18
 950:	93 1f       	adc	r25, r19
 952:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <__brkval>
 956:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <__brkval+0x1>
 95a:	28 17       	cp	r18, r24
 95c:	39 07       	cpc	r19, r25
 95e:	69 f4       	brne	.+26     	; 0x97a <__stack+0x7b>
 960:	30 97       	sbiw	r30, 0x00	; 0
 962:	29 f4       	brne	.+10     	; 0x96e <__stack+0x6f>
 964:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__flp+0x1>
 968:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__flp>
 96c:	02 c0       	rjmp	.+4      	; 0x972 <__stack+0x73>
 96e:	13 82       	std	Z+3, r1	; 0x03
 970:	12 82       	std	Z+2, r1	; 0x02
 972:	10 93 7e 01 	sts	0x017E, r17	; 0x80017e <__brkval+0x1>
 976:	00 93 7d 01 	sts	0x017D, r16	; 0x80017d <__brkval>
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	08 95       	ret

00000984 <memcpy>:
 984:	fb 01       	movw	r30, r22
 986:	dc 01       	movw	r26, r24
 988:	02 c0       	rjmp	.+4      	; 0x98e <memcpy+0xa>
 98a:	01 90       	ld	r0, Z+
 98c:	0d 92       	st	X+, r0
 98e:	41 50       	subi	r20, 0x01	; 1
 990:	50 40       	sbci	r21, 0x00	; 0
 992:	d8 f7       	brcc	.-10     	; 0x98a <memcpy+0x6>
 994:	08 95       	ret

00000996 <memset>:
 996:	dc 01       	movw	r26, r24
 998:	01 c0       	rjmp	.+2      	; 0x99c <memset+0x6>
 99a:	6d 93       	st	X+, r22
 99c:	41 50       	subi	r20, 0x01	; 1
 99e:	50 40       	sbci	r21, 0x00	; 0
 9a0:	e0 f7       	brcc	.-8      	; 0x99a <memset+0x4>
 9a2:	08 95       	ret

000009a4 <__do_global_dtors>:
 9a4:	10 e0       	ldi	r17, 0x00	; 0
 9a6:	cd e5       	ldi	r28, 0x5D	; 93
 9a8:	d0 e0       	ldi	r29, 0x00	; 0
 9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <__do_global_dtors+0x10>
 9ac:	fe 01       	movw	r30, r28
 9ae:	0e 94 8f 03 	call	0x71e	; 0x71e <__tablejump2__>
 9b2:	21 96       	adiw	r28, 0x01	; 1
 9b4:	ce 35       	cpi	r28, 0x5E	; 94
 9b6:	d1 07       	cpc	r29, r17
 9b8:	c9 f7       	brne	.-14     	; 0x9ac <__do_global_dtors+0x8>
 9ba:	f8 94       	cli

000009bc <__stop_program>:
 9bc:	ff cf       	rjmp	.-2      	; 0x9bc <__stop_program>
