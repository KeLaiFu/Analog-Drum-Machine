
Sequencer_DrumMachine.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000cac  00000d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  00800118  00800118  00000d58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008bd0  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d5c  00000000  00000000  00009cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d56  00000000  00000000  0000ba34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000096c  00000000  00000000  0000d78c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022a6  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000384b  00000000  00000000  0001039e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  00013be9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__dtors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_16>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_18>
  4c:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_19>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	c4 00       	.word	0x00c4	; ????
  ba:	14 03       	mulsu	r17, r20

000000bc <__ctors_end>:
  bc:	f1 00       	.word	0x00f1	; ????

000000be <__dtors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf ef       	ldi	r28, 0xFF	; 255
  c4:	d8 e0       	ldi	r29, 0x08	; 8
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	ec ea       	ldi	r30, 0xAC	; 172
  d2:	fc e0       	ldi	r31, 0x0C	; 12
  d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
  d6:	05 90       	lpm	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	a8 31       	cpi	r26, 0x18	; 24
  dc:	b1 07       	cpc	r27, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	a8 e1       	ldi	r26, 0x18	; 24
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
  e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
  ea:	ac 3e       	cpi	r26, 0xEC	; 236
  ec:	b2 07       	cpc	r27, r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	ce e5       	ldi	r28, 0x5E	; 94
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
  f8:	21 97       	sbiw	r28, 0x01	; 1
  fa:	fe 01       	movw	r30, r28
  fc:	0e 94 06 05 	call	0xa0c	; 0xa0c <__tablejump2__>
 100:	cc 35       	cpi	r28, 0x5C	; 92
 102:	d1 07       	cpc	r29, r17
 104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
 106:	0e 94 42 03 	call	0x684	; 0x684 <main>
 10a:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__do_global_dtors>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 112:	26 e0       	ldi	r18, 0x06	; 6
 114:	40 e8       	ldi	r20, 0x80	; 128
 116:	55 e2       	ldi	r21, 0x25	; 37
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	82 e4       	ldi	r24, 0x42	; 66
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZN14HardwareSerial5beginEmh>
public:
	_ShiftIn() : dataWidth(chipCount * 8), pulseWidth(5), lastState(0), currentState(0) {}
	
	// setup all pins
	void begin(int pload, int data, int clock) {
		pinMode(ploadPin = pload, OUTPUT);
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <InputSR>
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	0e 94 35 04 	call	0x86a	; 0x86a <pinMode>
		//pinMode(clockEnablePin = clockEN, OUTPUT);
		pinMode(dataPin = data, INPUT);
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <InputSR+0x1>
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	0e 94 35 04 	call	0x86a	; 0x86a <pinMode>
		pinMode(clockPin = clock, OUTPUT);
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <InputSR+0x2>
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	0e 94 35 04 	call	0x86a	; 0x86a <pinMode>
 148:	e8 e1       	ldi	r30, 0x18	; 24
 14a:	f1 e0       	ldi	r31, 0x01	; 1
	Serial.begin(9600);
    //Initialize input shift register
	InputSR.begin(INPUT_SR_LATCH_PIN, INPUT_SR_SERIAL_PIN, INPUT_SR_CLOCK_PIN);

	for(uint8_t i=0; i <= NUM_SHIFT_REGISTERS_OUTPUT ; i++){
		outputBuffer[i] = B10101010;
 14c:	9a ea       	ldi	r25, 0xAA	; 170
 14e:	89 e0       	ldi	r24, 0x09	; 9
 150:	8e 0f       	add	r24, r30
 152:	91 93       	st	Z+, r25
void setup() {
	Serial.begin(9600);
    //Initialize input shift register
	InputSR.begin(INPUT_SR_LATCH_PIN, INPUT_SR_SERIAL_PIN, INPUT_SR_CLOCK_PIN);

	for(uint8_t i=0; i <= NUM_SHIFT_REGISTERS_OUTPUT ; i++){
 154:	8e 13       	cpse	r24, r30
 156:	fd cf       	rjmp	.-6      	; 0x152 <setup+0x40>
		outputBuffer[i] = B10101010;
	}
}
 158:	08 95       	ret

0000015a <_Z4funcPh>:

void func(uint8_t * outputBufferRef){
 15a:	e8 e1       	ldi	r30, 0x18	; 24
 15c:	f1 e0       	ldi	r31, 0x01	; 1
	for(uint8_t i=0; i <= NUM_SHIFT_REGISTERS_OUTPUT ; i++){
		outputBuffer[i] = B11110000;
 15e:	90 ef       	ldi	r25, 0xF0	; 240
 160:	89 e0       	ldi	r24, 0x09	; 9
 162:	8e 0f       	add	r24, r30
 164:	91 93       	st	Z+, r25
		outputBuffer[i] = B10101010;
	}
}

void func(uint8_t * outputBufferRef){
	for(uint8_t i=0; i <= NUM_SHIFT_REGISTERS_OUTPUT ; i++){
 166:	8e 13       	cpse	r24, r30
 168:	fd cf       	rjmp	.-6      	; 0x164 <_Z4funcPh+0xa>
		outputBuffer[i] = B11110000;
	}
}
 16a:	08 95       	ret

0000016c <loop>:

void loop() {

	func(outputBuffer);
 16c:	88 e1       	ldi	r24, 0x18	; 24
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z4funcPh>

	OutputSR.setAll(outputBuffer);
 174:	68 e1       	ldi	r22, 0x18	; 24
 176:	71 e0       	ldi	r23, 0x01	; 1
 178:	88 e3       	ldi	r24, 0x38	; 56
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_ZN20ShiftRegister74HC5956setAllEPKh>
	OutputSR.updateRegisters();
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_ZN20ShiftRegister74HC59515updateRegistersEv>

00000188 <_GLOBAL__sub_I_OutputSR>:
}
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17

#define TRIGGER_SR_SERIAL_PIN 2
#define TRIGGER_SR_LATCH_PIN 3
#define TRIGGER_SR_CLOCK_PIN 4

ShiftRegister74HC595 OutputSR(NUM_SHIFT_REGISTERS_OUTPUT, OUTPUT_SR_SERIAL_PIN, 
 18c:	09 e0       	ldi	r16, 0x09	; 9
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	2a e0       	ldi	r18, 0x0A	; 10
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	48 e0       	ldi	r20, 0x08	; 8
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	68 e0       	ldi	r22, 0x08	; 8
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	88 e3       	ldi	r24, 0x38	; 56
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 20 01 	call	0x240	; 0x240 <_ZN20ShiftRegister74HC595C1Eiiii>
					OUTPUT_SR_CLOCK_PIN, OUTPUT_SR_LATCH_PIN);
ShiftRegister74HC595 InstrumentTrigger(NUM_SHIFT_REGISTERS_TRIGGER, 
 1a4:	03 e0       	ldi	r16, 0x03	; 3
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	24 e0       	ldi	r18, 0x04	; 4
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	42 e0       	ldi	r20, 0x02	; 2
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	8e e2       	ldi	r24, 0x2E	; 46
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 20 01 	call	0x240	; 0x240 <_ZN20ShiftRegister74HC595C1Eiiii>
	uint8_t pulseWidth;

	ShiftType lastState;
	ShiftType currentState;
public:
	_ShiftIn() : dataWidth(chipCount * 8), pulseWidth(5), lastState(0), currentState(0) {}
 1bc:	e0 e2       	ldi	r30, 0x20	; 32
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	94 83       	std	Z+4, r25	; 0x04
 1c6:	83 83       	std	Z+3, r24	; 0x03
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	85 83       	std	Z+5, r24	; 0x05
 1cc:	16 82       	std	Z+6, r1	; 0x06
 1ce:	17 82       	std	Z+7, r1	; 0x07
 1d0:	10 86       	std	Z+8, r1	; 0x08
 1d2:	11 86       	std	Z+9, r1	; 0x09
 1d4:	12 86       	std	Z+10, r1	; 0x0a
 1d6:	13 86       	std	Z+11, r1	; 0x0b
 1d8:	14 86       	std	Z+12, r1	; 0x0c
 1da:	15 86       	std	Z+13, r1	; 0x0d

	func(outputBuffer);

	OutputSR.setAll(outputBuffer);
	OutputSR.updateRegisters();
}
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	08 95       	ret

000001e2 <_GLOBAL__sub_D_OutputSR>:
#define TRIGGER_SR_LATCH_PIN 3
#define TRIGGER_SR_CLOCK_PIN 4

ShiftRegister74HC595 OutputSR(NUM_SHIFT_REGISTERS_OUTPUT, OUTPUT_SR_SERIAL_PIN, 
					OUTPUT_SR_CLOCK_PIN, OUTPUT_SR_LATCH_PIN);
ShiftRegister74HC595 InstrumentTrigger(NUM_SHIFT_REGISTERS_TRIGGER, 
 1e2:	8e e2       	ldi	r24, 0x2E	; 46
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN20ShiftRegister74HC595D1Ev>

#define TRIGGER_SR_SERIAL_PIN 2
#define TRIGGER_SR_LATCH_PIN 3
#define TRIGGER_SR_CLOCK_PIN 4

ShiftRegister74HC595 OutputSR(NUM_SHIFT_REGISTERS_OUTPUT, OUTPUT_SR_SERIAL_PIN, 
 1ea:	88 e3       	ldi	r24, 0x38	; 56
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_ZN20ShiftRegister74HC595D1Ev>

000001f2 <_ZN20ShiftRegister74HC595D1Ev>:
// Retrieve all states of the shift registers' output pins.
// The returned array's length is equal to the numbe of shift registers.
uint8_t * ShiftRegister74HC595::getAll()
{
    return _digitalValues; 
}
 1f2:	fc 01       	movw	r30, r24
 1f4:	80 85       	ldd	r24, Z+8	; 0x08
 1f6:	91 85       	ldd	r25, Z+9	; 0x09
 1f8:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <free>

000001fc <_ZN20ShiftRegister74HC59515updateRegistersEv>:


// Updates the shift register pins to the stored output values.
// This is the function that actually writes data into the shift registers of the 74HC595
void ShiftRegister74HC595::updateRegisters()
{
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
 206:	08 81       	ld	r16, Y
 208:	19 81       	ldd	r17, Y+1	; 0x01
 20a:	01 50       	subi	r16, 0x01	; 1
 20c:	11 09       	sbc	r17, r1
    for (int i = _numberOfShiftRegisters - 1; i >= 0; i--) {
 20e:	17 fd       	sbrc	r17, 7
 210:	0b c0       	rjmp	.+22     	; 0x228 <_ZN20ShiftRegister74HC59515updateRegistersEv+0x2c>
        shiftOut(_serialDataPin, _clockPin, MSBFIRST, _digitalValues[i]);
 212:	e8 85       	ldd	r30, Y+8	; 0x08
 214:	f9 85       	ldd	r31, Y+9	; 0x09
 216:	e0 0f       	add	r30, r16
 218:	f1 1f       	adc	r31, r17
 21a:	20 81       	ld	r18, Z
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	6a 81       	ldd	r22, Y+2	; 0x02
 220:	8c 81       	ldd	r24, Y+4	; 0x04
 222:	0e 94 a1 04 	call	0x942	; 0x942 <shiftOut>
 226:	f1 cf       	rjmp	.-30     	; 0x20a <_ZN20ShiftRegister74HC59515updateRegistersEv+0xe>
    }
    
    digitalWrite(_latchPin, HIGH);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	8e 81       	ldd	r24, Y+6	; 0x06
 22c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>
    digitalWrite(_latchPin, LOW);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	8e 81       	ldd	r24, Y+6	; 0x06
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
    for (int i = _numberOfShiftRegisters - 1; i >= 0; i--) {
        shiftOut(_serialDataPin, _clockPin, MSBFIRST, _digitalValues[i]);
    }
    
    digitalWrite(_latchPin, HIGH);
    digitalWrite(_latchPin, LOW);
 23c:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <digitalWrite>

00000240 <_ZN20ShiftRegister74HC595C1Eiiii>:
#include "Arduino.h"
#include "ShiftRegister74HC595.h"


// ShiftRegister74HC595 constructor
ShiftRegister74HC595::ShiftRegister74HC595(int numberOfShiftRegisters, int serialDataPin, int clockPin, int latchPin)
 240:	af 92       	push	r10
 242:	bf 92       	push	r11
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	1f 92       	push	r1
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	5c 01       	movw	r10, r24
 25a:	7b 01       	movw	r14, r22
 25c:	d4 2e       	mov	r13, r20
{
    // set attributes
    _numberOfShiftRegisters = numberOfShiftRegisters;
 25e:	fc 01       	movw	r30, r24
 260:	71 83       	std	Z+1, r23	; 0x01
 262:	60 83       	st	Z, r22

    _clockPin = clockPin;
 264:	22 83       	std	Z+2, r18	; 0x02
 266:	33 83       	std	Z+3, r19	; 0x03
    _serialDataPin = serialDataPin;
 268:	44 83       	std	Z+4, r20	; 0x04
 26a:	55 83       	std	Z+5, r21	; 0x05
    _latchPin = latchPin;
 26c:	06 83       	std	Z+6, r16	; 0x06
 26e:	17 83       	std	Z+7, r17	; 0x07

    // define pins as outputs
    pinMode(clockPin, OUTPUT);
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	82 2f       	mov	r24, r18
 274:	29 83       	std	Y+1, r18	; 0x01
 276:	0e 94 35 04 	call	0x86a	; 0x86a <pinMode>
    pinMode(serialDataPin, OUTPUT);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	8d 2d       	mov	r24, r13
 27e:	0e 94 35 04 	call	0x86a	; 0x86a <pinMode>
    pinMode(latchPin, OUTPUT);
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	80 2f       	mov	r24, r16
 286:	0e 94 35 04 	call	0x86a	; 0x86a <pinMode>

    // set pins low
    digitalWrite(clockPin, LOW);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	29 81       	ldd	r18, Y+1	; 0x01
 28e:	82 2f       	mov	r24, r18
 290:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>
    digitalWrite(serialDataPin, LOW);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	8d 2d       	mov	r24, r13
 298:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>
    digitalWrite(latchPin, LOW);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	80 2f       	mov	r24, r16
 2a0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>

    // allocates the specified number of bytes and initializes them to zero
    _digitalValues = (uint8_t *)malloc(numberOfShiftRegisters * sizeof(uint8_t));
 2a4:	c7 01       	movw	r24, r14
 2a6:	0e 94 0c 05 	call	0xa18	; 0xa18 <malloc>
 2aa:	f5 01       	movw	r30, r10
 2ac:	91 87       	std	Z+9, r25	; 0x09
 2ae:	80 87       	std	Z+8, r24	; 0x08
    memset(_digitalValues, 0, numberOfShiftRegisters * sizeof(uint8_t));
 2b0:	a7 01       	movw	r20, r14
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	0e 94 42 06 	call	0xc84	; 0xc84 <memset>

    updateRegisters();       // reset shift register
 2ba:	c5 01       	movw	r24, r10
}
 2bc:	0f 90       	pop	r0
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	bf 90       	pop	r11
 2ce:	af 90       	pop	r10

    // allocates the specified number of bytes and initializes them to zero
    _digitalValues = (uint8_t *)malloc(numberOfShiftRegisters * sizeof(uint8_t));
    memset(_digitalValues, 0, numberOfShiftRegisters * sizeof(uint8_t));

    updateRegisters();       // reset shift register
 2d0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_ZN20ShiftRegister74HC59515updateRegistersEv>

000002d4 <_ZN20ShiftRegister74HC5956setAllEPKh>:


// Set all pins of the shift registers at once.
// digitalVAlues is a uint8_t array where the length is equal to the number of shift registers.
void ShiftRegister74HC595::setAll(const uint8_t * digitalValues)
{
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	ec 01       	movw	r28, r24
    memcpy( _digitalValues, digitalValues, _numberOfShiftRegisters);   // dest, src, size
 2da:	48 81       	ld	r20, Y
 2dc:	59 81       	ldd	r21, Y+1	; 0x01
 2de:	88 85       	ldd	r24, Y+8	; 0x08
 2e0:	99 85       	ldd	r25, Y+9	; 0x09
 2e2:	0e 94 39 06 	call	0xc72	; 0xc72 <memcpy>
    updateRegisters();
 2e6:	ce 01       	movw	r24, r28
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
// Set all pins of the shift registers at once.
// digitalVAlues is a uint8_t array where the length is equal to the number of shift registers.
void ShiftRegister74HC595::setAll(const uint8_t * digitalValues)
{
    memcpy( _digitalValues, digitalValues, _numberOfShiftRegisters);   // dest, src, size
    updateRegisters();
 2ec:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_ZN20ShiftRegister74HC59515updateRegistersEv>

000002f0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2f0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2f2:	91 8d       	ldd	r25, Z+25	; 0x19
 2f4:	22 8d       	ldd	r18, Z+26	; 0x1a
 2f6:	89 2f       	mov	r24, r25
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	80 5c       	subi	r24, 0xC0	; 192
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	82 1b       	sub	r24, r18
 300:	91 09       	sbc	r25, r1
}
 302:	8f 73       	andi	r24, 0x3F	; 63
 304:	99 27       	eor	r25, r25
 306:	08 95       	ret

00000308 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 308:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 30a:	91 8d       	ldd	r25, Z+25	; 0x19
 30c:	82 8d       	ldd	r24, Z+26	; 0x1a
 30e:	98 17       	cp	r25, r24
 310:	31 f0       	breq	.+12     	; 0x31e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 312:	82 8d       	ldd	r24, Z+26	; 0x1a
 314:	e8 0f       	add	r30, r24
 316:	f1 1d       	adc	r31, r1
 318:	85 8d       	ldd	r24, Z+29	; 0x1d
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 322:	08 95       	ret

00000324 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 324:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 326:	91 8d       	ldd	r25, Z+25	; 0x19
 328:	82 8d       	ldd	r24, Z+26	; 0x1a
 32a:	98 17       	cp	r25, r24
 32c:	61 f0       	breq	.+24     	; 0x346 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 32e:	82 8d       	ldd	r24, Z+26	; 0x1a
 330:	df 01       	movw	r26, r30
 332:	a8 0f       	add	r26, r24
 334:	b1 1d       	adc	r27, r1
 336:	5d 96       	adiw	r26, 0x1d	; 29
 338:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 33a:	92 8d       	ldd	r25, Z+26	; 0x1a
 33c:	9f 5f       	subi	r25, 0xFF	; 255
 33e:	9f 73       	andi	r25, 0x3F	; 63
 340:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 34a:	08 95       	ret

0000034c <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 34c:	fc 01       	movw	r30, r24
 34e:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 350:	44 8d       	ldd	r20, Z+28	; 0x1c
 352:	25 2f       	mov	r18, r21
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	84 2f       	mov	r24, r20
 358:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 35a:	82 1b       	sub	r24, r18
 35c:	93 0b       	sbc	r25, r19
 35e:	54 17       	cp	r21, r20
 360:	10 f0       	brcs	.+4      	; 0x366 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 362:	cf 96       	adiw	r24, 0x3f	; 63
 364:	08 95       	ret
  return tail - head - 1;
 366:	01 97       	sbiw	r24, 0x01	; 1
}
 368:	08 95       	ret

0000036a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 36a:	8a e0       	ldi	r24, 0x0A	; 10
 36c:	93 e0       	ldi	r25, 0x03	; 3
 36e:	89 2b       	or	r24, r25
 370:	49 f0       	breq	.+18     	; 0x384 <_Z14serialEventRunv+0x1a>
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	89 2b       	or	r24, r25
 378:	29 f0       	breq	.+10     	; 0x384 <_Z14serialEventRunv+0x1a>
 37a:	0e 94 0a 03 	call	0x614	; 0x614 <_Z17Serial0_availablev>
 37e:	81 11       	cpse	r24, r1
 380:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 384:	08 95       	ret

00000386 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 386:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 388:	84 8d       	ldd	r24, Z+28	; 0x1c
 38a:	df 01       	movw	r26, r30
 38c:	a8 0f       	add	r26, r24
 38e:	b1 1d       	adc	r27, r1
 390:	a3 5a       	subi	r26, 0xA3	; 163
 392:	bf 4f       	sbci	r27, 0xFF	; 255
 394:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 396:	84 8d       	ldd	r24, Z+28	; 0x1c
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	8f 73       	andi	r24, 0x3F	; 63
 39e:	99 27       	eor	r25, r25
 3a0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 3a2:	a6 89       	ldd	r26, Z+22	; 0x16
 3a4:	b7 89       	ldd	r27, Z+23	; 0x17
 3a6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 3a8:	a0 89       	ldd	r26, Z+16	; 0x10
 3aa:	b1 89       	ldd	r27, Z+17	; 0x11
 3ac:	8c 91       	ld	r24, X
 3ae:	80 64       	ori	r24, 0x40	; 64
 3b0:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 3b2:	93 8d       	ldd	r25, Z+27	; 0x1b
 3b4:	84 8d       	ldd	r24, Z+28	; 0x1c
 3b6:	98 13       	cpse	r25, r24
 3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 3ba:	02 88       	ldd	r0, Z+18	; 0x12
 3bc:	f3 89       	ldd	r31, Z+19	; 0x13
 3be:	e0 2d       	mov	r30, r0
 3c0:	80 81       	ld	r24, Z
 3c2:	8f 7d       	andi	r24, 0xDF	; 223
 3c4:	80 83       	st	Z, r24
 3c6:	08 95       	ret

000003c8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 3ce:	88 8d       	ldd	r24, Y+24	; 0x18
 3d0:	88 23       	and	r24, r24
 3d2:	c9 f0       	breq	.+50     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 3d4:	ea 89       	ldd	r30, Y+18	; 0x12
 3d6:	fb 89       	ldd	r31, Y+19	; 0x13
 3d8:	80 81       	ld	r24, Z
 3da:	85 fd       	sbrc	r24, 5
 3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <_ZN14HardwareSerial5flushEv+0x20>
 3de:	a8 89       	ldd	r26, Y+16	; 0x10
 3e0:	b9 89       	ldd	r27, Y+17	; 0x11
 3e2:	8c 91       	ld	r24, X
 3e4:	86 fd       	sbrc	r24, 6
 3e6:	0f c0       	rjmp	.+30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	07 fc       	sbrc	r0, 7
 3ec:	f5 cf       	rjmp	.-22     	; 0x3d8 <_ZN14HardwareSerial5flushEv+0x10>
 3ee:	80 81       	ld	r24, Z
 3f0:	85 ff       	sbrs	r24, 5
 3f2:	f2 cf       	rjmp	.-28     	; 0x3d8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 3f4:	a8 89       	ldd	r26, Y+16	; 0x10
 3f6:	b9 89       	ldd	r27, Y+17	; 0x11
 3f8:	8c 91       	ld	r24, X
 3fa:	85 ff       	sbrs	r24, 5
 3fc:	ed cf       	rjmp	.-38     	; 0x3d8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 3fe:	ce 01       	movw	r24, r28
 400:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 404:	e7 cf       	rjmp	.-50     	; 0x3d4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 40c:	ef 92       	push	r14
 40e:	ff 92       	push	r15
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	ec 01       	movw	r28, r24
  _written = true;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 41e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 420:	8c 8d       	ldd	r24, Y+28	; 0x1c
 422:	98 13       	cpse	r25, r24
 424:	05 c0       	rjmp	.+10     	; 0x430 <_ZN14HardwareSerial5writeEh+0x24>
 426:	e8 89       	ldd	r30, Y+16	; 0x10
 428:	f9 89       	ldd	r31, Y+17	; 0x11
 42a:	80 81       	ld	r24, Z
 42c:	85 fd       	sbrc	r24, 5
 42e:	24 c0       	rjmp	.+72     	; 0x478 <_ZN14HardwareSerial5writeEh+0x6c>
 430:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 432:	0b 8d       	ldd	r16, Y+27	; 0x1b
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	0f 5f       	subi	r16, 0xFF	; 255
 438:	1f 4f       	sbci	r17, 0xFF	; 255
 43a:	0f 73       	andi	r16, 0x3F	; 63
 43c:	11 27       	eor	r17, r17
 43e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 440:	8c 8d       	ldd	r24, Y+28	; 0x1c
 442:	e8 12       	cpse	r14, r24
 444:	0c c0       	rjmp	.+24     	; 0x45e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	07 fc       	sbrc	r0, 7
 44a:	fa cf       	rjmp	.-12     	; 0x440 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 44c:	e8 89       	ldd	r30, Y+16	; 0x10
 44e:	f9 89       	ldd	r31, Y+17	; 0x11
 450:	80 81       	ld	r24, Z
 452:	85 ff       	sbrs	r24, 5
 454:	f5 cf       	rjmp	.-22     	; 0x440 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 456:	ce 01       	movw	r24, r28
 458:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 45c:	f1 cf       	rjmp	.-30     	; 0x440 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 45e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 460:	fe 01       	movw	r30, r28
 462:	e8 0f       	add	r30, r24
 464:	f1 1d       	adc	r31, r1
 466:	e3 5a       	subi	r30, 0xA3	; 163
 468:	ff 4f       	sbci	r31, 0xFF	; 255
 46a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 46c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 46e:	ea 89       	ldd	r30, Y+18	; 0x12
 470:	fb 89       	ldd	r31, Y+19	; 0x13
 472:	80 81       	ld	r24, Z
 474:	80 62       	ori	r24, 0x20	; 32
 476:	07 c0       	rjmp	.+14     	; 0x486 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 478:	ee 89       	ldd	r30, Y+22	; 0x16
 47a:	ff 89       	ldd	r31, Y+23	; 0x17
 47c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 47e:	e8 89       	ldd	r30, Y+16	; 0x10
 480:	f9 89       	ldd	r31, Y+17	; 0x11
 482:	80 81       	ld	r24, Z
 484:	80 64       	ori	r24, 0x40	; 64
 486:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	08 95       	ret

0000049a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 49a:	cf 92       	push	r12
 49c:	df 92       	push	r13
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	ec 01       	movw	r28, r24
 4aa:	6a 01       	movw	r12, r20
 4ac:	7b 01       	movw	r14, r22
 4ae:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 4b0:	e8 89       	ldd	r30, Y+16	; 0x10
 4b2:	f9 89       	ldd	r31, Y+17	; 0x11
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4b8:	41 15       	cp	r20, r1
 4ba:	51 4e       	sbci	r21, 0xE1	; 225
 4bc:	61 05       	cpc	r22, r1
 4be:	71 05       	cpc	r23, r1
 4c0:	b1 f0       	breq	.+44     	; 0x4ee <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	79 e0       	ldi	r23, 0x09	; 9
 4c6:	8d e3       	ldi	r24, 0x3D	; 61
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	a7 01       	movw	r20, r14
 4cc:	96 01       	movw	r18, r12
 4ce:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__udivmodsi4>
 4d2:	da 01       	movw	r26, r20
 4d4:	c9 01       	movw	r24, r18
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	a1 09       	sbc	r26, r1
 4da:	b1 09       	sbc	r27, r1
 4dc:	b6 95       	lsr	r27
 4de:	a7 95       	ror	r26
 4e0:	97 95       	ror	r25
 4e2:	87 95       	ror	r24
 4e4:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4e6:	41 15       	cp	r20, r1
 4e8:	80 e1       	ldi	r24, 0x10	; 16
 4ea:	58 07       	cpc	r21, r24
 4ec:	a8 f0       	brcs	.+42     	; 0x518 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 4ee:	e8 89       	ldd	r30, Y+16	; 0x10
 4f0:	f9 89       	ldd	r31, Y+17	; 0x11
 4f2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 4f4:	60 e8       	ldi	r22, 0x80	; 128
 4f6:	74 e8       	ldi	r23, 0x84	; 132
 4f8:	8e e1       	ldi	r24, 0x1E	; 30
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	a7 01       	movw	r20, r14
 4fe:	96 01       	movw	r18, r12
 500:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__udivmodsi4>
 504:	ba 01       	movw	r22, r20
 506:	a9 01       	movw	r20, r18
 508:	41 50       	subi	r20, 0x01	; 1
 50a:	51 09       	sbc	r21, r1
 50c:	61 09       	sbc	r22, r1
 50e:	71 09       	sbc	r23, r1
 510:	76 95       	lsr	r23
 512:	67 95       	ror	r22
 514:	57 95       	ror	r21
 516:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 518:	ec 85       	ldd	r30, Y+12	; 0x0c
 51a:	fd 85       	ldd	r31, Y+13	; 0x0d
 51c:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 51e:	ee 85       	ldd	r30, Y+14	; 0x0e
 520:	ff 85       	ldd	r31, Y+15	; 0x0f
 522:	40 83       	st	Z, r20

  _written = false;
 524:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 526:	ec 89       	ldd	r30, Y+20	; 0x14
 528:	fd 89       	ldd	r31, Y+21	; 0x15
 52a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 52c:	ea 89       	ldd	r30, Y+18	; 0x12
 52e:	fb 89       	ldd	r31, Y+19	; 0x13
 530:	80 81       	ld	r24, Z
 532:	80 61       	ori	r24, 0x10	; 16
 534:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 536:	ea 89       	ldd	r30, Y+18	; 0x12
 538:	fb 89       	ldd	r31, Y+19	; 0x13
 53a:	80 81       	ld	r24, Z
 53c:	88 60       	ori	r24, 0x08	; 8
 53e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 540:	ea 89       	ldd	r30, Y+18	; 0x12
 542:	fb 89       	ldd	r31, Y+19	; 0x13
 544:	80 81       	ld	r24, Z
 546:	80 68       	ori	r24, 0x80	; 128
 548:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 54a:	ea 89       	ldd	r30, Y+18	; 0x12
 54c:	fb 89       	ldd	r31, Y+19	; 0x13
 54e:	80 81       	ld	r24, Z
 550:	8f 7d       	andi	r24, 0xDF	; 223
 552:	80 83       	st	Z, r24
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	ff 90       	pop	r15
 55c:	ef 90       	pop	r14
 55e:	df 90       	pop	r13
 560:	cf 90       	pop	r12
 562:	08 95       	ret

00000564 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	2f 93       	push	r18
 570:	8f 93       	push	r24
 572:	9f 93       	push	r25
 574:	ef 93       	push	r30
 576:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 578:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Serial+0x10>
 57c:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Serial+0x11>
 580:	80 81       	ld	r24, Z
 582:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Serial+0x16>
 586:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Serial+0x17>
 58a:	82 fd       	sbrc	r24, 2
 58c:	12 c0       	rjmp	.+36     	; 0x5b2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 58e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 590:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <Serial+0x19>
 594:	8f 5f       	subi	r24, 0xFF	; 255
 596:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 598:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <Serial+0x1a>
 59c:	82 17       	cp	r24, r18
 59e:	51 f0       	breq	.+20     	; 0x5b4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 5a0:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <Serial+0x19>
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	ee 5b       	subi	r30, 0xBE	; 190
 5a8:	fe 4f       	sbci	r31, 0xFE	; 254
 5aa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5ac:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <Serial+0x19>
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5b2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 5b4:	ff 91       	pop	r31
 5b6:	ef 91       	pop	r30
 5b8:	9f 91       	pop	r25
 5ba:	8f 91       	pop	r24
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	2f 93       	push	r18
 5d4:	3f 93       	push	r19
 5d6:	4f 93       	push	r20
 5d8:	5f 93       	push	r21
 5da:	6f 93       	push	r22
 5dc:	7f 93       	push	r23
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	af 93       	push	r26
 5e4:	bf 93       	push	r27
 5e6:	ef 93       	push	r30
 5e8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 5ea:	82 e4       	ldi	r24, 0x42	; 66
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 c3 01 	call	0x386	; 0x386 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 5f2:	ff 91       	pop	r31
 5f4:	ef 91       	pop	r30
 5f6:	bf 91       	pop	r27
 5f8:	af 91       	pop	r26
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	7f 91       	pop	r23
 600:	6f 91       	pop	r22
 602:	5f 91       	pop	r21
 604:	4f 91       	pop	r20
 606:	3f 91       	pop	r19
 608:	2f 91       	pop	r18
 60a:	0f 90       	pop	r0
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	0f 90       	pop	r0
 610:	1f 90       	pop	r1
 612:	18 95       	reti

00000614 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 614:	82 e4       	ldi	r24, 0x42	; 66
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_ZN14HardwareSerial9availableEv>
 61c:	21 e0       	ldi	r18, 0x01	; 1
 61e:	89 2b       	or	r24, r25
 620:	09 f4       	brne	.+2      	; 0x624 <_Z17Serial0_availablev+0x10>
 622:	20 e0       	ldi	r18, 0x00	; 0
}
 624:	82 2f       	mov	r24, r18
 626:	08 95       	ret

00000628 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 628:	e2 e4       	ldi	r30, 0x42	; 66
 62a:	f1 e0       	ldi	r31, 0x01	; 1
 62c:	13 82       	std	Z+3, r1	; 0x03
 62e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 630:	88 ee       	ldi	r24, 0xE8	; 232
 632:	93 e0       	ldi	r25, 0x03	; 3
 634:	a0 e0       	ldi	r26, 0x00	; 0
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	84 83       	std	Z+4, r24	; 0x04
 63a:	95 83       	std	Z+5, r25	; 0x05
 63c:	a6 83       	std	Z+6, r26	; 0x06
 63e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 640:	8a e0       	ldi	r24, 0x0A	; 10
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	91 83       	std	Z+1, r25	; 0x01
 646:	80 83       	st	Z, r24
 648:	85 ec       	ldi	r24, 0xC5	; 197
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	95 87       	std	Z+13, r25	; 0x0d
 64e:	84 87       	std	Z+12, r24	; 0x0c
 650:	84 ec       	ldi	r24, 0xC4	; 196
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	97 87       	std	Z+15, r25	; 0x0f
 656:	86 87       	std	Z+14, r24	; 0x0e
 658:	80 ec       	ldi	r24, 0xC0	; 192
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	91 8b       	std	Z+17, r25	; 0x11
 65e:	80 8b       	std	Z+16, r24	; 0x10
 660:	81 ec       	ldi	r24, 0xC1	; 193
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	93 8b       	std	Z+19, r25	; 0x13
 666:	82 8b       	std	Z+18, r24	; 0x12
 668:	82 ec       	ldi	r24, 0xC2	; 194
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	95 8b       	std	Z+21, r25	; 0x15
 66e:	84 8b       	std	Z+20, r24	; 0x14
 670:	86 ec       	ldi	r24, 0xC6	; 198
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	97 8b       	std	Z+23, r25	; 0x17
 676:	86 8b       	std	Z+22, r24	; 0x16
 678:	11 8e       	std	Z+25, r1	; 0x19
 67a:	12 8e       	std	Z+26, r1	; 0x1a
 67c:	13 8e       	std	Z+27, r1	; 0x1b
 67e:	14 8e       	std	Z+28, r1	; 0x1c
 680:	08 95       	ret

00000682 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 682:	08 95       	ret

00000684 <main>:

int main(void)
{
	init();
 684:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <init>

	initVariant();
 688:	0e 94 41 03 	call	0x682	; 0x682 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 68c:	0e 94 89 00 	call	0x112	; 0x112 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 690:	c5 eb       	ldi	r28, 0xB5	; 181
 692:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 694:	0e 94 b6 00 	call	0x16c	; 0x16c <loop>
		if (serialEventRun) serialEventRun();
 698:	20 97       	sbiw	r28, 0x00	; 0
 69a:	e1 f3       	breq	.-8      	; 0x694 <main+0x10>
 69c:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z14serialEventRunv>
 6a0:	f9 cf       	rjmp	.-14     	; 0x694 <main+0x10>

000006a2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 6a2:	cf 92       	push	r12
 6a4:	df 92       	push	r13
 6a6:	ef 92       	push	r14
 6a8:	ff 92       	push	r15
 6aa:	0f 93       	push	r16
 6ac:	1f 93       	push	r17
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	6c 01       	movw	r12, r24
 6b4:	7a 01       	movw	r14, r20
 6b6:	8b 01       	movw	r16, r22
  size_t n = 0;
 6b8:	c0 e0       	ldi	r28, 0x00	; 0
 6ba:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 6bc:	ce 15       	cp	r28, r14
 6be:	df 05       	cpc	r29, r15
 6c0:	89 f0       	breq	.+34     	; 0x6e4 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
 6c2:	d8 01       	movw	r26, r16
 6c4:	6d 91       	ld	r22, X+
 6c6:	8d 01       	movw	r16, r26
 6c8:	d6 01       	movw	r26, r12
 6ca:	ed 91       	ld	r30, X+
 6cc:	fc 91       	ld	r31, X
 6ce:	01 90       	ld	r0, Z+
 6d0:	f0 81       	ld	r31, Z
 6d2:	e0 2d       	mov	r30, r0
 6d4:	c6 01       	movw	r24, r12
 6d6:	09 95       	icall
 6d8:	89 2b       	or	r24, r25
 6da:	11 f4       	brne	.+4      	; 0x6e0 <_ZN5Print5writeEPKhj+0x3e>
 6dc:	7e 01       	movw	r14, r28
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <_ZN5Print5writeEPKhj+0x42>
 6e0:	21 96       	adiw	r28, 0x01	; 1
 6e2:	ec cf       	rjmp	.-40     	; 0x6bc <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 6e4:	c7 01       	movw	r24, r14
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	ff 90       	pop	r15
 6f0:	ef 90       	pop	r14
 6f2:	df 90       	pop	r13
 6f4:	cf 90       	pop	r12
 6f6:	08 95       	ret

000006f8 <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 6f8:	1f 92       	push	r1
 6fa:	0f 92       	push	r0
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	0f 92       	push	r0
 700:	11 24       	eor	r1, r1
 702:	2f 93       	push	r18
 704:	3f 93       	push	r19
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	af 93       	push	r26
 70c:	bf 93       	push	r27
 70e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer0_millis>
 712:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timer0_millis+0x1>
 716:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <timer0_millis+0x2>
 71a:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <timer0_millis+0x3>
 71e:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <timer0_fract>
 722:	23 e0       	ldi	r18, 0x03	; 3
 724:	23 0f       	add	r18, r19
 726:	2d 37       	cpi	r18, 0x7D	; 125
 728:	20 f4       	brcc	.+8      	; 0x732 <__vector_16+0x3a>
 72a:	01 96       	adiw	r24, 0x01	; 1
 72c:	a1 1d       	adc	r26, r1
 72e:	b1 1d       	adc	r27, r1
 730:	05 c0       	rjmp	.+10     	; 0x73c <__vector_16+0x44>
 732:	26 e8       	ldi	r18, 0x86	; 134
 734:	23 0f       	add	r18, r19
 736:	02 96       	adiw	r24, 0x02	; 2
 738:	a1 1d       	adc	r26, r1
 73a:	b1 1d       	adc	r27, r1
 73c:	20 93 df 01 	sts	0x01DF, r18	; 0x8001df <timer0_fract>
 740:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <timer0_millis>
 744:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <timer0_millis+0x1>
 748:	a0 93 e2 01 	sts	0x01E2, r26	; 0x8001e2 <timer0_millis+0x2>
 74c:	b0 93 e3 01 	sts	0x01E3, r27	; 0x8001e3 <timer0_millis+0x3>
 750:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <timer0_overflow_count>
 754:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <timer0_overflow_count+0x1>
 758:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <timer0_overflow_count+0x2>
 75c:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <timer0_overflow_count+0x3>
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	a1 1d       	adc	r26, r1
 764:	b1 1d       	adc	r27, r1
 766:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <timer0_overflow_count>
 76a:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <timer0_overflow_count+0x1>
 76e:	a0 93 e6 01 	sts	0x01E6, r26	; 0x8001e6 <timer0_overflow_count+0x2>
 772:	b0 93 e7 01 	sts	0x01E7, r27	; 0x8001e7 <timer0_overflow_count+0x3>
 776:	bf 91       	pop	r27
 778:	af 91       	pop	r26
 77a:	9f 91       	pop	r25
 77c:	8f 91       	pop	r24
 77e:	3f 91       	pop	r19
 780:	2f 91       	pop	r18
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
 78c:	82 30       	cpi	r24, 0x02	; 2
 78e:	91 05       	cpc	r25, r1
 790:	38 f0       	brcs	.+14     	; 0x7a0 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
 79a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
 79c:	01 97       	sbiw	r24, 0x01	; 1
 79e:	f1 f7       	brne	.-4      	; 0x79c <delayMicroseconds+0x10>
 7a0:	08 95       	ret

000007a2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 7a2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 7a4:	84 b5       	in	r24, 0x24	; 36
 7a6:	82 60       	ori	r24, 0x02	; 2
 7a8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 7aa:	84 b5       	in	r24, 0x24	; 36
 7ac:	81 60       	ori	r24, 0x01	; 1
 7ae:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 7b0:	85 b5       	in	r24, 0x25	; 37
 7b2:	82 60       	ori	r24, 0x02	; 2
 7b4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 7b6:	85 b5       	in	r24, 0x25	; 37
 7b8:	81 60       	ori	r24, 0x01	; 1
 7ba:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 7bc:	ee e6       	ldi	r30, 0x6E	; 110
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	81 60       	ori	r24, 0x01	; 1
 7c4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 7c6:	e1 e8       	ldi	r30, 0x81	; 129
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 7cc:	80 81       	ld	r24, Z
 7ce:	82 60       	ori	r24, 0x02	; 2
 7d0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 7d2:	80 81       	ld	r24, Z
 7d4:	81 60       	ori	r24, 0x01	; 1
 7d6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 7d8:	e0 e8       	ldi	r30, 0x80	; 128
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	81 60       	ori	r24, 0x01	; 1
 7e0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 7e2:	e1 eb       	ldi	r30, 0xB1	; 177
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	80 81       	ld	r24, Z
 7e8:	84 60       	ori	r24, 0x04	; 4
 7ea:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 7ec:	e0 eb       	ldi	r30, 0xB0	; 176
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	81 60       	ori	r24, 0x01	; 1
 7f4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 7f6:	ea e7       	ldi	r30, 0x7A	; 122
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	84 60       	ori	r24, 0x04	; 4
 7fe:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 800:	80 81       	ld	r24, Z
 802:	82 60       	ori	r24, 0x02	; 2
 804:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 806:	80 81       	ld	r24, Z
 808:	81 60       	ori	r24, 0x01	; 1
 80a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 80c:	80 81       	ld	r24, Z
 80e:	80 68       	ori	r24, 0x80	; 128
 810:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 812:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 816:	08 95       	ret

00000818 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 818:	83 30       	cpi	r24, 0x03	; 3
 81a:	81 f0       	breq	.+32     	; 0x83c <turnOffPWM+0x24>
 81c:	28 f4       	brcc	.+10     	; 0x828 <turnOffPWM+0x10>
 81e:	81 30       	cpi	r24, 0x01	; 1
 820:	99 f0       	breq	.+38     	; 0x848 <turnOffPWM+0x30>
 822:	82 30       	cpi	r24, 0x02	; 2
 824:	a1 f0       	breq	.+40     	; 0x84e <turnOffPWM+0x36>
 826:	08 95       	ret
 828:	87 30       	cpi	r24, 0x07	; 7
 82a:	a9 f0       	breq	.+42     	; 0x856 <turnOffPWM+0x3e>
 82c:	88 30       	cpi	r24, 0x08	; 8
 82e:	b9 f0       	breq	.+46     	; 0x85e <turnOffPWM+0x46>
 830:	84 30       	cpi	r24, 0x04	; 4
 832:	d1 f4       	brne	.+52     	; 0x868 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 834:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 838:	8f 7d       	andi	r24, 0xDF	; 223
 83a:	03 c0       	rjmp	.+6      	; 0x842 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 83c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 840:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 842:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 846:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 848:	84 b5       	in	r24, 0x24	; 36
 84a:	8f 77       	andi	r24, 0x7F	; 127
 84c:	02 c0       	rjmp	.+4      	; 0x852 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 84e:	84 b5       	in	r24, 0x24	; 36
 850:	8f 7d       	andi	r24, 0xDF	; 223
 852:	84 bd       	out	0x24, r24	; 36
 854:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 856:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 85a:	8f 77       	andi	r24, 0x7F	; 127
 85c:	03 c0       	rjmp	.+6      	; 0x864 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 85e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 862:	8f 7d       	andi	r24, 0xDF	; 223
 864:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 868:	08 95       	ret

0000086a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 86a:	cf 93       	push	r28
 86c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	fc 01       	movw	r30, r24
 872:	e4 58       	subi	r30, 0x84	; 132
 874:	ff 4f       	sbci	r31, 0xFF	; 255
 876:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 878:	fc 01       	movw	r30, r24
 87a:	e0 57       	subi	r30, 0x70	; 112
 87c:	ff 4f       	sbci	r31, 0xFF	; 255
 87e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 880:	88 23       	and	r24, r24
 882:	61 f1       	breq	.+88     	; 0x8dc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	fc 01       	movw	r30, r24
 88c:	e2 55       	subi	r30, 0x52	; 82
 88e:	ff 4f       	sbci	r31, 0xFF	; 255
 890:	c5 91       	lpm	r28, Z+
 892:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 894:	fc 01       	movw	r30, r24
 896:	ec 55       	subi	r30, 0x5C	; 92
 898:	ff 4f       	sbci	r31, 0xFF	; 255
 89a:	a5 91       	lpm	r26, Z+
 89c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 89e:	61 11       	cpse	r22, r1
 8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 8a2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 8a4:	f8 94       	cli
		*reg &= ~bit;
 8a6:	88 81       	ld	r24, Y
 8a8:	20 95       	com	r18
 8aa:	82 23       	and	r24, r18
 8ac:	88 83       	st	Y, r24
		*out &= ~bit;
 8ae:	ec 91       	ld	r30, X
 8b0:	2e 23       	and	r18, r30
 8b2:	0b c0       	rjmp	.+22     	; 0x8ca <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 8b4:	62 30       	cpi	r22, 0x02	; 2
 8b6:	61 f4       	brne	.+24     	; 0x8d0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 8b8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 8ba:	f8 94       	cli
		*reg &= ~bit;
 8bc:	38 81       	ld	r19, Y
 8be:	82 2f       	mov	r24, r18
 8c0:	80 95       	com	r24
 8c2:	83 23       	and	r24, r19
 8c4:	88 83       	st	Y, r24
		*out |= bit;
 8c6:	ec 91       	ld	r30, X
 8c8:	2e 2b       	or	r18, r30
 8ca:	2c 93       	st	X, r18
		SREG = oldSREG;
 8cc:	9f bf       	out	0x3f, r25	; 63
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 8d0:	8f b7       	in	r24, 0x3f	; 63
                cli();
 8d2:	f8 94       	cli
		*reg |= bit;
 8d4:	e8 81       	ld	r30, Y
 8d6:	2e 2b       	or	r18, r30
 8d8:	28 83       	st	Y, r18
		SREG = oldSREG;
 8da:	8f bf       	out	0x3f, r24	; 63
	}
}
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	08 95       	ret

000008e2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 8e2:	1f 93       	push	r17
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 8e8:	28 2f       	mov	r18, r24
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	f9 01       	movw	r30, r18
 8ee:	e8 59       	subi	r30, 0x98	; 152
 8f0:	ff 4f       	sbci	r31, 0xFF	; 255
 8f2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 8f4:	f9 01       	movw	r30, r18
 8f6:	e4 58       	subi	r30, 0x84	; 132
 8f8:	ff 4f       	sbci	r31, 0xFF	; 255
 8fa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 8fc:	f9 01       	movw	r30, r18
 8fe:	e0 57       	subi	r30, 0x70	; 112
 900:	ff 4f       	sbci	r31, 0xFF	; 255
 902:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 904:	cc 23       	and	r28, r28
 906:	c9 f0       	breq	.+50     	; 0x93a <__stack+0x3b>
 908:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 90a:	81 11       	cpse	r24, r1
 90c:	0e 94 0c 04 	call	0x818	; 0x818 <turnOffPWM>

	out = portOutputRegister(port);
 910:	ec 2f       	mov	r30, r28
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	ee 0f       	add	r30, r30
 916:	ff 1f       	adc	r31, r31
 918:	ec 55       	subi	r30, 0x5C	; 92
 91a:	ff 4f       	sbci	r31, 0xFF	; 255
 91c:	a5 91       	lpm	r26, Z+
 91e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 920:	8f b7       	in	r24, 0x3f	; 63
	cli();
 922:	f8 94       	cli

	if (val == LOW) {
 924:	11 11       	cpse	r17, r1
 926:	05 c0       	rjmp	.+10     	; 0x932 <__stack+0x33>
		*out &= ~bit;
 928:	9c 91       	ld	r25, X
 92a:	ed 2f       	mov	r30, r29
 92c:	e0 95       	com	r30
 92e:	e9 23       	and	r30, r25
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0x37>
	} else {
		*out |= bit;
 932:	ec 91       	ld	r30, X
 934:	ed 2b       	or	r30, r29
 936:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 938:	8f bf       	out	0x3f, r24	; 63
}
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	1f 91       	pop	r17
 940:	08 95       	ret

00000942 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 942:	bf 92       	push	r11
 944:	cf 92       	push	r12
 946:	df 92       	push	r13
 948:	ef 92       	push	r14
 94a:	ff 92       	push	r15
 94c:	0f 93       	push	r16
 94e:	1f 93       	push	r17
 950:	cf 93       	push	r28
 952:	df 93       	push	r29
 954:	c8 2e       	mov	r12, r24
 956:	d6 2e       	mov	r13, r22
 958:	b4 2e       	mov	r11, r20
 95a:	c7 e0       	ldi	r28, 0x07	; 7
 95c:	d0 e0       	ldi	r29, 0x00	; 0
 95e:	02 2f       	mov	r16, r18
 960:	10 e0       	ldi	r17, 0x00	; 0
 962:	87 e0       	ldi	r24, 0x07	; 7
 964:	e8 2e       	mov	r14, r24
 966:	f1 2c       	mov	r15, r1
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
 968:	b1 10       	cpse	r11, r1
 96a:	05 c0       	rjmp	.+10     	; 0x976 <shiftOut+0x34>
 96c:	c7 01       	movw	r24, r14
 96e:	8c 1b       	sub	r24, r28
 970:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
 972:	98 01       	movw	r18, r16
 974:	02 c0       	rjmp	.+4      	; 0x97a <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 976:	98 01       	movw	r18, r16
 978:	8c 2f       	mov	r24, r28
 97a:	02 c0       	rjmp	.+4      	; 0x980 <shiftOut+0x3e>
 97c:	35 95       	asr	r19
 97e:	27 95       	ror	r18
 980:	8a 95       	dec	r24
 982:	e2 f7       	brpl	.-8      	; 0x97c <shiftOut+0x3a>
 984:	b9 01       	movw	r22, r18
 986:	61 70       	andi	r22, 0x01	; 1
 988:	77 27       	eor	r23, r23
 98a:	8c 2d       	mov	r24, r12
 98c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
 990:	61 e0       	ldi	r22, 0x01	; 1
 992:	8d 2d       	mov	r24, r13
 994:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>
		delayMicroseconds(1);
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 c6 03 	call	0x78c	; 0x78c <delayMicroseconds>
		digitalWrite(clockPin, LOW);
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	8d 2d       	mov	r24, r13
 9a4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>
		delayMicroseconds(1);		
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 c6 03 	call	0x78c	; 0x78c <delayMicroseconds>
 9b0:	21 97       	sbiw	r28, 0x01	; 1
 9b2:	d0 f6       	brcc	.-76     	; 0x968 <shiftOut+0x26>
	}
}
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	1f 91       	pop	r17
 9ba:	0f 91       	pop	r16
 9bc:	ff 90       	pop	r15
 9be:	ef 90       	pop	r14
 9c0:	df 90       	pop	r13
 9c2:	cf 90       	pop	r12
 9c4:	bf 90       	pop	r11
 9c6:	08 95       	ret

000009c8 <__udivmodsi4>:
 9c8:	a1 e2       	ldi	r26, 0x21	; 33
 9ca:	1a 2e       	mov	r1, r26
 9cc:	aa 1b       	sub	r26, r26
 9ce:	bb 1b       	sub	r27, r27
 9d0:	fd 01       	movw	r30, r26
 9d2:	0d c0       	rjmp	.+26     	; 0x9ee <__udivmodsi4_ep>

000009d4 <__udivmodsi4_loop>:
 9d4:	aa 1f       	adc	r26, r26
 9d6:	bb 1f       	adc	r27, r27
 9d8:	ee 1f       	adc	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	a2 17       	cp	r26, r18
 9de:	b3 07       	cpc	r27, r19
 9e0:	e4 07       	cpc	r30, r20
 9e2:	f5 07       	cpc	r31, r21
 9e4:	20 f0       	brcs	.+8      	; 0x9ee <__udivmodsi4_ep>
 9e6:	a2 1b       	sub	r26, r18
 9e8:	b3 0b       	sbc	r27, r19
 9ea:	e4 0b       	sbc	r30, r20
 9ec:	f5 0b       	sbc	r31, r21

000009ee <__udivmodsi4_ep>:
 9ee:	66 1f       	adc	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	1a 94       	dec	r1
 9f8:	69 f7       	brne	.-38     	; 0x9d4 <__udivmodsi4_loop>
 9fa:	60 95       	com	r22
 9fc:	70 95       	com	r23
 9fe:	80 95       	com	r24
 a00:	90 95       	com	r25
 a02:	9b 01       	movw	r18, r22
 a04:	ac 01       	movw	r20, r24
 a06:	bd 01       	movw	r22, r26
 a08:	cf 01       	movw	r24, r30
 a0a:	08 95       	ret

00000a0c <__tablejump2__>:
 a0c:	ee 0f       	add	r30, r30
 a0e:	ff 1f       	adc	r31, r31
 a10:	05 90       	lpm	r0, Z+
 a12:	f4 91       	lpm	r31, Z
 a14:	e0 2d       	mov	r30, r0
 a16:	09 94       	ijmp

00000a18 <malloc>:
 a18:	cf 93       	push	r28
 a1a:	df 93       	push	r29
 a1c:	82 30       	cpi	r24, 0x02	; 2
 a1e:	91 05       	cpc	r25, r1
 a20:	10 f4       	brcc	.+4      	; 0xa26 <malloc+0xe>
 a22:	82 e0       	ldi	r24, 0x02	; 2
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <__flp>
 a2a:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <__flp+0x1>
 a2e:	20 e0       	ldi	r18, 0x00	; 0
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	c0 e0       	ldi	r28, 0x00	; 0
 a34:	d0 e0       	ldi	r29, 0x00	; 0
 a36:	30 97       	sbiw	r30, 0x00	; 0
 a38:	11 f1       	breq	.+68     	; 0xa7e <malloc+0x66>
 a3a:	40 81       	ld	r20, Z
 a3c:	51 81       	ldd	r21, Z+1	; 0x01
 a3e:	48 17       	cp	r20, r24
 a40:	59 07       	cpc	r21, r25
 a42:	c0 f0       	brcs	.+48     	; 0xa74 <malloc+0x5c>
 a44:	48 17       	cp	r20, r24
 a46:	59 07       	cpc	r21, r25
 a48:	61 f4       	brne	.+24     	; 0xa62 <malloc+0x4a>
 a4a:	82 81       	ldd	r24, Z+2	; 0x02
 a4c:	93 81       	ldd	r25, Z+3	; 0x03
 a4e:	20 97       	sbiw	r28, 0x00	; 0
 a50:	19 f0       	breq	.+6      	; 0xa58 <malloc+0x40>
 a52:	9b 83       	std	Y+3, r25	; 0x03
 a54:	8a 83       	std	Y+2, r24	; 0x02
 a56:	2b c0       	rjmp	.+86     	; 0xaae <malloc+0x96>
 a58:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <__flp+0x1>
 a5c:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <__flp>
 a60:	26 c0       	rjmp	.+76     	; 0xaae <malloc+0x96>
 a62:	21 15       	cp	r18, r1
 a64:	31 05       	cpc	r19, r1
 a66:	19 f0       	breq	.+6      	; 0xa6e <malloc+0x56>
 a68:	42 17       	cp	r20, r18
 a6a:	53 07       	cpc	r21, r19
 a6c:	18 f4       	brcc	.+6      	; 0xa74 <malloc+0x5c>
 a6e:	9a 01       	movw	r18, r20
 a70:	be 01       	movw	r22, r28
 a72:	df 01       	movw	r26, r30
 a74:	ef 01       	movw	r28, r30
 a76:	02 80       	ldd	r0, Z+2	; 0x02
 a78:	f3 81       	ldd	r31, Z+3	; 0x03
 a7a:	e0 2d       	mov	r30, r0
 a7c:	dc cf       	rjmp	.-72     	; 0xa36 <malloc+0x1e>
 a7e:	21 15       	cp	r18, r1
 a80:	31 05       	cpc	r19, r1
 a82:	09 f1       	breq	.+66     	; 0xac6 <malloc+0xae>
 a84:	28 1b       	sub	r18, r24
 a86:	39 0b       	sbc	r19, r25
 a88:	24 30       	cpi	r18, 0x04	; 4
 a8a:	31 05       	cpc	r19, r1
 a8c:	90 f4       	brcc	.+36     	; 0xab2 <malloc+0x9a>
 a8e:	12 96       	adiw	r26, 0x02	; 2
 a90:	8d 91       	ld	r24, X+
 a92:	9c 91       	ld	r25, X
 a94:	13 97       	sbiw	r26, 0x03	; 3
 a96:	61 15       	cp	r22, r1
 a98:	71 05       	cpc	r23, r1
 a9a:	21 f0       	breq	.+8      	; 0xaa4 <malloc+0x8c>
 a9c:	fb 01       	movw	r30, r22
 a9e:	93 83       	std	Z+3, r25	; 0x03
 aa0:	82 83       	std	Z+2, r24	; 0x02
 aa2:	04 c0       	rjmp	.+8      	; 0xaac <malloc+0x94>
 aa4:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <__flp+0x1>
 aa8:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <__flp>
 aac:	fd 01       	movw	r30, r26
 aae:	32 96       	adiw	r30, 0x02	; 2
 ab0:	44 c0       	rjmp	.+136    	; 0xb3a <malloc+0x122>
 ab2:	fd 01       	movw	r30, r26
 ab4:	e2 0f       	add	r30, r18
 ab6:	f3 1f       	adc	r31, r19
 ab8:	81 93       	st	Z+, r24
 aba:	91 93       	st	Z+, r25
 abc:	22 50       	subi	r18, 0x02	; 2
 abe:	31 09       	sbc	r19, r1
 ac0:	2d 93       	st	X+, r18
 ac2:	3c 93       	st	X, r19
 ac4:	3a c0       	rjmp	.+116    	; 0xb3a <malloc+0x122>
 ac6:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <__brkval>
 aca:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <__brkval+0x1>
 ace:	23 2b       	or	r18, r19
 ad0:	41 f4       	brne	.+16     	; 0xae2 <malloc+0xca>
 ad2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 ad6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 ada:	30 93 e9 01 	sts	0x01E9, r19	; 0x8001e9 <__brkval+0x1>
 ade:	20 93 e8 01 	sts	0x01E8, r18	; 0x8001e8 <__brkval>
 ae2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 ae6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 aea:	21 15       	cp	r18, r1
 aec:	31 05       	cpc	r19, r1
 aee:	41 f4       	brne	.+16     	; 0xb00 <malloc+0xe8>
 af0:	2d b7       	in	r18, 0x3d	; 61
 af2:	3e b7       	in	r19, 0x3e	; 62
 af4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 af8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 afc:	24 1b       	sub	r18, r20
 afe:	35 0b       	sbc	r19, r21
 b00:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <__brkval>
 b04:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <__brkval+0x1>
 b08:	e2 17       	cp	r30, r18
 b0a:	f3 07       	cpc	r31, r19
 b0c:	a0 f4       	brcc	.+40     	; 0xb36 <malloc+0x11e>
 b0e:	2e 1b       	sub	r18, r30
 b10:	3f 0b       	sbc	r19, r31
 b12:	28 17       	cp	r18, r24
 b14:	39 07       	cpc	r19, r25
 b16:	78 f0       	brcs	.+30     	; 0xb36 <malloc+0x11e>
 b18:	ac 01       	movw	r20, r24
 b1a:	4e 5f       	subi	r20, 0xFE	; 254
 b1c:	5f 4f       	sbci	r21, 0xFF	; 255
 b1e:	24 17       	cp	r18, r20
 b20:	35 07       	cpc	r19, r21
 b22:	48 f0       	brcs	.+18     	; 0xb36 <malloc+0x11e>
 b24:	4e 0f       	add	r20, r30
 b26:	5f 1f       	adc	r21, r31
 b28:	50 93 e9 01 	sts	0x01E9, r21	; 0x8001e9 <__brkval+0x1>
 b2c:	40 93 e8 01 	sts	0x01E8, r20	; 0x8001e8 <__brkval>
 b30:	81 93       	st	Z+, r24
 b32:	91 93       	st	Z+, r25
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <malloc+0x122>
 b36:	e0 e0       	ldi	r30, 0x00	; 0
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	cf 01       	movw	r24, r30
 b3c:	df 91       	pop	r29
 b3e:	cf 91       	pop	r28
 b40:	08 95       	ret

00000b42 <free>:
 b42:	0f 93       	push	r16
 b44:	1f 93       	push	r17
 b46:	cf 93       	push	r28
 b48:	df 93       	push	r29
 b4a:	00 97       	sbiw	r24, 0x00	; 0
 b4c:	09 f4       	brne	.+2      	; 0xb50 <free+0xe>
 b4e:	8c c0       	rjmp	.+280    	; 0xc68 <free+0x126>
 b50:	fc 01       	movw	r30, r24
 b52:	32 97       	sbiw	r30, 0x02	; 2
 b54:	13 82       	std	Z+3, r1	; 0x03
 b56:	12 82       	std	Z+2, r1	; 0x02
 b58:	00 91 ea 01 	lds	r16, 0x01EA	; 0x8001ea <__flp>
 b5c:	10 91 eb 01 	lds	r17, 0x01EB	; 0x8001eb <__flp+0x1>
 b60:	01 15       	cp	r16, r1
 b62:	11 05       	cpc	r17, r1
 b64:	81 f4       	brne	.+32     	; 0xb86 <free+0x44>
 b66:	20 81       	ld	r18, Z
 b68:	31 81       	ldd	r19, Z+1	; 0x01
 b6a:	82 0f       	add	r24, r18
 b6c:	93 1f       	adc	r25, r19
 b6e:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <__brkval>
 b72:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <__brkval+0x1>
 b76:	28 17       	cp	r18, r24
 b78:	39 07       	cpc	r19, r25
 b7a:	79 f5       	brne	.+94     	; 0xbda <free+0x98>
 b7c:	f0 93 e9 01 	sts	0x01E9, r31	; 0x8001e9 <__brkval+0x1>
 b80:	e0 93 e8 01 	sts	0x01E8, r30	; 0x8001e8 <__brkval>
 b84:	71 c0       	rjmp	.+226    	; 0xc68 <free+0x126>
 b86:	d8 01       	movw	r26, r16
 b88:	40 e0       	ldi	r20, 0x00	; 0
 b8a:	50 e0       	ldi	r21, 0x00	; 0
 b8c:	ae 17       	cp	r26, r30
 b8e:	bf 07       	cpc	r27, r31
 b90:	50 f4       	brcc	.+20     	; 0xba6 <free+0x64>
 b92:	12 96       	adiw	r26, 0x02	; 2
 b94:	2d 91       	ld	r18, X+
 b96:	3c 91       	ld	r19, X
 b98:	13 97       	sbiw	r26, 0x03	; 3
 b9a:	ad 01       	movw	r20, r26
 b9c:	21 15       	cp	r18, r1
 b9e:	31 05       	cpc	r19, r1
 ba0:	09 f1       	breq	.+66     	; 0xbe4 <free+0xa2>
 ba2:	d9 01       	movw	r26, r18
 ba4:	f3 cf       	rjmp	.-26     	; 0xb8c <free+0x4a>
 ba6:	9d 01       	movw	r18, r26
 ba8:	da 01       	movw	r26, r20
 baa:	33 83       	std	Z+3, r19	; 0x03
 bac:	22 83       	std	Z+2, r18	; 0x02
 bae:	60 81       	ld	r22, Z
 bb0:	71 81       	ldd	r23, Z+1	; 0x01
 bb2:	86 0f       	add	r24, r22
 bb4:	97 1f       	adc	r25, r23
 bb6:	82 17       	cp	r24, r18
 bb8:	93 07       	cpc	r25, r19
 bba:	69 f4       	brne	.+26     	; 0xbd6 <free+0x94>
 bbc:	ec 01       	movw	r28, r24
 bbe:	28 81       	ld	r18, Y
 bc0:	39 81       	ldd	r19, Y+1	; 0x01
 bc2:	26 0f       	add	r18, r22
 bc4:	37 1f       	adc	r19, r23
 bc6:	2e 5f       	subi	r18, 0xFE	; 254
 bc8:	3f 4f       	sbci	r19, 0xFF	; 255
 bca:	31 83       	std	Z+1, r19	; 0x01
 bcc:	20 83       	st	Z, r18
 bce:	8a 81       	ldd	r24, Y+2	; 0x02
 bd0:	9b 81       	ldd	r25, Y+3	; 0x03
 bd2:	93 83       	std	Z+3, r25	; 0x03
 bd4:	82 83       	std	Z+2, r24	; 0x02
 bd6:	45 2b       	or	r20, r21
 bd8:	29 f4       	brne	.+10     	; 0xbe4 <free+0xa2>
 bda:	f0 93 eb 01 	sts	0x01EB, r31	; 0x8001eb <__flp+0x1>
 bde:	e0 93 ea 01 	sts	0x01EA, r30	; 0x8001ea <__flp>
 be2:	42 c0       	rjmp	.+132    	; 0xc68 <free+0x126>
 be4:	13 96       	adiw	r26, 0x03	; 3
 be6:	fc 93       	st	X, r31
 be8:	ee 93       	st	-X, r30
 bea:	12 97       	sbiw	r26, 0x02	; 2
 bec:	ed 01       	movw	r28, r26
 bee:	49 91       	ld	r20, Y+
 bf0:	59 91       	ld	r21, Y+
 bf2:	9e 01       	movw	r18, r28
 bf4:	24 0f       	add	r18, r20
 bf6:	35 1f       	adc	r19, r21
 bf8:	e2 17       	cp	r30, r18
 bfa:	f3 07       	cpc	r31, r19
 bfc:	71 f4       	brne	.+28     	; 0xc1a <free+0xd8>
 bfe:	80 81       	ld	r24, Z
 c00:	91 81       	ldd	r25, Z+1	; 0x01
 c02:	84 0f       	add	r24, r20
 c04:	95 1f       	adc	r25, r21
 c06:	02 96       	adiw	r24, 0x02	; 2
 c08:	11 96       	adiw	r26, 0x01	; 1
 c0a:	9c 93       	st	X, r25
 c0c:	8e 93       	st	-X, r24
 c0e:	82 81       	ldd	r24, Z+2	; 0x02
 c10:	93 81       	ldd	r25, Z+3	; 0x03
 c12:	13 96       	adiw	r26, 0x03	; 3
 c14:	9c 93       	st	X, r25
 c16:	8e 93       	st	-X, r24
 c18:	12 97       	sbiw	r26, 0x02	; 2
 c1a:	e0 e0       	ldi	r30, 0x00	; 0
 c1c:	f0 e0       	ldi	r31, 0x00	; 0
 c1e:	d8 01       	movw	r26, r16
 c20:	12 96       	adiw	r26, 0x02	; 2
 c22:	8d 91       	ld	r24, X+
 c24:	9c 91       	ld	r25, X
 c26:	13 97       	sbiw	r26, 0x03	; 3
 c28:	00 97       	sbiw	r24, 0x00	; 0
 c2a:	19 f0       	breq	.+6      	; 0xc32 <free+0xf0>
 c2c:	f8 01       	movw	r30, r16
 c2e:	8c 01       	movw	r16, r24
 c30:	f6 cf       	rjmp	.-20     	; 0xc1e <free+0xdc>
 c32:	8d 91       	ld	r24, X+
 c34:	9c 91       	ld	r25, X
 c36:	98 01       	movw	r18, r16
 c38:	2e 5f       	subi	r18, 0xFE	; 254
 c3a:	3f 4f       	sbci	r19, 0xFF	; 255
 c3c:	82 0f       	add	r24, r18
 c3e:	93 1f       	adc	r25, r19
 c40:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <__brkval>
 c44:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <__brkval+0x1>
 c48:	28 17       	cp	r18, r24
 c4a:	39 07       	cpc	r19, r25
 c4c:	69 f4       	brne	.+26     	; 0xc68 <free+0x126>
 c4e:	30 97       	sbiw	r30, 0x00	; 0
 c50:	29 f4       	brne	.+10     	; 0xc5c <free+0x11a>
 c52:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <__flp+0x1>
 c56:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__flp>
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <free+0x11e>
 c5c:	13 82       	std	Z+3, r1	; 0x03
 c5e:	12 82       	std	Z+2, r1	; 0x02
 c60:	10 93 e9 01 	sts	0x01E9, r17	; 0x8001e9 <__brkval+0x1>
 c64:	00 93 e8 01 	sts	0x01E8, r16	; 0x8001e8 <__brkval>
 c68:	df 91       	pop	r29
 c6a:	cf 91       	pop	r28
 c6c:	1f 91       	pop	r17
 c6e:	0f 91       	pop	r16
 c70:	08 95       	ret

00000c72 <memcpy>:
 c72:	fb 01       	movw	r30, r22
 c74:	dc 01       	movw	r26, r24
 c76:	02 c0       	rjmp	.+4      	; 0xc7c <memcpy+0xa>
 c78:	01 90       	ld	r0, Z+
 c7a:	0d 92       	st	X+, r0
 c7c:	41 50       	subi	r20, 0x01	; 1
 c7e:	50 40       	sbci	r21, 0x00	; 0
 c80:	d8 f7       	brcc	.-10     	; 0xc78 <memcpy+0x6>
 c82:	08 95       	ret

00000c84 <memset>:
 c84:	dc 01       	movw	r26, r24
 c86:	01 c0       	rjmp	.+2      	; 0xc8a <memset+0x6>
 c88:	6d 93       	st	X+, r22
 c8a:	41 50       	subi	r20, 0x01	; 1
 c8c:	50 40       	sbci	r21, 0x00	; 0
 c8e:	e0 f7       	brcc	.-8      	; 0xc88 <memset+0x4>
 c90:	08 95       	ret

00000c92 <__do_global_dtors>:
 c92:	10 e0       	ldi	r17, 0x00	; 0
 c94:	ce e5       	ldi	r28, 0x5E	; 94
 c96:	d0 e0       	ldi	r29, 0x00	; 0
 c98:	04 c0       	rjmp	.+8      	; 0xca2 <__do_global_dtors+0x10>
 c9a:	fe 01       	movw	r30, r28
 c9c:	0e 94 06 05 	call	0xa0c	; 0xa0c <__tablejump2__>
 ca0:	21 96       	adiw	r28, 0x01	; 1
 ca2:	cf 35       	cpi	r28, 0x5F	; 95
 ca4:	d1 07       	cpc	r29, r17
 ca6:	c9 f7       	brne	.-14     	; 0xc9a <__do_global_dtors+0x8>
 ca8:	f8 94       	cli

00000caa <__stop_program>:
 caa:	ff cf       	rjmp	.-2      	; 0xcaa <__stop_program>
