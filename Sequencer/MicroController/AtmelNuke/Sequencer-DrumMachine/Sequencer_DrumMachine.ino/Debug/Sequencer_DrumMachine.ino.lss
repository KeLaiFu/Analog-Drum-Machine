
Sequencer_DrumMachine.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000920  000009b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000920  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800106  00800106  000009ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026d3  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001007  00000000  00000000  000032a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5f  00000000  00000000  000042ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00005210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e3c  00000000  00000000  000055f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012cc  00000000  00000000  0000642c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000076f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_16>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	b1 00       	.word	0x00b1	; ????

000000ba <__ctors_end>:
  ba:	de 00       	.word	0x00de	; ????

000000bc <__dtors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a6 e0       	ldi	r26, 0x06	; 6
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a5 33       	cpi	r26, 0x35	; 53
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e0 e2       	ldi	r30, 0x20	; 32
  e0:	f9 e0       	ldi	r31, 0x09	; 9
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 30       	cpi	r26, 0x06	; 6
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_global_ctors>:
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	cd e5       	ldi	r28, 0x5D	; 93
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
  f6:	21 97       	sbiw	r28, 0x01	; 1
  f8:	fe 01       	movw	r30, r28
  fa:	0e 94 49 03 	call	0x692	; 0x692 <__tablejump2__>
  fe:	cc 35       	cpi	r28, 0x5C	; 92
 100:	d1 07       	cpc	r29, r17
 102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
 104:	0e 94 83 01 	call	0x306	; 0x306 <main>
 108:	0c 94 83 04 	jmp	0x906	; 0x906 <__do_global_dtors>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <setup>:
#define INPUT_SR_LATCH_PIN 6
#define INPUT_SR_CLOCK_PIN 7

ShiftIn<NUM_SHIFT_REGISTERS_INPUT> InputSR; //Well be intialized in constructor

void setup() {
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
public:
	_ShiftIn() : dataWidth(chipCount * 8), pulseWidth(5), lastState(0), currentState(0) {}
	
	// setup all pins
	void begin(int pload, int data, int clock) {
		pinMode(ploadPin = pload, OUTPUT);
 114:	c6 e0       	ldi	r28, 0x06	; 6
 116:	d1 e0       	ldi	r29, 0x01	; 1
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	88 83       	st	Y, r24
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	0e 94 a1 02 	call	0x542	; 0x542 <pinMode>
		//pinMode(clockEnablePin = clockEN, OUTPUT);
		pinMode(dataPin = data, INPUT);
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	0e 94 a1 02 	call	0x542	; 0x542 <pinMode>
		pinMode(clockPin = clock, OUTPUT);
 12c:	87 e0       	ldi	r24, 0x07	; 7
 12e:	8a 83       	std	Y+2, r24	; 0x02
 130:	61 e0       	ldi	r22, 0x01	; 1

    //Initialize input shift register
	InputSR.begin(INPUT_SR_LATCH_PIN, INPUT_SR_SERIAL_PIN, INPUT_SR_CLOCK_PIN);

}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	0c 94 a1 02 	jmp	0x542	; 0x542 <pinMode>

0000013a <loop>:

void loop() {

	InstrumentTrigger.setAllHigh();
 13a:	84 e1       	ldi	r24, 0x14	; 20
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN20ShiftRegister74HC59510setAllHighEv>
    delay(1);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 01 02 	call	0x402	; 0x402 <delay>
	InstrumentTrigger.setAllLow();
 14e:	84 e1       	ldi	r24, 0x14	; 20
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN20ShiftRegister74HC5959setAllLowEv>
	delay(999);
 156:	67 ee       	ldi	r22, 0xE7	; 231
 158:	73 e0       	ldi	r23, 0x03	; 3
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0c 94 01 02 	jmp	0x402	; 0x402 <delay>

00000162 <_GLOBAL__sub_I_OutputSR>:
	
}
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17

#define TRIGGER_SR_SERIAL_PIN 2
#define TRIGGER_SR_LATCH_PIN 3
#define TRIGGER_SR_CLOCK_PIN 4

ShiftRegister74HC595 OutputSR(NUM_SHIFT_REGISTERS_OUTPUT, OUTPUT_SR_SERIAL_PIN, 
 166:	09 e0       	ldi	r16, 0x09	; 9
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	2a e0       	ldi	r18, 0x0A	; 10
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	48 e0       	ldi	r20, 0x08	; 8
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	68 e0       	ldi	r22, 0x08	; 8
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	8e e1       	ldi	r24, 0x1E	; 30
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN20ShiftRegister74HC595C1Eiiii>
					OUTPUT_SR_CLOCK_PIN, OUTPUT_SR_LATCH_PIN);
ShiftRegister74HC595 InstrumentTrigger(NUM_SHIFT_REGISTERS_TRIGGER, 
 17e:	03 e0       	ldi	r16, 0x03	; 3
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	24 e0       	ldi	r18, 0x04	; 4
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	42 e0       	ldi	r20, 0x02	; 2
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	84 e1       	ldi	r24, 0x14	; 20
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN20ShiftRegister74HC595C1Eiiii>
	uint8_t pulseWidth;

	ShiftType lastState;
	ShiftType currentState;
public:
	_ShiftIn() : dataWidth(chipCount * 8), pulseWidth(5), lastState(0), currentState(0) {}
 196:	e6 e0       	ldi	r30, 0x06	; 6
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	88 e2       	ldi	r24, 0x28	; 40
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	94 83       	std	Z+4, r25	; 0x04
 1a0:	83 83       	std	Z+3, r24	; 0x03
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	85 83       	std	Z+5, r24	; 0x05
 1a6:	16 82       	std	Z+6, r1	; 0x06
 1a8:	17 82       	std	Z+7, r1	; 0x07
 1aa:	10 86       	std	Z+8, r1	; 0x08
 1ac:	11 86       	std	Z+9, r1	; 0x09
 1ae:	12 86       	std	Z+10, r1	; 0x0a
 1b0:	13 86       	std	Z+11, r1	; 0x0b
 1b2:	14 86       	std	Z+12, r1	; 0x0c
 1b4:	15 86       	std	Z+13, r1	; 0x0d
	InstrumentTrigger.setAllHigh();
    delay(1);
	InstrumentTrigger.setAllLow();
	delay(999);
	
}
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <_GLOBAL__sub_D_OutputSR>:
#define TRIGGER_SR_LATCH_PIN 3
#define TRIGGER_SR_CLOCK_PIN 4

ShiftRegister74HC595 OutputSR(NUM_SHIFT_REGISTERS_OUTPUT, OUTPUT_SR_SERIAL_PIN, 
					OUTPUT_SR_CLOCK_PIN, OUTPUT_SR_LATCH_PIN);
ShiftRegister74HC595 InstrumentTrigger(NUM_SHIFT_REGISTERS_TRIGGER, 
 1bc:	84 e1       	ldi	r24, 0x14	; 20
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZN20ShiftRegister74HC595D1Ev>

#define TRIGGER_SR_SERIAL_PIN 2
#define TRIGGER_SR_LATCH_PIN 3
#define TRIGGER_SR_CLOCK_PIN 4

ShiftRegister74HC595 OutputSR(NUM_SHIFT_REGISTERS_OUTPUT, OUTPUT_SR_SERIAL_PIN, 
 1c4:	8e e1       	ldi	r24, 0x1E	; 30
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_ZN20ShiftRegister74HC595D1Ev>

000001cc <_ZN20ShiftRegister74HC595D1Ev>:
// Returns the state of the given pin.
// Either HIGH (1) or LOW (0)
uint8_t ShiftRegister74HC595::get(int pin)
{
    return (_digitalValues[pin / 8] >> (pin % 8)) & 1;
}
 1cc:	fc 01       	movw	r30, r24
 1ce:	80 85       	ldd	r24, Z+8	; 0x08
 1d0:	91 85       	ldd	r25, Z+9	; 0x09
 1d2:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <free>

000001d6 <_ZN20ShiftRegister74HC59515updateRegistersEv>:
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ec 01       	movw	r28, r24
 1e0:	08 81       	ld	r16, Y
 1e2:	19 81       	ldd	r17, Y+1	; 0x01
 1e4:	01 50       	subi	r16, 0x01	; 1
 1e6:	11 09       	sbc	r17, r1
 1e8:	17 fd       	sbrc	r17, 7
 1ea:	0b c0       	rjmp	.+22     	; 0x202 <_ZN20ShiftRegister74HC59515updateRegistersEv+0x2c>
 1ec:	e8 85       	ldd	r30, Y+8	; 0x08
 1ee:	f9 85       	ldd	r31, Y+9	; 0x09
 1f0:	e0 0f       	add	r30, r16
 1f2:	f1 1f       	adc	r31, r17
 1f4:	20 81       	ld	r18, Z
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	6a 81       	ldd	r22, Y+2	; 0x02
 1fa:	8c 81       	ldd	r24, Y+4	; 0x04
 1fc:	0e 94 0d 03 	call	0x61a	; 0x61a <shiftOut>
 200:	f1 cf       	rjmp	.-30     	; 0x1e4 <_ZN20ShiftRegister74HC59515updateRegistersEv+0xe>
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	8e 81       	ldd	r24, Y+6	; 0x06
 206:	0e 94 dd 02 	call	0x5ba	; 0x5ba <digitalWrite>
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	8e 81       	ldd	r24, Y+6	; 0x06
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <digitalWrite>

0000021a <_ZN20ShiftRegister74HC595C1Eiiii>:
 21a:	af 92       	push	r10
 21c:	bf 92       	push	r11
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	1f 92       	push	r1
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	5c 01       	movw	r10, r24
 234:	7b 01       	movw	r14, r22
 236:	d4 2e       	mov	r13, r20
 238:	fc 01       	movw	r30, r24
 23a:	71 83       	std	Z+1, r23	; 0x01
 23c:	60 83       	st	Z, r22
 23e:	22 83       	std	Z+2, r18	; 0x02
 240:	33 83       	std	Z+3, r19	; 0x03
 242:	44 83       	std	Z+4, r20	; 0x04
 244:	55 83       	std	Z+5, r21	; 0x05
 246:	06 83       	std	Z+6, r16	; 0x06
 248:	17 83       	std	Z+7, r17	; 0x07
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	82 2f       	mov	r24, r18
 24e:	29 83       	std	Y+1, r18	; 0x01
 250:	0e 94 a1 02 	call	0x542	; 0x542 <pinMode>
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	8d 2d       	mov	r24, r13
 258:	0e 94 a1 02 	call	0x542	; 0x542 <pinMode>
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	80 2f       	mov	r24, r16
 260:	0e 94 a1 02 	call	0x542	; 0x542 <pinMode>
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	29 81       	ldd	r18, Y+1	; 0x01
 268:	82 2f       	mov	r24, r18
 26a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <digitalWrite>
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	8d 2d       	mov	r24, r13
 272:	0e 94 dd 02 	call	0x5ba	; 0x5ba <digitalWrite>
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	80 2f       	mov	r24, r16
 27a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <digitalWrite>
 27e:	c7 01       	movw	r24, r14
 280:	0e 94 4f 03 	call	0x69e	; 0x69e <malloc>
 284:	f5 01       	movw	r30, r10
 286:	91 87       	std	Z+9, r25	; 0x09
 288:	80 87       	std	Z+8, r24	; 0x08
 28a:	a7 01       	movw	r20, r14
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <memset>
 294:	c5 01       	movw	r24, r10
 296:	0f 90       	pop	r0
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	bf 90       	pop	r11
 2a8:	af 90       	pop	r10
 2aa:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_ZN20ShiftRegister74HC59515updateRegistersEv>

000002ae <_ZN20ShiftRegister74HC59510setAllHighEv>:


// Sets all pins of all shift registers to HIGH (1).
void ShiftRegister74HC595::setAllHigh()
{
    for (int i = 0; i < _numberOfShiftRegisters; i++) {
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
        _digitalValues[i] = 255;
 2b2:	6f ef       	ldi	r22, 0xFF	; 255


// Sets all pins of all shift registers to HIGH (1).
void ShiftRegister74HC595::setAllHigh()
{
    for (int i = 0; i < _numberOfShiftRegisters; i++) {
 2b4:	fc 01       	movw	r30, r24
 2b6:	40 81       	ld	r20, Z
 2b8:	51 81       	ldd	r21, Z+1	; 0x01
 2ba:	24 17       	cp	r18, r20
 2bc:	35 07       	cpc	r19, r21
 2be:	5c f4       	brge	.+22     	; 0x2d6 <_ZN20ShiftRegister74HC59510setAllHighEv+0x28>
        _digitalValues[i] = 255;
 2c0:	dc 01       	movw	r26, r24
 2c2:	18 96       	adiw	r26, 0x08	; 8
 2c4:	ed 91       	ld	r30, X+
 2c6:	fc 91       	ld	r31, X
 2c8:	19 97       	sbiw	r26, 0x09	; 9
 2ca:	e2 0f       	add	r30, r18
 2cc:	f3 1f       	adc	r31, r19
 2ce:	60 83       	st	Z, r22


// Sets all pins of all shift registers to HIGH (1).
void ShiftRegister74HC595::setAllHigh()
{
    for (int i = 0; i < _numberOfShiftRegisters; i++) {
 2d0:	2f 5f       	subi	r18, 0xFF	; 255
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	ef cf       	rjmp	.-34     	; 0x2b4 <_ZN20ShiftRegister74HC59510setAllHighEv+0x6>
        _digitalValues[i] = 255;
    }
    updateRegisters();
 2d6:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_ZN20ShiftRegister74HC59515updateRegistersEv>

000002da <_ZN20ShiftRegister74HC5959setAllLowEv>:


// Sets all pins of all shift registers to LOW (0).
void ShiftRegister74HC595::setAllLow()
{
    for (int i = 0; i < _numberOfShiftRegisters; i++) {
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	40 81       	ld	r20, Z
 2e2:	51 81       	ldd	r21, Z+1	; 0x01
 2e4:	24 17       	cp	r18, r20
 2e6:	35 07       	cpc	r19, r21
 2e8:	5c f4       	brge	.+22     	; 0x300 <_ZN20ShiftRegister74HC5959setAllLowEv+0x26>
        _digitalValues[i] = 0;
 2ea:	dc 01       	movw	r26, r24
 2ec:	18 96       	adiw	r26, 0x08	; 8
 2ee:	ed 91       	ld	r30, X+
 2f0:	fc 91       	ld	r31, X
 2f2:	19 97       	sbiw	r26, 0x09	; 9
 2f4:	e2 0f       	add	r30, r18
 2f6:	f3 1f       	adc	r31, r19
 2f8:	10 82       	st	Z, r1


// Sets all pins of all shift registers to LOW (0).
void ShiftRegister74HC595::setAllLow()
{
    for (int i = 0; i < _numberOfShiftRegisters; i++) {
 2fa:	2f 5f       	subi	r18, 0xFF	; 255
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255
 2fe:	ef cf       	rjmp	.-34     	; 0x2de <_ZN20ShiftRegister74HC5959setAllLowEv+0x4>
        _digitalValues[i] = 0;
    }
    updateRegisters();
 300:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_ZN20ShiftRegister74HC59515updateRegistersEv>

00000304 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 304:	08 95       	ret

00000306 <main>:

int main(void)
{
	init();
 306:	0e 94 3d 02 	call	0x47a	; 0x47a <init>

	initVariant();
 30a:	0e 94 82 01 	call	0x304	; 0x304 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 30e:	0e 94 88 00 	call	0x110	; 0x110 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 312:	c0 e0       	ldi	r28, 0x00	; 0
 314:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 316:	0e 94 9d 00 	call	0x13a	; 0x13a <loop>
		if (serialEventRun) serialEventRun();
 31a:	20 97       	sbiw	r28, 0x00	; 0
 31c:	e1 f3       	breq	.-8      	; 0x316 <main+0x10>
 31e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 322:	f9 cf       	rjmp	.-14     	; 0x316 <main+0x10>

00000324 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	2f 93       	push	r18
 330:	3f 93       	push	r19
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <timer0_millis>
 33e:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <timer0_millis+0x1>
 342:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <timer0_millis+0x2>
 346:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <timer0_millis+0x3>
 34a:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <timer0_fract>
 34e:	23 e0       	ldi	r18, 0x03	; 3
 350:	23 0f       	add	r18, r19
 352:	2d 37       	cpi	r18, 0x7D	; 125
 354:	20 f4       	brcc	.+8      	; 0x35e <__vector_16+0x3a>
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	a1 1d       	adc	r26, r1
 35a:	b1 1d       	adc	r27, r1
 35c:	05 c0       	rjmp	.+10     	; 0x368 <__vector_16+0x44>
 35e:	26 e8       	ldi	r18, 0x86	; 134
 360:	23 0f       	add	r18, r19
 362:	02 96       	adiw	r24, 0x02	; 2
 364:	a1 1d       	adc	r26, r1
 366:	b1 1d       	adc	r27, r1
 368:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <timer0_fract>
 36c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <timer0_millis>
 370:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <timer0_millis+0x1>
 374:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <timer0_millis+0x2>
 378:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <timer0_millis+0x3>
 37c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <timer0_overflow_count>
 380:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <timer0_overflow_count+0x1>
 384:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <timer0_overflow_count+0x2>
 388:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <timer0_overflow_count+0x3>
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	a1 1d       	adc	r26, r1
 390:	b1 1d       	adc	r27, r1
 392:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <timer0_overflow_count>
 396:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <timer0_overflow_count+0x1>
 39a:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <timer0_overflow_count+0x2>
 39e:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <timer0_overflow_count+0x3>
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <micros>:
 3b8:	3f b7       	in	r19, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <timer0_overflow_count>
 3c0:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <timer0_overflow_count+0x1>
 3c4:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <timer0_overflow_count+0x2>
 3c8:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <timer0_overflow_count+0x3>
 3cc:	26 b5       	in	r18, 0x26	; 38
 3ce:	a8 9b       	sbis	0x15, 0	; 21
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <micros+0x24>
 3d2:	2f 3f       	cpi	r18, 0xFF	; 255
 3d4:	19 f0       	breq	.+6      	; 0x3dc <micros+0x24>
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	a1 1d       	adc	r26, r1
 3da:	b1 1d       	adc	r27, r1
 3dc:	3f bf       	out	0x3f, r19	; 63
 3de:	ba 2f       	mov	r27, r26
 3e0:	a9 2f       	mov	r26, r25
 3e2:	98 2f       	mov	r25, r24
 3e4:	88 27       	eor	r24, r24
 3e6:	82 0f       	add	r24, r18
 3e8:	91 1d       	adc	r25, r1
 3ea:	a1 1d       	adc	r26, r1
 3ec:	b1 1d       	adc	r27, r1
 3ee:	bc 01       	movw	r22, r24
 3f0:	cd 01       	movw	r24, r26
 3f2:	42 e0       	ldi	r20, 0x02	; 2
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	4a 95       	dec	r20
 3fe:	d1 f7       	brne	.-12     	; 0x3f4 <micros+0x3c>
 400:	08 95       	ret

00000402 <delay>:
 402:	8f 92       	push	r8
 404:	9f 92       	push	r9
 406:	af 92       	push	r10
 408:	bf 92       	push	r11
 40a:	cf 92       	push	r12
 40c:	df 92       	push	r13
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	6b 01       	movw	r12, r22
 414:	7c 01       	movw	r14, r24
 416:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <micros>
 41a:	4b 01       	movw	r8, r22
 41c:	5c 01       	movw	r10, r24
 41e:	c1 14       	cp	r12, r1
 420:	d1 04       	cpc	r13, r1
 422:	e1 04       	cpc	r14, r1
 424:	f1 04       	cpc	r15, r1
 426:	01 f1       	breq	.+64     	; 0x468 <delay+0x66>
 428:	0e 94 48 03 	call	0x690	; 0x690 <yield>
 42c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <micros>
 430:	dc 01       	movw	r26, r24
 432:	cb 01       	movw	r24, r22
 434:	88 19       	sub	r24, r8
 436:	99 09       	sbc	r25, r9
 438:	aa 09       	sbc	r26, r10
 43a:	bb 09       	sbc	r27, r11
 43c:	88 3e       	cpi	r24, 0xE8	; 232
 43e:	93 40       	sbci	r25, 0x03	; 3
 440:	a1 05       	cpc	r26, r1
 442:	b1 05       	cpc	r27, r1
 444:	60 f3       	brcs	.-40     	; 0x41e <delay+0x1c>
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	c2 1a       	sub	r12, r18
 44a:	d1 08       	sbc	r13, r1
 44c:	e1 08       	sbc	r14, r1
 44e:	f1 08       	sbc	r15, r1
 450:	88 ee       	ldi	r24, 0xE8	; 232
 452:	88 0e       	add	r8, r24
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	98 1e       	adc	r9, r24
 458:	a1 1c       	adc	r10, r1
 45a:	b1 1c       	adc	r11, r1
 45c:	c1 14       	cp	r12, r1
 45e:	d1 04       	cpc	r13, r1
 460:	e1 04       	cpc	r14, r1
 462:	f1 04       	cpc	r15, r1
 464:	19 f7       	brne	.-58     	; 0x42c <delay+0x2a>
 466:	db cf       	rjmp	.-74     	; 0x41e <delay+0x1c>
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	df 90       	pop	r13
 46e:	cf 90       	pop	r12
 470:	bf 90       	pop	r11
 472:	af 90       	pop	r10
 474:	9f 90       	pop	r9
 476:	8f 90       	pop	r8
 478:	08 95       	ret

0000047a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 47a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 47c:	84 b5       	in	r24, 0x24	; 36
 47e:	82 60       	ori	r24, 0x02	; 2
 480:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 482:	84 b5       	in	r24, 0x24	; 36
 484:	81 60       	ori	r24, 0x01	; 1
 486:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 488:	85 b5       	in	r24, 0x25	; 37
 48a:	82 60       	ori	r24, 0x02	; 2
 48c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 48e:	85 b5       	in	r24, 0x25	; 37
 490:	81 60       	ori	r24, 0x01	; 1
 492:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 494:	ee e6       	ldi	r30, 0x6E	; 110
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	81 60       	ori	r24, 0x01	; 1
 49c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 49e:	e1 e8       	ldi	r30, 0x81	; 129
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 4a4:	80 81       	ld	r24, Z
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 4aa:	80 81       	ld	r24, Z
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 4b0:	e0 e8       	ldi	r30, 0x80	; 128
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	81 60       	ori	r24, 0x01	; 1
 4b8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 4ba:	e1 eb       	ldi	r30, 0xB1	; 177
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	84 60       	ori	r24, 0x04	; 4
 4c2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 4c4:	e0 eb       	ldi	r30, 0xB0	; 176
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	81 60       	ori	r24, 0x01	; 1
 4cc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 4ce:	ea e7       	ldi	r30, 0x7A	; 122
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	84 60       	ori	r24, 0x04	; 4
 4d6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 4d8:	80 81       	ld	r24, Z
 4da:	82 60       	ori	r24, 0x02	; 2
 4dc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 4de:	80 81       	ld	r24, Z
 4e0:	81 60       	ori	r24, 0x01	; 1
 4e2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 4e4:	80 81       	ld	r24, Z
 4e6:	80 68       	ori	r24, 0x80	; 128
 4e8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4ee:	08 95       	ret

000004f0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 4f0:	83 30       	cpi	r24, 0x03	; 3
 4f2:	81 f0       	breq	.+32     	; 0x514 <turnOffPWM+0x24>
 4f4:	28 f4       	brcc	.+10     	; 0x500 <turnOffPWM+0x10>
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	99 f0       	breq	.+38     	; 0x520 <turnOffPWM+0x30>
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	a1 f0       	breq	.+40     	; 0x526 <turnOffPWM+0x36>
 4fe:	08 95       	ret
 500:	87 30       	cpi	r24, 0x07	; 7
 502:	a9 f0       	breq	.+42     	; 0x52e <turnOffPWM+0x3e>
 504:	88 30       	cpi	r24, 0x08	; 8
 506:	b9 f0       	breq	.+46     	; 0x536 <turnOffPWM+0x46>
 508:	84 30       	cpi	r24, 0x04	; 4
 50a:	d1 f4       	brne	.+52     	; 0x540 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 50c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 510:	8f 7d       	andi	r24, 0xDF	; 223
 512:	03 c0       	rjmp	.+6      	; 0x51a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 514:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 518:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 51a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 51e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 520:	84 b5       	in	r24, 0x24	; 36
 522:	8f 77       	andi	r24, 0x7F	; 127
 524:	02 c0       	rjmp	.+4      	; 0x52a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 526:	84 b5       	in	r24, 0x24	; 36
 528:	8f 7d       	andi	r24, 0xDF	; 223
 52a:	84 bd       	out	0x24, r24	; 36
 52c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 52e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 532:	8f 77       	andi	r24, 0x7F	; 127
 534:	03 c0       	rjmp	.+6      	; 0x53c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 536:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 53a:	8f 7d       	andi	r24, 0xDF	; 223
 53c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 540:	08 95       	ret

00000542 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	fc 01       	movw	r30, r24
 54a:	e4 58       	subi	r30, 0x84	; 132
 54c:	ff 4f       	sbci	r31, 0xFF	; 255
 54e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 550:	fc 01       	movw	r30, r24
 552:	e0 57       	subi	r30, 0x70	; 112
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 558:	88 23       	and	r24, r24
 55a:	61 f1       	breq	.+88     	; 0x5b4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	fc 01       	movw	r30, r24
 564:	e2 55       	subi	r30, 0x52	; 82
 566:	ff 4f       	sbci	r31, 0xFF	; 255
 568:	c5 91       	lpm	r28, Z+
 56a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 56c:	fc 01       	movw	r30, r24
 56e:	ec 55       	subi	r30, 0x5C	; 92
 570:	ff 4f       	sbci	r31, 0xFF	; 255
 572:	a5 91       	lpm	r26, Z+
 574:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 576:	61 11       	cpse	r22, r1
 578:	09 c0       	rjmp	.+18     	; 0x58c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 57a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 57c:	f8 94       	cli
		*reg &= ~bit;
 57e:	88 81       	ld	r24, Y
 580:	20 95       	com	r18
 582:	82 23       	and	r24, r18
 584:	88 83       	st	Y, r24
		*out &= ~bit;
 586:	ec 91       	ld	r30, X
 588:	2e 23       	and	r18, r30
 58a:	0b c0       	rjmp	.+22     	; 0x5a2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 58c:	62 30       	cpi	r22, 0x02	; 2
 58e:	61 f4       	brne	.+24     	; 0x5a8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 590:	9f b7       	in	r25, 0x3f	; 63
                cli();
 592:	f8 94       	cli
		*reg &= ~bit;
 594:	38 81       	ld	r19, Y
 596:	82 2f       	mov	r24, r18
 598:	80 95       	com	r24
 59a:	83 23       	and	r24, r19
 59c:	88 83       	st	Y, r24
		*out |= bit;
 59e:	ec 91       	ld	r30, X
 5a0:	2e 2b       	or	r18, r30
 5a2:	2c 93       	st	X, r18
		SREG = oldSREG;
 5a4:	9f bf       	out	0x3f, r25	; 63
 5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 5a8:	8f b7       	in	r24, 0x3f	; 63
                cli();
 5aa:	f8 94       	cli
		*reg |= bit;
 5ac:	e8 81       	ld	r30, Y
 5ae:	2e 2b       	or	r18, r30
 5b0:	28 83       	st	Y, r18
		SREG = oldSREG;
 5b2:	8f bf       	out	0x3f, r24	; 63
	}
}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 5c0:	28 2f       	mov	r18, r24
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	f9 01       	movw	r30, r18
 5c6:	e8 59       	subi	r30, 0x98	; 152
 5c8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ca:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 5cc:	f9 01       	movw	r30, r18
 5ce:	e4 58       	subi	r30, 0x84	; 132
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 5d4:	f9 01       	movw	r30, r18
 5d6:	e0 57       	subi	r30, 0x70	; 112
 5d8:	ff 4f       	sbci	r31, 0xFF	; 255
 5da:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 5dc:	cc 23       	and	r28, r28
 5de:	c9 f0       	breq	.+50     	; 0x612 <digitalWrite+0x58>
 5e0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5e2:	81 11       	cpse	r24, r1
 5e4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <turnOffPWM>

	out = portOutputRegister(port);
 5e8:	ec 2f       	mov	r30, r28
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	ee 0f       	add	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	ec 55       	subi	r30, 0x5C	; 92
 5f2:	ff 4f       	sbci	r31, 0xFF	; 255
 5f4:	a5 91       	lpm	r26, Z+
 5f6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 5f8:	8f b7       	in	r24, 0x3f	; 63
	cli();
 5fa:	f8 94       	cli

	if (val == LOW) {
 5fc:	11 11       	cpse	r17, r1
 5fe:	05 c0       	rjmp	.+10     	; 0x60a <digitalWrite+0x50>
		*out &= ~bit;
 600:	9c 91       	ld	r25, X
 602:	ed 2f       	mov	r30, r29
 604:	e0 95       	com	r30
 606:	e9 23       	and	r30, r25
 608:	02 c0       	rjmp	.+4      	; 0x60e <digitalWrite+0x54>
	} else {
		*out |= bit;
 60a:	ec 91       	ld	r30, X
 60c:	ed 2b       	or	r30, r29
 60e:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 610:	8f bf       	out	0x3f, r24	; 63
}
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	1f 91       	pop	r17
 618:	08 95       	ret

0000061a <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 61a:	bf 92       	push	r11
 61c:	cf 92       	push	r12
 61e:	df 92       	push	r13
 620:	ef 92       	push	r14
 622:	ff 92       	push	r15
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	c8 2e       	mov	r12, r24
 62e:	d6 2e       	mov	r13, r22
 630:	b4 2e       	mov	r11, r20
 632:	c7 e0       	ldi	r28, 0x07	; 7
 634:	d0 e0       	ldi	r29, 0x00	; 0
 636:	02 2f       	mov	r16, r18
 638:	10 e0       	ldi	r17, 0x00	; 0
 63a:	87 e0       	ldi	r24, 0x07	; 7
 63c:	e8 2e       	mov	r14, r24
 63e:	f1 2c       	mov	r15, r1
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
 640:	b1 10       	cpse	r11, r1
 642:	05 c0       	rjmp	.+10     	; 0x64e <shiftOut+0x34>
 644:	c7 01       	movw	r24, r14
 646:	8c 1b       	sub	r24, r28
 648:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
 64a:	98 01       	movw	r18, r16
 64c:	02 c0       	rjmp	.+4      	; 0x652 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 64e:	98 01       	movw	r18, r16
 650:	8c 2f       	mov	r24, r28
 652:	02 c0       	rjmp	.+4      	; 0x658 <shiftOut+0x3e>
 654:	35 95       	asr	r19
 656:	27 95       	ror	r18
 658:	8a 95       	dec	r24
 65a:	e2 f7       	brpl	.-8      	; 0x654 <shiftOut+0x3a>
 65c:	b9 01       	movw	r22, r18
 65e:	61 70       	andi	r22, 0x01	; 1
 660:	77 27       	eor	r23, r23
 662:	8c 2d       	mov	r24, r12
 664:	0e 94 dd 02 	call	0x5ba	; 0x5ba <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	8d 2d       	mov	r24, r13
 66c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <digitalWrite>
		digitalWrite(clockPin, LOW);		
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	8d 2d       	mov	r24, r13
 674:	0e 94 dd 02 	call	0x5ba	; 0x5ba <digitalWrite>
 678:	21 97       	sbiw	r28, 0x01	; 1
 67a:	10 f7       	brcc	.-60     	; 0x640 <shiftOut+0x26>
	}
}
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	1f 91       	pop	r17
 682:	0f 91       	pop	r16
 684:	ff 90       	pop	r15
 686:	ef 90       	pop	r14
 688:	df 90       	pop	r13
 68a:	cf 90       	pop	r12
 68c:	bf 90       	pop	r11
 68e:	08 95       	ret

00000690 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 690:	08 95       	ret

00000692 <__tablejump2__>:
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	05 90       	lpm	r0, Z+
 698:	f4 91       	lpm	r31, Z
 69a:	e0 2d       	mov	r30, r0
 69c:	09 94       	ijmp

0000069e <malloc>:
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	82 30       	cpi	r24, 0x02	; 2
 6a4:	91 05       	cpc	r25, r1
 6a6:	10 f4       	brcc	.+4      	; 0x6ac <malloc+0xe>
 6a8:	82 e0       	ldi	r24, 0x02	; 2
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <__flp>
 6b0:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <__flp+0x1>
 6b4:	20 e0       	ldi	r18, 0x00	; 0
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	c0 e0       	ldi	r28, 0x00	; 0
 6ba:	d0 e0       	ldi	r29, 0x00	; 0
 6bc:	30 97       	sbiw	r30, 0x00	; 0
 6be:	11 f1       	breq	.+68     	; 0x704 <malloc+0x66>
 6c0:	40 81       	ld	r20, Z
 6c2:	51 81       	ldd	r21, Z+1	; 0x01
 6c4:	48 17       	cp	r20, r24
 6c6:	59 07       	cpc	r21, r25
 6c8:	c0 f0       	brcs	.+48     	; 0x6fa <malloc+0x5c>
 6ca:	48 17       	cp	r20, r24
 6cc:	59 07       	cpc	r21, r25
 6ce:	61 f4       	brne	.+24     	; 0x6e8 <malloc+0x4a>
 6d0:	82 81       	ldd	r24, Z+2	; 0x02
 6d2:	93 81       	ldd	r25, Z+3	; 0x03
 6d4:	20 97       	sbiw	r28, 0x00	; 0
 6d6:	19 f0       	breq	.+6      	; 0x6de <malloc+0x40>
 6d8:	9b 83       	std	Y+3, r25	; 0x03
 6da:	8a 83       	std	Y+2, r24	; 0x02
 6dc:	2b c0       	rjmp	.+86     	; 0x734 <malloc+0x96>
 6de:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__flp+0x1>
 6e2:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__flp>
 6e6:	26 c0       	rjmp	.+76     	; 0x734 <malloc+0x96>
 6e8:	21 15       	cp	r18, r1
 6ea:	31 05       	cpc	r19, r1
 6ec:	19 f0       	breq	.+6      	; 0x6f4 <malloc+0x56>
 6ee:	42 17       	cp	r20, r18
 6f0:	53 07       	cpc	r21, r19
 6f2:	18 f4       	brcc	.+6      	; 0x6fa <malloc+0x5c>
 6f4:	9a 01       	movw	r18, r20
 6f6:	be 01       	movw	r22, r28
 6f8:	df 01       	movw	r26, r30
 6fa:	ef 01       	movw	r28, r30
 6fc:	02 80       	ldd	r0, Z+2	; 0x02
 6fe:	f3 81       	ldd	r31, Z+3	; 0x03
 700:	e0 2d       	mov	r30, r0
 702:	dc cf       	rjmp	.-72     	; 0x6bc <malloc+0x1e>
 704:	21 15       	cp	r18, r1
 706:	31 05       	cpc	r19, r1
 708:	09 f1       	breq	.+66     	; 0x74c <malloc+0xae>
 70a:	28 1b       	sub	r18, r24
 70c:	39 0b       	sbc	r19, r25
 70e:	24 30       	cpi	r18, 0x04	; 4
 710:	31 05       	cpc	r19, r1
 712:	90 f4       	brcc	.+36     	; 0x738 <malloc+0x9a>
 714:	12 96       	adiw	r26, 0x02	; 2
 716:	8d 91       	ld	r24, X+
 718:	9c 91       	ld	r25, X
 71a:	13 97       	sbiw	r26, 0x03	; 3
 71c:	61 15       	cp	r22, r1
 71e:	71 05       	cpc	r23, r1
 720:	21 f0       	breq	.+8      	; 0x72a <malloc+0x8c>
 722:	fb 01       	movw	r30, r22
 724:	93 83       	std	Z+3, r25	; 0x03
 726:	82 83       	std	Z+2, r24	; 0x02
 728:	04 c0       	rjmp	.+8      	; 0x732 <malloc+0x94>
 72a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__flp+0x1>
 72e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__flp>
 732:	fd 01       	movw	r30, r26
 734:	32 96       	adiw	r30, 0x02	; 2
 736:	44 c0       	rjmp	.+136    	; 0x7c0 <malloc+0x122>
 738:	fd 01       	movw	r30, r26
 73a:	e2 0f       	add	r30, r18
 73c:	f3 1f       	adc	r31, r19
 73e:	81 93       	st	Z+, r24
 740:	91 93       	st	Z+, r25
 742:	22 50       	subi	r18, 0x02	; 2
 744:	31 09       	sbc	r19, r1
 746:	2d 93       	st	X+, r18
 748:	3c 93       	st	X, r19
 74a:	3a c0       	rjmp	.+116    	; 0x7c0 <malloc+0x122>
 74c:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <__brkval>
 750:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <__brkval+0x1>
 754:	23 2b       	or	r18, r19
 756:	41 f4       	brne	.+16     	; 0x768 <malloc+0xca>
 758:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 75c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 760:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <__brkval+0x1>
 764:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <__brkval>
 768:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 76c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 770:	21 15       	cp	r18, r1
 772:	31 05       	cpc	r19, r1
 774:	41 f4       	brne	.+16     	; 0x786 <malloc+0xe8>
 776:	2d b7       	in	r18, 0x3d	; 61
 778:	3e b7       	in	r19, 0x3e	; 62
 77a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 77e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 782:	24 1b       	sub	r18, r20
 784:	35 0b       	sbc	r19, r21
 786:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <__brkval>
 78a:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <__brkval+0x1>
 78e:	e2 17       	cp	r30, r18
 790:	f3 07       	cpc	r31, r19
 792:	a0 f4       	brcc	.+40     	; 0x7bc <malloc+0x11e>
 794:	2e 1b       	sub	r18, r30
 796:	3f 0b       	sbc	r19, r31
 798:	28 17       	cp	r18, r24
 79a:	39 07       	cpc	r19, r25
 79c:	78 f0       	brcs	.+30     	; 0x7bc <malloc+0x11e>
 79e:	ac 01       	movw	r20, r24
 7a0:	4e 5f       	subi	r20, 0xFE	; 254
 7a2:	5f 4f       	sbci	r21, 0xFF	; 255
 7a4:	24 17       	cp	r18, r20
 7a6:	35 07       	cpc	r19, r21
 7a8:	48 f0       	brcs	.+18     	; 0x7bc <malloc+0x11e>
 7aa:	4e 0f       	add	r20, r30
 7ac:	5f 1f       	adc	r21, r31
 7ae:	50 93 32 01 	sts	0x0132, r21	; 0x800132 <__brkval+0x1>
 7b2:	40 93 31 01 	sts	0x0131, r20	; 0x800131 <__brkval>
 7b6:	81 93       	st	Z+, r24
 7b8:	91 93       	st	Z+, r25
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <malloc+0x122>
 7bc:	e0 e0       	ldi	r30, 0x00	; 0
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	cf 01       	movw	r24, r30
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <free>:
 7c8:	0f 93       	push	r16
 7ca:	1f 93       	push	r17
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	00 97       	sbiw	r24, 0x00	; 0
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <free+0xe>
 7d4:	8c c0       	rjmp	.+280    	; 0x8ee <free+0x126>
 7d6:	fc 01       	movw	r30, r24
 7d8:	32 97       	sbiw	r30, 0x02	; 2
 7da:	13 82       	std	Z+3, r1	; 0x03
 7dc:	12 82       	std	Z+2, r1	; 0x02
 7de:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <__flp>
 7e2:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <__flp+0x1>
 7e6:	01 15       	cp	r16, r1
 7e8:	11 05       	cpc	r17, r1
 7ea:	81 f4       	brne	.+32     	; 0x80c <free+0x44>
 7ec:	20 81       	ld	r18, Z
 7ee:	31 81       	ldd	r19, Z+1	; 0x01
 7f0:	82 0f       	add	r24, r18
 7f2:	93 1f       	adc	r25, r19
 7f4:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <__brkval>
 7f8:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <__brkval+0x1>
 7fc:	28 17       	cp	r18, r24
 7fe:	39 07       	cpc	r19, r25
 800:	79 f5       	brne	.+94     	; 0x860 <free+0x98>
 802:	f0 93 32 01 	sts	0x0132, r31	; 0x800132 <__brkval+0x1>
 806:	e0 93 31 01 	sts	0x0131, r30	; 0x800131 <__brkval>
 80a:	71 c0       	rjmp	.+226    	; 0x8ee <free+0x126>
 80c:	d8 01       	movw	r26, r16
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	ae 17       	cp	r26, r30
 814:	bf 07       	cpc	r27, r31
 816:	50 f4       	brcc	.+20     	; 0x82c <free+0x64>
 818:	12 96       	adiw	r26, 0x02	; 2
 81a:	2d 91       	ld	r18, X+
 81c:	3c 91       	ld	r19, X
 81e:	13 97       	sbiw	r26, 0x03	; 3
 820:	ad 01       	movw	r20, r26
 822:	21 15       	cp	r18, r1
 824:	31 05       	cpc	r19, r1
 826:	09 f1       	breq	.+66     	; 0x86a <free+0xa2>
 828:	d9 01       	movw	r26, r18
 82a:	f3 cf       	rjmp	.-26     	; 0x812 <free+0x4a>
 82c:	9d 01       	movw	r18, r26
 82e:	da 01       	movw	r26, r20
 830:	33 83       	std	Z+3, r19	; 0x03
 832:	22 83       	std	Z+2, r18	; 0x02
 834:	60 81       	ld	r22, Z
 836:	71 81       	ldd	r23, Z+1	; 0x01
 838:	86 0f       	add	r24, r22
 83a:	97 1f       	adc	r25, r23
 83c:	82 17       	cp	r24, r18
 83e:	93 07       	cpc	r25, r19
 840:	69 f4       	brne	.+26     	; 0x85c <free+0x94>
 842:	ec 01       	movw	r28, r24
 844:	28 81       	ld	r18, Y
 846:	39 81       	ldd	r19, Y+1	; 0x01
 848:	26 0f       	add	r18, r22
 84a:	37 1f       	adc	r19, r23
 84c:	2e 5f       	subi	r18, 0xFE	; 254
 84e:	3f 4f       	sbci	r19, 0xFF	; 255
 850:	31 83       	std	Z+1, r19	; 0x01
 852:	20 83       	st	Z, r18
 854:	8a 81       	ldd	r24, Y+2	; 0x02
 856:	9b 81       	ldd	r25, Y+3	; 0x03
 858:	93 83       	std	Z+3, r25	; 0x03
 85a:	82 83       	std	Z+2, r24	; 0x02
 85c:	45 2b       	or	r20, r21
 85e:	29 f4       	brne	.+10     	; 0x86a <free+0xa2>
 860:	f0 93 34 01 	sts	0x0134, r31	; 0x800134 <__flp+0x1>
 864:	e0 93 33 01 	sts	0x0133, r30	; 0x800133 <__flp>
 868:	42 c0       	rjmp	.+132    	; 0x8ee <free+0x126>
 86a:	13 96       	adiw	r26, 0x03	; 3
 86c:	fc 93       	st	X, r31
 86e:	ee 93       	st	-X, r30
 870:	12 97       	sbiw	r26, 0x02	; 2
 872:	ed 01       	movw	r28, r26
 874:	49 91       	ld	r20, Y+
 876:	59 91       	ld	r21, Y+
 878:	9e 01       	movw	r18, r28
 87a:	24 0f       	add	r18, r20
 87c:	35 1f       	adc	r19, r21
 87e:	e2 17       	cp	r30, r18
 880:	f3 07       	cpc	r31, r19
 882:	71 f4       	brne	.+28     	; 0x8a0 <free+0xd8>
 884:	80 81       	ld	r24, Z
 886:	91 81       	ldd	r25, Z+1	; 0x01
 888:	84 0f       	add	r24, r20
 88a:	95 1f       	adc	r25, r21
 88c:	02 96       	adiw	r24, 0x02	; 2
 88e:	11 96       	adiw	r26, 0x01	; 1
 890:	9c 93       	st	X, r25
 892:	8e 93       	st	-X, r24
 894:	82 81       	ldd	r24, Z+2	; 0x02
 896:	93 81       	ldd	r25, Z+3	; 0x03
 898:	13 96       	adiw	r26, 0x03	; 3
 89a:	9c 93       	st	X, r25
 89c:	8e 93       	st	-X, r24
 89e:	12 97       	sbiw	r26, 0x02	; 2
 8a0:	e0 e0       	ldi	r30, 0x00	; 0
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	d8 01       	movw	r26, r16
 8a6:	12 96       	adiw	r26, 0x02	; 2
 8a8:	8d 91       	ld	r24, X+
 8aa:	9c 91       	ld	r25, X
 8ac:	13 97       	sbiw	r26, 0x03	; 3
 8ae:	00 97       	sbiw	r24, 0x00	; 0
 8b0:	19 f0       	breq	.+6      	; 0x8b8 <free+0xf0>
 8b2:	f8 01       	movw	r30, r16
 8b4:	8c 01       	movw	r16, r24
 8b6:	f6 cf       	rjmp	.-20     	; 0x8a4 <free+0xdc>
 8b8:	8d 91       	ld	r24, X+
 8ba:	9c 91       	ld	r25, X
 8bc:	98 01       	movw	r18, r16
 8be:	2e 5f       	subi	r18, 0xFE	; 254
 8c0:	3f 4f       	sbci	r19, 0xFF	; 255
 8c2:	82 0f       	add	r24, r18
 8c4:	93 1f       	adc	r25, r19
 8c6:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <__brkval>
 8ca:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <__brkval+0x1>
 8ce:	28 17       	cp	r18, r24
 8d0:	39 07       	cpc	r19, r25
 8d2:	69 f4       	brne	.+26     	; 0x8ee <free+0x126>
 8d4:	30 97       	sbiw	r30, 0x00	; 0
 8d6:	29 f4       	brne	.+10     	; 0x8e2 <free+0x11a>
 8d8:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__flp+0x1>
 8dc:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <__flp>
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <free+0x11e>
 8e2:	13 82       	std	Z+3, r1	; 0x03
 8e4:	12 82       	std	Z+2, r1	; 0x02
 8e6:	10 93 32 01 	sts	0x0132, r17	; 0x800132 <__brkval+0x1>
 8ea:	00 93 31 01 	sts	0x0131, r16	; 0x800131 <__brkval>
 8ee:	df 91       	pop	r29
 8f0:	cf 91       	pop	r28
 8f2:	1f 91       	pop	r17
 8f4:	0f 91       	pop	r16
 8f6:	08 95       	ret

000008f8 <memset>:
 8f8:	dc 01       	movw	r26, r24
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <memset+0x6>
 8fc:	6d 93       	st	X+, r22
 8fe:	41 50       	subi	r20, 0x01	; 1
 900:	50 40       	sbci	r21, 0x00	; 0
 902:	e0 f7       	brcc	.-8      	; 0x8fc <memset+0x4>
 904:	08 95       	ret

00000906 <__do_global_dtors>:
 906:	10 e0       	ldi	r17, 0x00	; 0
 908:	cd e5       	ldi	r28, 0x5D	; 93
 90a:	d0 e0       	ldi	r29, 0x00	; 0
 90c:	04 c0       	rjmp	.+8      	; 0x916 <__do_global_dtors+0x10>
 90e:	fe 01       	movw	r30, r28
 910:	0e 94 49 03 	call	0x692	; 0x692 <__tablejump2__>
 914:	21 96       	adiw	r28, 0x01	; 1
 916:	ce 35       	cpi	r28, 0x5E	; 94
 918:	d1 07       	cpc	r29, r17
 91a:	c9 f7       	brne	.-14     	; 0x90e <__do_global_dtors+0x8>
 91c:	f8 94       	cli

0000091e <__stop_program>:
 91e:	ff cf       	rjmp	.-2      	; 0x91e <__stop_program>
